= slide 'Днес' do
  list:
    Test-Driven Development
    Автоматизирани тестове
    Малко MiniTest
    Разни неща

= slide 'Преди това' do
  p Имате ли въпроси по втора задача?
  p.action Не забравяйте да ползвате форумите за да питате неща.

= slide 'Въпроси към вас' do
  list:
    Колко от вас са писали тестове?
    Колко от вас пишат тестове редовно?
    Колко от вас пишат тестовете преди кода?

= slide 'Test-Driven Development' do
  list:
    Оплетена терминология
    Тестове != TDD
    Писането на тестове си е писане на тестове
    Писането им преди кода е Test-Driven Development

= slide 'Test-Driven Development', 'demo' do
  list:
    Ще ви направим кратка демонстрация на TDD
    Ще си направим минималистичен "framework" за тестване
    Ще демонстрирам подхода без много-много да го обяснявам
    Ще напишем рационални числа

= slide 'Test-Driven Development', 'framework' do
  p Невероятно прост "framework":
  example:
    def ok(success, string = nil)
      return if success
      puts string if string
      puts caller.join("\n")
      exit(1)
    end

= slide 'Test-Driven Development', 'framework (2)' do
  list:
    `Kernel#caller` връща текущия стек като масив от низове
    `exit(status)` приключва изпълнението със exit code
    `ok` е дефиниран в Object и е достъпен навсякъде

= slide 'watchr', '$ gem install watchr' do
  list:
    [github:mynyml/watchr] е много полезен gem
    Следи файлове за промяна и изпълнява някакъв код
    Можете да го ползвате за ред неща
    Пускане на тестове, компилация, генериране на статични файлове и т.н.
    Ние ползваме подобен подход за лекциите
    [github:guard/guard] е по-популярен gem, но `watchr` е по-прост

= slide 'watchr', 'примерен файл' do
  example:
    watch('rat\.rb') do
      system 'clear'
      success = system 'ruby rat.rb'

      if success
        puts 'OK'
      else
        puts "Tests failed ;("
      end
    end

= slide 'Kernel#system', 'накратко' do
  list:
    Изпълнява външна програма
    Предава стандартните вход, изход и грешка
    Връща, когато програмата е приключила
    Връща истина, ако програмата е приключила с exit code = 0
    Връща неистина, ако програмата е приключила с exit code != 0

= slide 'Демо', '...лишън' do
  div

= slide 'Test-Driven Development', 'основен цикъл' do
  p Red-Green-Refactor
  list:
    Red: Добавяме нов тест, който не минава
    Green: Добавяме най-простия код, в който теста да мине
    Refactor: Елиминираме повторение

= slide 'minitest', '$ gem install minitest' do
  list:
    Тестовия framework "по подразбиране" в 1.9
    Предлага различни формати за тестване
    Засега ще ползваме `minitest/unit`
    По-натам ще разгледаме `rspec`

= slide 'xUnit' do
  list:
    Повечето тестови библиотеки споделят структура, която се нарича `xUnit`
    Кръстена е на `SUnit` и в последствие - `jUnit`.
    Терминологията е горе-долу една и съща в повечето езици
    `minitest/unit` е xUnit библиотека

= slide 'xUnit', 'основна терминология' do
  list:
    Assertion е твърдение, че дадено нещо е истина
    Test method е сценарий, който проверява нещо
    Test case са сценарии, групирани логически

= slide 'minitest', 'прост пример' do
  example:
    require 'minitest/unit'

    class ExampleTest < MiniTest::Unit::TestCase
      def test_adding_two_and_two
        assert_equal 4, 2 + 2
      end

      def test_array_push_and_pop
        array = []
        array.push 1
        array.push 2

        assert_equal 2, array.pop
        assert_equal 1, array.pop
      end
    end

= slide 'MiniTest::Unit::TestCase' do
  list:
    Всички test case-ове наследяват `MiniTest::Unit::TestCase`
    Всеки метод, който започва с `test_` е тестов метод
    В тестовите методи има `assert`-ове
    Има опционални `setup` и `teardown`, които се викат преди и след всеки тест

= slide 'Проверки' do
  example:
    assert test, message # Проверява, че test е истина
    assert artists.include?('Sting'), 'Sting has a song'

    assert_equal expected, actual, message # Проверява expected == actual
    assert_equal 4, 2 + 2, 'Basic arithmetic'

    assert_in_delta expected, actual, delta, message
    assert_equal 3.1415, Math::PI, 0.0001

    assert_raises(error, &block) # Очаква изключение
    assert_raises(KeyError) { {}.fetch :baba }

= slide 'Пускане на тестове' do
  pre
    code $ testrb something_test.rb

= slide 'Код от лекцията' do
  p
    ' По време на лекцията написахме повечко код. Можете да намерите крайния
      резултат в <a href="https://gist.github.com/dc283b5a3b8e4a004026">този gist</a>.
      Имайте предвид, че важното нещо бе процесът на писане, а не крайния резултат.
      Съответно, кодът е недовършен и не най-добрия възможен.
