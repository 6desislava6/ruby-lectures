= slide 'Днес' do
  list:
    <code>case</code> в Ruby
    Трикове с присвояване
    <code>require</code>
    Структура на простички gem-ове
    Замразяване на обекти
    Малко интроспекция
    Разни

= slide 'case' do
  p В Ruby има "switch". Казва се <code>case</code>.

  example:
    def quote(name)
      case name
        when 'Yoda'
          puts 'Do or do not. There is no try.'
        when 'Darth Vader'
          puts 'The Force is strong with this one.'
        when 'R2-D2'
          puts 'Beep. Beep. Beep.'
        else
          puts 'Dunno what to say'
      end
    end

= slide 'case', 'особености' do
  list:
    Няма fall-through. Не се пише `break`.
    Ако нито един `when` не мине, изпълнява се `else`.
    Ако нито един `when` не мине, и няма `else`, не става нищо.
    <code>case</code> е израз, което значи, че връща стойност.

= slide 'case', 'алтернативен синтаксис' do
  example:
    case operation
      when :& then puts 'And?'
      when :| then puts 'Or...'
      when :! then puts 'Not!'
    end

= slide 'case', 'връщана стойност' do
  p На какво ще се оцени следният код?

  example:
    case 'Wat?'
      when 'watnot' then puts "I'm on a horse."
    end

  .action.answer
    p Ако няма <code>else</code> и никой <code>when</code> не match-не, се връща <code>nil</code>.

= slide 'case', 'стойности' do
  p <code>case</code> не сравнява с <code>==</code>. Може да напишете следното.

  example:
    def qualify(age)
      case age
        when 0..12
          'still very young'
        when 13..19
          'a teenager! oh no!'
        when 33
          'the age of jesus'
        when 90..200
          'wow. that is old!'
        else
          'not very interesting'
        end
    end

= slide 'case', 'Object#===' do
  p <code>case</code> сравнява с <code>===</code>. Няколко класа го имплементират:

  list:
    <code>Range</code>
    <code>Regexp</code>
    <code>Class</code>
    Списъкът не е изчерпателен...
    По подразбиране се оценява като <code>==</code>.

= slide 'case', 'Class#===' do
  example:
    def qualify(thing)
      case thing
        when Integer then 'this is a number'
        when String then 'it is a string'
        when Array then thing.map { |item| qualify item }
        else 'huh?'
      end
    end

= slide 'case', 'Range#===' do
  example:
    case hours_of_sleep
      when 8..10 then 'I feel fine.'
      when 6...8 then 'I am a little sleepy.'
      when 1..3  then 'OUT OF MY WAY! I HAVE PLACES TO BE AND PEOPLE TO SEE!'
    end

= slide 'case', 'Regexp#===' do
  example:
    def parse_date(date_string)
      case date_string
        when /(\d{4})-(\d\d)-(\d\d)/
          Date.new $1.to_i, $2.to_i, $3.to_i
        when /(\d\d)\/(\d\d)/(\d{4})/
          Date.new $3.to_i, $1.to_i, $2.to_i
      end
    end

= slide 'case', 'с обикновени условия' do
  list:
    Можете да слагате и цели изрази във <code>when</code>
    Изпуска се параметърът след <code>case</code>, например:

  .action
    example:
      thing = 42
      case
        when thing == 1 then 1
        else 'no_idea'
      end

  list:
    Не го правете.
    Ако ви се налага, ползвайте обикновени <code>if</code>-ове

= slide 'Въпроси по case' do
  p Сега е моментът.

= slide 'Присвояване в Ruby' do
  list:
    Присвояването в Ruby:
    <code>foo = 'baba'</code>
    Може малко повече от това... :)
    Паралелно присвояване
    Вложено присвояване
    Комбинации между двете

= slide 'Паралелно присвояване', 'прост пример' do
  annotate:
    a, b = 1, 2
    a              # =>
    b              # =>

    a, b = b, a
    a              # =>
    b              # =>

  p Има няколко различни случая, които ще разгледаме.

= slide 'Паралелно присвояване', 'присвояване на една променлива' do
  annotate:
    a = 1, 2, 3
    a # =>

  p Практически същото като <code>a = [1, 2, 3]</code>

= slide 'Паралелно присвояване', 'разпакетиране на дясната страна' do
  annotate:
    a, b = [1, 2, 3]
    a # =>
    b # =>

    a, b = 1, 2, 3
    a # =>
    b # =>

  list:
    Излишните аргументи вдясно се игнорират
    Скобите са "опционални" в този случай
    Ако вляво имате повече променливи отколкото вдясно, те ще получат стойност <code>nil</code>

= slide 'Паралелно присвояване', 'със splat аргументи' do
  annotate:
    head, *tail = [1, 2, 3]
    head   # =>
    tail   # =>

    first, *middle, last = 1, 2, 3, 4
    first  # =>
    middle # =>
    last   # =>

  list:
    <code>middle</code> и <code>head</code> обират всичко останало
    Очевидно, може да имате само една splat-променлива на присвояване

= slide 'Паралелно присвояване', 'splat аргументи отдясно' do
  annotate:
    first, *middle, last = 1, [2, 3, 4]
    first  # =>
    middle # =>
    last   # =>

    first, *middle, last = 1, *[2, 3, 4]
    first  # =>
    middle # =>
    last   # =>

= slide 'Вложено присвояване' do
  annotate:
    head, (title, body) = [1, [2, 3]]
    head   # =>
    title  # =>
    body   # =>

  list:
    Скобите ви позволяват да влезете едно ниво "навътре" и да разбиете подаден списък на променливи
    Не сте ограничени само до две нива (това работи: <code>head, (title, (body,)) = [1, [2, [3]]]</code>)
    Можете да ги комбинирате с паралелното присвояване, за да правите сложни магарии

= slide 'Вложено присвояване и splat-ове' do
  annotate:
    head, (title, *sentences) = 1, [2, 3, 4, 5, 6]
    head      # =>
    title     # =>
    sentences # =>

  list:
    Може да имате по една звездичка на "ниво" (т.е. скоби)

= slide 'Ред на оценка' do
  p Бележка за реда на оценка при присвояване — първо отдясно, след това отляво:

  annotate:
    x = 0
    a, b, c = x, (x += 1), (x += 1)
    x # =>
    a # =>
    b # =>
    c # =>

= slide 'Променливата _' do
  list:
    Носи семантика на placeholder ("този аргумент не ми трябва")
    Освен тази семантика, в Ruby е и малко по-специална

= slide 'Променливата _' do
  p Може да ползвате едно име само един път, когато то се среща в списък с параметри на метод, блок и прочее.

  example:
    Proc.new { |a, b, a| } # SyntaxError: duplicated argument name
    Proc.new { |_, b, _| } # => #<Proc:0x007f818af68de0@(irb):23>

  p Горното важи не само за блокове, но и за методи.

= slide 'Присвояване в Ruby', 'Къде важат тези правила?' do
  list:
    Очевидно, при нормално присвояване
    Това включва и връщана стойност от метод, например <code>success, message = execute(job)</code>
    При разгъване на аргументи на блокове, например:

  .action
    example:
      [[1, [2, 3]], [4, [5, 6]], [7, [8, 9]]].each do |a, (b, c)|
        puts "#{a}, #{b}, #{c}"
      end
      # 1, 2, 3
      # 4, 5, 6
      # 7, 8, 9

  list:
    Донякъде и при разгъване на аргументи на методи (бройката трябва да отговаря)
    Запомнете ги

= slide 'Присвояване в Ruby' do
  p Имате ли въпроси по тази тема?

= slide 'Импортиране на файлове' do
  p В Ruby, код от други файлове се импортира с <code>require</code>.

  .action
    p Например:

    example:
      require 'bigdecimal'
      require 'bigdecimal/util'

= slide 'Какво търси require?' do
  list:
    <code>require 'foo'</code> търси файл <code>foo.rb</code> в "пътя за зареждане".
    Още известен като load path.
    Той съдържа няколко "системни" пътища, плюс пътища от gem-ове, които сте си инсталирали.
    Очевидно, <code>require 'foo/bar'</code> търси директория <code>foo</code> с файл <code>bar.rb</code>.
    Разширението <code>.rb</code> отзад не е задължително да присъства.
    <code>require './foo'</code> търси <code>foo.rb</code> в текущата директория.
    Разбира се, абсолютни пътища също работят: <code>require '/home/skanev/foo.rb'</code>.

= slide 'Зареждане на файлове от текущата директория' do
  list:
    Обикновено във вашия load path текущата директория не присъства
    Някои хора се осмеляват да си я добавят, променяйки load path
    Адът се отваря и ги поглъща
    Ползвайте релативен път, т.е. <code>require './foo'</code>

= slide 'Зареждане на файлове от текущата директория', 'require_relative' do
  list:
    Алтернатива на горното е <code>require_relative</code>
    <code>require_relative 'foo'</code> зарежда 'foo' спрямо <strong>директорията на изпълняващия се файл</strong>
    <code>require './foo'</code> зарежда спрямо <strong>текущата директория на изпълняващия процес</strong>

= slide 'Load path', 'където Ruby търси файлове за require' do
  ul
    li Достъпен е като <code>$LOAD_PATH</code>.
    li Още <code>$:</code>
    li Може да го променяте. Стандартно с <code>$:.unshift(path)</code>
    li Не е много добра практика да го правите.

= slide 'Как работи require?' do
  list:
    Изпълнява файла.
    Константите, класове, глобални променливи и прочее са достъпни отвън.
    Няма абстракция. Все едно сте inline-нали файла на мястото на <code>require</code>-а. Почти.
    Файлът е изпълнен с друг binding. Демек, локалните му променливи са изолирани. Но само те.
    Не че има значение, но <code>main</code> обекта е същия.
    Файлът се изпълнява само веднъж. Повторни <code>require</code>-и не правят нищо.
    Последното може да се излъже по няколко начина.
    <code>require</code> може да зарежда <code>.so</code> и <code>.dll</code> файлове.

= slide 'Типичната структура на един gem', 'skeptic опростен' do
  pre
    ' .
      ├── README.rdoc
      ├── Rakefile
      ├── bin
      │   └── skeptic
      ├── features
      ├── lib
      │   ├── skeptic
      │   │   ├── rules.rb
      │   │   └── scope.rb
      │   └── skeptic.rb
      ├── skeptic.gemspec
      └── spec

= slide 'Особеностите' do
  list:
    <code>lib/</code> обикновено съдържа <code>foo.rb</code> и <code>lib/foo/</code>.
    <code>foo.rb</code> обикновено е единственото нещо в <code>lib/</code>.
    Всичко останало е в <code>lib/foo</code>.
    <code>lib/</code> се добавя в load path.
    Така вече може да правите <code>require 'foo'</code> или <code>require 'foo/something'</code>.
    По този начин не замърсявате <code>require</code> областта.
    RubyGems прави това "автомагично".

= slide 'Останалите неща' do
  ul
    li Разгледайте #{github_repo('skanev/skeptic')} за повече подробности.
    li После разгледайте някой друг gem.
    li После си поиграйте малко с <code>require</code> и <code>$LOAD_PATH</code> и вижте какво се случва.

= slide 'Kernel#load' do
  list:
    `load` е много сходен с `require`, но има няколко разлики.
    Иска разширение на файл - `load 'foo.rb'`.
    Повторни `load`-ове изпълняват файла.
    `load` не може да зарежда `.so`/`.dll` библиотеки.
    `load` има опционален параметър, с който може да обвие файла в анонимен модул.
    Последното дава известна изолация.

= slide 'Замразяване на обекти в Ruby' do
  list:
    Реално превръща mutable-обекти в immutable
    Замразяването става с `Object#freeze`
    Можете да проверите дали обект е замразен с `Object#frozen?`
    Веднъж замразен, даден обект не може да бъде размразен
    Не можете да променяте вече замразени обекти
    Често се ползва, когато присволявате mutable-типове на константи
    Възможно е да доведе до ускоряване на вашия код

= slide 'Замразяване на обекти' do
  example:
    module Entities
      ENTITIES = {
        '&' => '&amp;',
        '"' => '&quot;',
        '<' => '&lt;',
        '>' => '&gt;',
      }.freeze

      ENTITY_PATTERN = /#{ENTITIES.keys.join('|')}/.freeze

      def escape(text)
        text.gsub ENTITY_PATTERN, ENTITIES
      end
    end

