= slide 'Днес' do
  list:
    Още за класовите методи
    Замразяване на обекти
    Изключения
    Специален гост втория час – [Mislav Marohnić](https://github.com/mislav)

= slide 'Ново предизвикателство' do
  list:
    [Качено е на сайта](/challenges/6)
    Имате време до сряда по обяд

= slide 'Класови методи' do
  list:
    Условието на втора задача изисква създаването на класов метод
    Миналия път ви показахме един от начините да дефинирате такъв
    Този начин не е единствен и не е "каноничният"
    Без да навлизаме в детайли, днес ще ви покажа двата други начина

= slide 'Класови методи', 'преговор' do
  example:
    class TodoList
      def TodoList.parse(todos_string)
        # Solution lost.
      end
    end

= slide 'Класови методи', 'втори начин' do
  p Този начин е еквивалентен на предишния слайд:

  example:
    class TodoList
      def self.parse(todos_string)
        # Solution lost.
      end
    end

  p.action Това работи, понеже:
  list:
    Тялото на класа е изпълним код
    Както във всеки друг контекст в Ruby, и там имаме `self`
    `self` и `TodoList` в тялото на класа са едно и също

= slide 'Класови методи', 'трети начин' do
  example:
    class TodoList
      class << self
        def parse(todos_string)
          # Solution lost.
        end
      end
    end

  list:
    Какъв е този синтаксис и защо работи, ще си говорим по-нататък

= slide 'Класови методи', 'конвенции' do
  list:
    Първият начин не се ползва (`def ClassName.method_name() end`)
    При дефиниране на един, максимум два класови метода, ползваме втория начин
    При дефиниране на повече от един класов метод, обикновено ползваме третия начин
    За справка – [ръководството по стил](https://github.com/fmi/ruby-style-guide#classes)

= slide 'Въпроси дотук?' do
  p Преди да продължим със следващата тема.

= slide 'Замразяване на обекти в Ruby' do
  list:
    Реално превръща mutable-обекти в immutable
    Замразяването става с `Object#freeze`
    Можете да проверите дали обект е замразен с `Object#frozen?`
    Веднъж замразен, даден обект не може да бъде размразен
    Не можете да променяте вече замразени обекти
    Често се ползва, когато присвоявате mutable-типове на константи

= slide 'Замразяване на обекти' do
  example:
    module Entities
      ENTITIES = {
        '&' => '&amp;',
        '"' => '&quot;',
        '<' => '&lt;',
        '>' => '&gt;',
      }.freeze

      ENTITY_PATTERN = /#{ENTITIES.keys.join('|')}/.freeze

      def escape(text)
        text.gsub ENTITY_PATTERN, ENTITIES
      end
    end

= slide 'Замразяване на низове' do
  p Тъй като низовете в Ruby са mutable, всяко срещане на низ = нов обект:

  annotate:
    ''.object_id                 # =>
    ''.object_id                 # =>
    ''.object_id == ''.object_id # =>

  list:
    Това е performance проблем
    Символите го решават, но те не са низове (не се garbage collect-ват)
    Последното води до опасност от DoS-атаки (memory leaks)

= slide 'Замразяване на низове', 'пример' do
  example:
    class HTTP
      attr_reader :method

      def post?
        method == 'POST' # New string object on each call
      end
    end

= slide 'Замразяване на низове', 'пример за workaround' do
  example:
    class HTTP
      attr_reader :method
      METHOD_POST = 'POST'.freeze

      def post?
        method == METHOD_POST
      end
    end

  p.action Това е досадно. Затова в Ruby 2.1 има и по-добро решение.

= slide 'Синтаксис за замразяване на низове' do
  list:
    `"Chunky bacon".freeze` няма да работи, защото пак ще създава нов обект
    Единственото решение - синтаксис
    `"Chunky bacon"f` ще създаде замразен обект от тип низ
    Ако вече има такъв обект, с такова съдържание, той ще бъде преизползван
    Синтаксисът е наличен от Ruby 2.1 нататък

= slide 'Въпроси дотук?' do
  p Преди да продължим със следващата тема.

= slide 'Изключения' do
  list:
    Всички знаем какво са изключения.
    Нали?
    Метод за обработка на грешки.
    Позволява разделяне на обработката от останалия код.
    Все хубави неща.

= slide 'Изключенията в Ruby' do
  list:
    Накратко, двойка клас и низ.
    Съответно, тип на изключението и съобщение за грешка.
    Класовете за изключения са в йерархия.
    Два важни типа `Exception` и `StandardError`.
    `StandardError < Exception`.

= slide 'Непълна йерархия' do
  pre
    ' Object
      +-- Exception
         +-- NoMemoryError
         +-- ScriptError
         |   +-- SyntaxError
         |   +-- LoadError
         +-- SecurityError
         +-- StandardError
             +-- ArgumentError
             +-- IndexError
             |   +-- KeyError
             |   +-- StopIteration
             +-- NameError
             |   +-- NoMethodError
             +-- RuntimeError
             +-- TypeError

  p После ще видим пълната.

= slide 'Предизвикване на изключения' do
  annotate:
    # Предизвиква RuntimeError
    raise "'Prophet!' said I, 'Thing of evil!" #!

    # Като горното, но с различен текст
    raise RuntimeError, 'prophet still, if bird or devil!' #!

    # Друг начин да предизвикаме RuntimeError
    raise RuntimeError.new('Whether tempter sent, or whether...') #!

= slide 'Хващане на изключения' do
  annotate:
    begin
      puts '...tempest tossed thee here ashore'
      raise NameError, 'Desolate yet all undaunted'
    rescue => ex
      ex.message   #=>
      ex.class     #=>
    end

= slide 'Хващане на изключения', 'хващане на конкретен тип' do
  annotate:
    begin
      raise KeyError, 'on this desert land enchanted'
    rescue ArgumentError => ex
      puts 'on this home by horror haunted'
    rescue KeyError, TypeError => ex
      ex.message  # =>
      ex.class    # =>
    end

= slide 'Какво хваща rescue?' do
  p <code>rescue</code> хваща "само" наследници на <code>StandardError</code>, ако не сме указали друго:
  pre
    ' Object
      +-- Exception
         +-- NoMemoryError
         +-- ScriptError<strong>
         +-- StandardError
             +-- ArgumentError
             +-- NameError
             |   +-- NoMethodError
             +-- RuntimeError</strong>

= slide 'Въпрос към вас', 'Какво ще се случи тук?' do
  example:
    begin
      raise KeyError, 'tell me truly, I implore'
    rescue IndexError => ex
      puts 'IndexError'
    rescue KeyError => ex
      puts 'KeyError'
    end

= slide 'Хващане на изключения', 'приоритет на rescue клаузите' do
  p Припомняне <code>KeyError &lt; IndexError</code>

  annotate:
    $eh = 'foo'

    begin
      raise KeyError, 'Is there - is there balm in Gilead?'
    rescue IndexError => ex
      $eh = 'index'
    rescue KeyError => ex
      $eh = 'key'
    end

    $eh    # =>

  p.action Изпълнява се първия <code>rescue</code>, за който изключението е <code>kind_of?</code> типа.

= slide 'Запомнете' do
  p Динамичните езици обикновено ползват прости правила

  list:
    "Първото отговарящо" е по-просто от "по-подходящото".
    Или от "всички отговарящи".
    Аналогичен случай с модулите.
    Два дизайн принципа: KISS и PLOA.
    Keep it simple, stupid!
    Principle of least astonishment.
    Важат с пълна сила за кода, който пишете.

= slide 'Хващане на изключения', 'ensure клауза' do
  p Кодът в <code>ensure</code> клаузата се изпълнява винаги.

  example:
    begin
      raise 'tell me - tell me, I implore!' if rand(2).zero?
    ensure
      puts '????? ??? ?????, "?????????"'
    end

  ul
    li <code>rand(2).zero?</code> връща <code>true</code> или <code>false</code>, 50 на 50.
    li Подходяща е за затваряне на ресурс, като отворен файл.
    li Някой сеща ли се какво има на мястото на въпросителните?

= slide 'Хващане на изключения', 'else клауза' do
  p <code>else</code> клаузата се изпълнява когато няма възникнало изключение.

  example:
    begin
      launch_nukes
    rescue
      puts 'Uh-oh! Something went wrong :('
    else
      puts 'War... War never changes'
    end

  list:
    Обърнете внимание, че `launch_nukes` няма удивителна.
    Дори да е опасен, няма &quot;по-безопасна&quot; версия.
    Не заслужава допълнителна пунктуация.

= slide 'begin/end in all its glory!' do
  example:
    begin
      get_a_life
    rescue NoFriendsError => ex
      puts 'Goodbye cruel world'
    rescue InsufficientVespeneGasError, NotEnoughMineralsError => ex
      puts 'I think I play too much StarCraft'
    rescue
      puts ';('
    else
      puts 'Woohoo!'
    ensure
      puts 'rm -rf ~/.history'
    end

= slide 'rescue в метод' do
  p В случай, че ползвате <code>rescue</code> в метод така:

  example:
    def execute
      begin
        potentially_dangerous
      rescue SomeException => e
        # Handle the error
      ensure
        # Ensure something always happens
      end
    end

= slide 'rescue в метод', 'Предпочитания вариант' do
  p По-добре е да го запишете без <code>begin</code>/<code>end</code>, което е еквивалентно на предното:

  example:
    def execute
      potentially_dangerous
    rescue SomeException => e
      # Handle the error
    ensure
      # Ensure something always happens
    end

= slide 'Предизвикване на изключение', 'по време на обработка на друго' do
  p Ако възникне изключение при обработка друго, старото се игнорира и се "вдига" новото.

  example:
    begin
      raise KeyError
    rescue
      raise TypeError
      puts "I'm a line of code, that's never executed ;("
    end

= slide 'raise в rescue' do
  p
    ' <code>raise</code> в <code>rescue</code> клауза "вдига" същото
      изключение, което се обработва.

  example:
    begin
      raise KeyError, 'But high she shoots through air and light'
    rescue
      puts 'Whoops'
      raise
    end

= slide 'begin/end', '...е израз, като всичко друго в ruby' do
  annotate:
    result = begin
      raise KeyError if rand(3).zero?
      raise NameError if rand(3).zero?
    rescue KeyError
      'nyckel'
    rescue NameError
      'namn'
    else
      'ingenting'
    end

    result    # =>

= slide 'rescue като модификатор' do
  ul
    li <code>rescue</code> може да се ползва като модификатор.
    li Ако възникне изключение, rescue връща стойността отдясно.
    li Внимавайте. Така може да хващате само <code>StandardError</code>.

  annotate:
    [].fetch(1) rescue 'baba' # =>

= slide 'Exception#exception' do
  p
    ' <code>raise type, message</code> всъщност извиква <code>type.exception(message)</code>
      за да конструира изключение.

  annotate:
    class Thing
      def exception(message)
        NameError.new(message)
      end
    end

    thing = Thing.new
    raise thing, 'whoops' #!

= slide 'Как да ползваме изключения' do
  p Може да разделим изключенията на два вида.

  ul
    li Такива, които обикновено ще хващаме с <code>rescue</code>.
    li Такива, които няма да хващаме.

  p За първите обикновено създаваме клас. За вторите обикновено ползваме <code>raise</code>.

= slide 'Кога ползваме изключения' do
  list:
    Някой ще хваща ли това изключение въобще?
    Ако не, не правете нов клас.
    Клиентът може ли да предвиди дали ще възникне изключение?
    Ако да, не го принуждавайте да го ползва.
    Не принуждавайте клиента да знае за изключенията ви, освен когато нямате избор.
    Например писане по мрежата - няма как да знаете предварително.

= slide 'Разсъждения' do
  list:
    Много рядко някой иска да хване `KeyError` или `IndexError`. Защо?
    Ако пишете библиотека, помислете за базов клас на нейните изключения.
    Look Before You Leap и Better Ask Forgiveness Than Permission.
    Не ползвайте изключенията за control flow. В Ruby има друга конструкция.

= slide 'catch и throw' do
  ul
    li Сходни на <code>raise</code> и <code>rescue</code>.
    li Не ползват изключения.
    li Служат за предаване на информация по стека.

= slide 'catch и throw' do
  annotate:
    def iterate_pairs(hash)
      hash.values.each { |array| iterate_values array }
    end

    def iterate_values(array)
      array.each do |item|
        if item == 'Nemo'
          puts 'Found Nemo!'
          throw :done
        end
      end
    end

    animals = {cats: %w[Simba], fish: %w[Crispy Nemo], boars: %w[Pumba]}
    catch(:done) { iterate_pairs(animals) }

  p Този пример е доста синтетичен.

= slide 'catch и throw', 'накратко' do
  list:
    `catch` приема символ и блок.
    Нещо в блока може да извика `throw` със същия символ.
    Когато това стане, Ruby започва да търси обратно по стека до съответния `catch`.
    Когато бъде намерен, изпълнението продължава след `catch`-а.
    `throw` взема допълнителен аргумент, който е върнатата стойност на `catch`.
    Ако няма `throw`, стойността на `catch` е последния оценен израз.
