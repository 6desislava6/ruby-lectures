= slide 'Административни неща', '...където припомняме за какво идеше реч' do
  ul
    li.action Ruby курс с някакво количество Rails към края
    li.action Ние сме Стефан (по-готиния) и Митьо (другия)
    li.action Понеделник (229) и Сряда (325) от 19:00
    li.action
      ' Сайтът ни е <a href="http://fmi.ruby.bg/">fmi.ruby.bg</a> &mdash; регистрирайте се
        още днес. По-късно ще ви дадем и добри причини.
    li.action
      ' Имаме <a href="http://facebook.com/groups/437194362990982/">Facebook група</a> и
        <a href="http://twitter.com/rbfmi">Twitter потребител</a>, ако си падате по тези неща

= slide 'Добри новини', 'или как да изкарате първите си 3 точки' do
  list:
    Сложете си снимка на сайта
    Качете си Ruby 1.9 и качете screenshot на форумите
    Представете се на форумите

= slide 'По-добри новини', 'първа задача' do
  ul
    li Качена е
    li Имате една седмица
    li Включва материал от днес и сряда
    li Включва и материал, който още не сме показали

= slide 'Цели', 'За какво ще говорим днес?' do
  ul
    li.action Какво е Ruby програма и как се изпълнява?
    li.action Как да се справим с документацията в Ruby
    li.action Основните типове в Ruby
    li.action Променливи и константи
    li.action Условни конструкции — <code>if</code>
    li.action Дефиниране и извикване на прости функции

= slide 'Ruby програми' do
  ul
    li Програмите в Ruby са текстови файлове
    li Няма компилация като в C или Java
    li Изпълняват се с <code>ruby име_на_файл</code>

= slide 'Ruby програми', 'Любимият на всички пример' do
  example:
    puts "Hello world"
    puts "The answer of life is ", 6 * 7

  p Изпълнява се с <code>ruby hello.rb</code>

= slide 'irb', 'интерактивна конзола' do
  p Може да стартиране интерактивната конзола с <code>irb</code>

  pre
    ' $ irb
      >> 6 * 9
      54
      >> "Ruby! " * 4
      "Ruby! Ruby! Ruby! Ruby!"
      >> -10.abs
      10

= slide 'Документация', 'или как да разберем какво прави нещо в Ruby?' do
  ul
    li <code>ri</code> е инструмент, с който може да разглеждате документацията на клас или метод
    li
       code ri String
       '  показва документацията на класа <code>String</code>
    li
      code ri Numeric#abs
      '  показва документацията на метода <code>abs</code> на класа на числата
    li
      code ri -i
      '  пуска документацията в интерактивен режим. Пробвайте го.
    li
      ' Документацията е достъпна онлайн на
      a href="http://ruby-doc.org/core/" http://ruby-doc.org/core/
    li
      a href="http://apidock.com" APIDock
      '  е ваш добър приятел

= slide 'Инсталация', 'или как да се снабдим?' do
  ul
    li
      a href="http://ruby-lang.org/en/downloads" http://ruby-lang.org/
    li Windows &mdash; има RubyInstaller
    li
      ' Linux, Mac &mdash; пробвайте
      a href="http://rvm.beginrescueend.com/" RVM

= slide 'Редактори', 'слайдът с много хейт' do
  ul
    li.action Забравете за IDE-тата. Това не е Java.
    li.action Ползвайте любимия си текстов редактор
    li.action Ако нямате такъв, може да пробвате <a href="http://redcareditor.com/">redcar</a> ако много ви мързи
    li.action Научете Vim или Emacs. Ще ми благодарите после

= slide 'Стил' do
  ul
    li.action В момента говорим за "форматиране на кода", а не за дизайн
    li.action Ако не можете да си подреждате кода, ориентирайте се към друга професия. Например строителство.
    li.action Изискваме от вас стил подобен на <a href="https://github.com/bbatsov/ruby-style-guide">Ruby Style Guide</a> на г-н Бацов
    li.action Ключова дума: подобен. Има разлики. Вие трябва да ги откриете.
    li.action Това не е просто мързел. В реалния свят такива неща се предават фолклорно.
    li.action Ако искате, може да се наемете да адаптирате guide-а към този курс

= slide 'Извеждане на екрана', 'или как да досаждате на хората с текст' do
  ul
    li.action Става с <code>puts</code>
    li.action Например <code>puts "Chunky bacon!"</code>
    li.action <code>puts</code> не е ключова дума, а "глобална" функция
    li.action Може да се извика и със скоби: <code>puts("Chunky bacon!")</code>
    li.action Последното важи за всички функции в Ruby

= slide 'Имена и неща', 'или още, Урсула ле Гуин в контекста на Ruby' do
  p Нещата се наименоват с <code>=</code>

  example:
    answer = 42
    almost_pi = 3.14
    food = 'Chunky bacon'
    greeting = "What's up?"

= slide 'Имена и неща', '...или разликата между нещо и неговите имена' do
  p
    ' <code>=</code> не копира стойността, а насочва променливата към обекта отдясно

  pre
    ' >> word = "oat"
      >> breakfast = word
      >> dinner = word
      >> word.insert('g', 0)
      >> puts breakfast
      goat

= slide 'Действия', 'още известни като "методи"' do
  pre
    ' >> "shut up".upcase()
      →  "SHUT UP"
      >> "wonderful".sub("wonder", "color")
      →  "colorful"
      >> 3.14.floor
      →  3
      >> 24.gcd 56
      →  8
      >> 'wonderful'.sub 'wonde', 'colo'
      →  "colorful"

= slide 'Видове променливи' do
  example:
    favourite = 'Chunky bacon' # локална
    Tax = '20%'                # константа
    $important = 'Money'       # глобална

  p Има още: <code>@name</code> и <code>@@name</code>

= slide 'Ключови думи', 'Вече заети' do
  pre
    ' alias    and      BEGIN    begin      break
      case     class    def      defined?   do
      else     elsif    END      end        ensure
      false    for      if       in         module
      next     nil      not      or         redo
      rescue   retry    return   self       super
      then     true     undef    unless     until
      when     while    yield

= slide 'Основни типове', '1/2' do
  ul
    li.action Цели числа &mdash; <code>42</code>, <code>-271</code>, <code>1_024</code>
    li.action Низове &mdash; <code>"chunky"</code>, <code>'bacon'</code>
    li.action С плаваща запетая &mdash; <code>3.1415</code>
    li.action Булеви &mdash; <code>true</code> и <code>false</code>
    li.action Нищо &mdash; <code>nil</code>
    li.action Масиви &mdash; <code>[2, 3, 5, 7, 11]</code>


= slide 'Основни типове', '2/2' do
  ul
    li.action Хешове &mdash; <code>{'one' => 1, 'two' => 2}</code>
    li.action Регулярни изрази &mdash; <code>/(bb)|([^b]{2})/</code>
    li.action Области &mdash; <code>2..6</code>, <code>'a'...'z'</code>
    li.action Символи &mdash; <code>:name</code>, <code>:send</code>
    li.action Анонимни функции &mdash; <code>lambda { |x| x ** 2 }</code>, <code>-> x { x ** 2 }</code>
    li.action Обекти &mdash; <code>Person.new</code>

= slide 'Цели числа' do
  example:
    0
    1729
    -271
    1_000_000
    0377        # осмични
    0b0100_0010 # двоични
    0xDEADBEEF  # шестнадесетични

= slide 'Числа с плаваща запетая' do
  example:
    0.0
    3.14
    -273.15
    1.22e28
    1_000.001

= slide 'Текст' do
  example:
    'Chunky bacon, I say!'
    "Who is John Galt?"
    "We're the knights who day \"Ni!\""
    '\'0 freddled gruntbugly\' he begun'
    'This text contains\nno newlines'
    "This text contains\none newline"

= slide 'Операции с текст' do
  pre
    ' >> "Hello, " + " " + "chunky!"
      →  "Hello,  chunky!"
      >> "Ha! " * 3
      →  "Ha! Ha! Ha! "
      >> "%s bacon" % 'Chunky'
      →  "Chunky bacon"
      >> text = 'Chanky'
      >> text[2] = 'u'
      >> text << ' bacon'
      >> puts text
      Chunky bacon

= slide 'Още операции с текст' do
  annotate:
    "bacon\n".chop            #=>
    "bacon".chop              #=>
    "bacon\n".chomp           #=>
    "bacon".chomp             #=>
    "Goodbye".include? 'oo'   #=>
    "Danube".length           #=>
    "oat".insert 0, 'bl'      #=>
    "bloat".sub "bl", "m"     #=>
    "bacon".upcase            #=>
    "BaCoN".downcase          #=>

= slide 'Символи', '...което ще ви обърка' do
  ul
    li.action Малко особен тип в Ruby
    li.action <code>:something</code>, <code>:other</code> и <code>:larodi</code>
    li.action Сходен на низ &mdash; immutable и интерниран
    li.action Различни приложения
    li.action Не го мислете много

= slide 'Интерполация' do
  p Работи при двойни кавички, не работи при единични

  example:
    character = 'Arthur'
    answer = 42
    puts "#{character} had it: #{answer}"

= slide 'Оператори', '...или как да оперирате с Ruby' do
  pre
    ' **  ~   /   %    +    -    &
      <<  >>  |   ^    >    <    >=   <=   <=>
      &&  ||  !   and  or   not  ||=  &&=
      =   +=  -=  *=   /=   %=   **=  >>=  <<=
      ^=  &=  |=  ..   ...  defined?

= slide 'Истина и лъжа', '...където става философско' do
  ul
    li.action <code>nil</code> се оценява като "лъжа"
    li.action <code>false</code> се оценява като "лъжа" (очевидно)
    li.action всичко друго е истина
    li.action <code>0</code>, <code>""</code> и <code>[]</code> са истина

= slide 'Булеви оператори' do
  ul
    li.action <code>and</code>, <code>or</code> и <code>not</code> правят това, което очаквате
    li.action <code>&&</code>, <code>||</code> и <code>!</code> &mdash; също
    li.action Разликата между тях е тънка. Придържайте се към първите

= slide 'Сравнение', '...когато размерът има значение' do
  pre
    ' >> 20 > 20
      →  false
      >> "perl" < "ruby"
      →  true
      >> 5 <= 5
      →  true
      >> "foo" <=> "bar"
      →  1

= slide 'Равенство', '...където става оплетено' do
  p В Ruby има четири оператора за равенство

  example:
    one == two
    one === two
    one.eql? two
    one.equal? two

= slide 'Равенство', '== и equal?' do
  p Това е стандартното поведение на Ruby. Има специални случаи.
  annotate:
    one = 'chunky bacon'
    two = 'chunky bacon'
    one == two           #=>
    one.equal? two       #=>

= slide 'Равенство', 'Специалните случаи' do
  p Можете ли да произнесете "интерниране"?

  annotate:
    one, two = 42, 42
    one == two      #=>
    one.equal? two  #=>

  p Същото важи и за символи.

= slide 'Условия' do
  p Ключовата дума е <code>if</code>

  example:
    if hungry? and sad?
      eat_chocolate
      listen_to_music
      go :outside
    end

= slide 'Условия', 'или' do
  p Разбира се, има и <code>else</code>
  example:
    if hungry?
      eat
    else
      drink
    end

= slide 'Условия', 'ако пък' do
  example:
    if hungry?
      eat
    elsif thirsty?
      drink
    else
      philosophize
    end

= slide 'Условия', 'на един ред' do
  p Може да напишете това на един ред
  example:
    eat if hungry?

= slide 'Условия', '...където научавате, че всяко условие е израз' do
  example:
    classification = if age < 13
                       'young person'
                     elsif age < 20
                       'teenager'
                     else
                       'old dude'
                     end

= slide 'Условия', 'на един ред' do
  example:
    eat if hungry?

  p Яко, а? Може и:

  example:
    order = if hungry? then 'food' else 'coffee' end

= slide 'Условия', 'освен ако' do
  p <code>unless</code> е като <code>if not</code>.
  p Всичко за <code>if</code> е приложимо

  example:
    unless tired?
      go_out_and_run
    end
