= slide 'Днес' do
  list:
    Още за блокове и анонимни функции в Ruby
    Оператора `=` и особености около него
    Преглед на решенията на първата задача

= slide 'Трето предизвикателство' do
  list:
    Ще го пуснем утре
    Следете сайта!

= slide 'Keyword arguments', 'преговор' do
  list:
    Ако има стойност по подрзбиране, тя се задава редом с дефиницията на метода
    Позвате стойността на аргумента директно, няма нужда от отделна променлива
    Непознати ключови думи, подадени като аргументи, предизвикват грешка
    Липсващи и задължителни ключови думи за аргументи също предизвикват грешка


= slide 'Пример от предишни лекции' do
  example:
    def order(drink:, size: 'grande', syrup: nil)
      message = "You ordered a #{size} #{drink}"
      message << " with a #{syrup} syrup" if syrup
      message
    end

    order drink: 'Latte'                    # You ordered a grande Latte
    order syrup: 'hazelnut', drink: 'Latte' # You ordered a grande Latte with a hazelnut syrup
    order                                   # error: ArgumentError: missing keyword: drink

= slide '**kwargs' do
  example:
    def order(drink:, size: 'grande', **options)
      message = "You ordered a #{size} #{drink}"
      message << " with these options: #{options.inspect}" unless options.empty?
      message
    end

    order drink: 'Latte'                    # You ordered a grande Latte
    order syrup: 'hazelnut', drink: 'Latte' # You ordered a grande Latte with these options: {:syrup=>"hazelnut"}
    order                                   # error: ArgumentError: missing keyword: drink

= slide 'Анонимни функции', 'ламбди' do
  p
    ' Анонимни функции в Ruby се дефинират с <code>lambda</code>. Имат три начина на извикване:

  example:
    pow = lambda { |a, b| a ** b }

    pow.call 2, 3
    pow[2, 3]
    pow.(2, 3)

  p
    ' За нещастие, не може да извиквате така: <code>double(2)</code>. Това е несъвместимо с
      изтърваването на скобите при извикването на метод.

= slide 'Анонимни функции', 'ламбди (2)' do
  p Може и така:

  example:
    double = lambda do |x|
      x * 2
    end

  p Важи стандартната конвенция за <code>{ }</code> и <code>do</code>/<code>end</code>.

= slide 'Анонимни функции', 'ламбди (3)' do
  p От 1.9 има по-симпатичен синтаксис за ламбди:

  example:
    say_hi = lambda { puts 'Hi there!' }
    double = lambda { |x| x * 2 }
    divide = lambda { |a, b| a / b }

    say_hi = -> { puts 'Hi there' }
    double = ->(x) { x * 2 }
    divide = ->(a, b) { a / b }

= slide 'Блокове' do
  p
    ' Всеки метод в може да приеме допълнителен аргумент, който е "анонимна функция". Може да
      го извикате от метода с <code>yield</code>:

  example:
    def twice
      yield
      yield
    end

    twice { puts 'Ruby rocks!' }

= slide 'Блокове', 'аргументи' do
  p Блокът може да приема аргументи:

  example:
    def sequence(first, last, step)
      current = first
      while current < last
        yield current
        current += step
      end
    end

    sequence(1, 10, 2) { |n| puts n }
    # Извежда 1, 3, 5, 7, 9

= slide 'Keyword args работят и в ламбди и блокове' do
  example:
  .action
    example:
      ->(**opts) { p [opts] }.call foo: 'bar', larodi: 'baz'

= slide 'Блокове', 'стойности' do
  p <code>yield</code> се оценява до стойността на блока:

  annotate:
    def calculate
      result = yield(2)
      "The result for 2 is #{result}"
    end

    calculate { |x| x ** 2 } # =>

= slide 'Блокове', 'един пример' do
  p Или как можем да напишем <code>filter</code>:

  annotate:
    def filter(array)
      result = []
      array.each do |item|
        result << item if yield item
      end
      result
    end

    filter([1, 2, 3, 4, 5]) { |n| n.odd? } # =>

  .action
    p Разбира се, такъв метод в Ruby вече съществува – <code>Enumerable#select</code>.

= slide 'Блокове', '#block_given?' do
  p <code>block_given?</code> ще ви каже дали методът е извикан с блок:

  example:
    def i_can_haz_block
      if block_given?
        puts 'yes'
      else
        puts 'no'
      end
    end

    i_can_haz_block                  # no
    i_can_haz_block { 'something' }  # yes

= slide 'Блокове', '& при извикване на метод' do
  p Ако имате ламбда, която искате да подадете като блок, може да ползвате <code>&</code>:

  example:
    is_odd = lambda { |n| n.odd? }

    filter([1, 2, 3, 4, 5], &is_odd)
    filter([1, 2, 3, 4, 5]) { |n| n.odd? }

  p Горните са (почти) еквиваленти. Има малка разлика в някои други случаи.

= slide 'Блокове', 'в сигнатурата' do
  p Ако искате да вземете блока като обект, има начин:

  example:
    def invoke_with(*args, &block)
      block.(*args)
    end

    invoke_with(1, 2) { |a, b| puts a + b }

= slide 'Блокове', 'в сигнатурата (2)' do
  p Може и така:

  annotate:
    def make_block(&block)
      block
    end

    doubler = make_block { |n| n * 2 }
    doubler.(2) # =>

= slide 'Proc.new', 'където става странно' do
  p В Ruby има два вида анонимни функции. Другият е Proc.

  example:
    double = Proc.new { |x| x * 2 }

    double.call(2)
    double[2]
    double.(2)

  p Дотук е същото, но има разлики при извикване.

= slide 'Разлики между Proc.new и lambda' do
  table
    thead
      tr
        th
          code f =
        th
          code Proc.new { |x, y| p x, y }
        th
          code lambda { |x, y| p x, y }
    tbody
      tr
        td
          code f.call(1)
        td 1 nil
        td ArgumentError
      tr
        td
          code f.call(1, 2)
        td 1 2
        td 1 2
      tr
        td
          code f.call(1, 2, 3)
        td 1 2
        td ArgumentError
      tr
        td
          code f.call([1, 2])
        td 1 2
        td ArgumentError
      tr
        td
          code f.call(*[1, 2])
        td 1 2
        td 1 2

  list:
    `yield` ползва семантиката на `Proc.new`
    Извикването на метод ползва семантиката на `lambda`
    Има още няколко малки разлики, но по-натам

= slide 'Блокове', '...и една особенност' do
  p
    ' Ако първия аргумент на функция е хеш, трябва да изтървете скобите на хеша,
      ако изтървете скобите на метода.

  example:
    # Валиден код
    order drink: 'latte', size: 'grande'
    order({drink: 'latte', size: 'grande'})

    # Невалиден код
    order {drink: 'latte', size: 'grande'}

  p Във втория случай, Ruby си мисли, че му подавате блок.

= slide 'Блокове', 'в Ruby като цяло' do
  list:
    Ползват се изключително често (разбирайте, всичко през ред е блок)
    Премахват нуждата от много синтаксис
    Има още мистика, за която ще си говорим следващата седмица
    Ето няколко примера

= slide 'Функционални закачки' do
  p Стандартните функционални неща:

  example:
    numbers  = [-9, -4, -1, 0, 1, 4, 9]

    positive = numbers.select { |n| n >= 0 }
    even     = numbers.reject { |n| n.odd? }
    squares  = numbers.collect { |n| n ** 2 }
    roots    = numbers.select { |n| n > 0 }.collect { |n| n ** 0.5 }

= slide 'Функционални закачки', 'синоними' do
  p
    ' <code>#select</code> и <code>#collect</code> имат синоними
      <code>#find_all</code> и <code>#map</code>:

  example:
    numbers  = [-9, -4, -1, 0, 1, 4, 9]

    squares  = numbers.map { |n| n ** 2 }
    positive = numbers.find_all { |n| n >= 0 }

  p В Ruby подобни синоними се срещат често.

= slide '#reduce', 'ако разбирате това, значи сте ОК' do
  p <code>#reduce</code> свежда списък до единична стойност с някаква операция:

  example:
    numbers = [1, 2, 3, 4, 5]

    numbers.reduce(0) { |a, b| a + b }
    numbers.reduce(1) { |a, b| a * b }

    numbers.reduce { |a, b| a + b }
    numbers.reduce { |a, b| "#{a}, #{b}" }

  .action
    p <code>#reduce</code> и <code>#inject</code> са синоними. Ползвайте първото.

= slide '#reduce', 'често срещана грозотия' do
  p
    ' Имаме списък с думи. Искаме да получим хеш от вида
    code {дума => дължина на думата}
    ' :

  example:
    words = %w[chunky bacon is awesome]
    words.reduce({}) { |hash, word| hash[word] = word.length; hash }

  p Това е неидиоматично използване на <code>#reduce</code>, но е интересен пример.

= slide '#reduce', 'примерна имплементация' do
  example:
    def reduce(array, initial = nil)
      remaining = array.dup
      buffer    = initial || remaining.shift

      until remaining.empty?
        buffer = yield buffer, remaining.shift
      end

      buffer
    end

    reduce([1, 2, 3, 4]) { |a, b| a + b }
    reduce([1, 2, 3, 4], 0) { |a, b| a + b }

= slide '#reduce', 'още по-примерна имплементация' do
  p За забавлението. Неяснотите &mdash; следващия път.

  example:
    class Array
      def reduce(initial = nil)
        remaining = dup
        buffer    = initial || remaining.shift

        until remaining.empty?
          buffer = yield buffer, remaining.shift
        end

        buffer
      end
    end

= slide 'Присвояване' do
  list:
    `answer = 42`
    Тривиално, нали?
    Всяко присвояване е израз и има върната стойност
    Може да правите "паралелно присвояване"

= slide 'Паралелно присвояване', 'прост пример' do
  annotate:
    a, b = 1, 2
    a              # =>
    b              # =>

    a, b = b, a
    a              # =>
    b              # =>

  p Има няколко различни случая, които ще разгледаме.

= slide 'Паралелно присвояване', 'присвояване на една променлива' do
  annotate:
    a = 1, 2, 3
    a # =>

  p Практически същото като <code>a = [1, 2, 3]</code>

= slide 'Паралелно присвояване', 'разпакетиране на дясната страна' do
  annotate:
    a, b = [1, 2, 3]
    a # =>
    b # =>

    a, b = 1, 2, 3
    a # =>
    b # =>

  list:
    Излишните аргументи вдясно се игнорират
    Скобите са "опционални" в този случай
    Ако вляво имате повече променливи отколкото вдясно, те ще получат стойност <code>nil</code>

= slide 'Паралелно присвояване', 'със splat аргументи' do
  annotate:
    head, *tail = [1, 2, 3]
    head   # =>
    tail   # =>

    first, *middle, last = 1, 2, 3, 4
    first  # =>
    middle # =>
    last   # =>

  list:
    <code>middle</code> и <code>tail</code> обират всичко останало
    Очевидно, може да имате само една splat-променлива на присвояване

= slide 'Паралелно присвояване', 'splat аргументи отдясно' do
  annotate:
    first, *middle, last = 1, [2, 3, 4]
    first  # =>
    middle # =>
    last   # =>

    first, *middle, last = 1, *[2, 3, 4]
    first  # =>
    middle # =>
    last   # =>

= slide 'Вложено присвояване' do
  annotate:
    head, (title, body) = [1, [2, 3]]
    head   # =>
    title  # =>
    body   # =>

  list:
    Скобите ви позволяват да влезете едно ниво "навътре" и да разбиете подаден списък на променливи
    Не сте ограничени само до две нива (това работи: <code>head, (title, (body,)) = [1, [2, [3]]]</code>)
    Можете да ги комбинирате с паралелното присвояване, за да правите сложни магарии

= slide 'Вложено присвояване и splat-ове' do
  annotate:
    head, (title, *sentences) = 1, [2, 3, 4, 5, 6]
    head      # =>
    title     # =>
    sentences # =>

  list:
    Може да имате по една звездичка на "ниво" (т.е. скоби)

= slide 'Ред на оценка' do
  p Бележка за реда на оценка при присвояване — първо отдясно, след това отляво:

  annotate:
    x = 0
    a, b, c = x, (x += 1), (x += 1)
    x # =>
    a # =>
    b # =>
    c # =>

= slide 'Променливата _' do
  list:
    Носи семантика на placeholder ("този аргумент не ми трябва")
    Освен тази семантика, в Ruby е и малко по-специална

= slide 'Променливата _' do
  p Може да ползвате едно име само един път, когато то се среща в списък с параметри на метод, блок и прочее.

  example:
    Proc.new { |a, b, a| } # SyntaxError: duplicated argument name
    Proc.new { |_, b, _| } # => #<Proc:0x007f818af68de0@(irb):23>

  p Горното важи не само за блокове, но и за методи.

= slide 'Присвояване в Ruby', 'Къде важат тези правила?' do
  list:
    Очевидно, при нормално присвояване
    Това включва и връщана стойност от метод, например <code>success, message = execute(job)</code>
    При разгъване на аргументи на блокове, например:

  .action
    example:
      [[1, [2, 3]], [4, [5, 6]], [7, [8, 9]]].each do |a, (b, c)|
        puts "#{a}, #{b}, #{c}"
      end
      # 1, 2, 3
      # 4, 5, 6
      # 7, 8, 9

  list:
    Донякъде и при разгъване на аргументи на методи (бройката трябва да отговаря)
    Запомнете ги

= slide 'Присвояване в Ruby' do
  p Имате ли въпроси по тази тема?

= slide 'Нещо особено в този код?' do
  example:
    auto_link("Some text here.", options = {link_emails: false}, sanitize: true)
