= slide 'Днес' do
  list:
    Фреймуъркът "Ruby on Rails" — общ поглед, функционалност, компоненти, архитектура, демонстрация

= slide 'Rails', 'Що е то?' do
  list:
    Фреймуърк!
    Дава солидна основа за разработка на уеб-приложения
    Спестява ви значително количество хамалогия
    Прави ви по-щастливи уеб-програмисти :)

= slide 'Защо Rails?' do
  list:
    Защо да ползваме Ruby on Rails? Защо Ruby?
    "Целта на Ruby е да прави програмистите щастливи." — Мацумото Юкихиро
    "Rails is the killer app for Ruby." — Мацумото Юкихиро
    Качество (production ready)
    Иновативност и авангардност
    Сигурност и производителност
    Community

= slide 'Кой ползва Rails?' do
  list:
    Twitter
    GitHub
    SoundCloud
    Shopify
    Songkick
    Groupon
    Basecamp
    Сигурно около 1/3 от стартъпите в Щатите...
    Ние! (Вижте [сайта на курса](https://github.com/skanev/evans))

= slide 'Принципи' do
  list:
    Convention over configuration
    DRY
    TDD/BDD
    REST (REpresentational State Transfer)
    Много, удобни DSL-и
    Получавате пълен комплект (направо с батерии, както се казва)

= slide 'Възможности', 'aka "фийчъри"' do
  list:
    Open-source!
    Готови адаптери за работа с бази данни, плюс ORM-и; може да минете без да пишете грам SQL
    Добре се интегрира в Unix/Linux-среди (command-line управление, Rails console, Rake задачи и т.н.)
    Environments: разграничаване на различните среди, в които работи вашето приложение — режим на разработка (development), по време на изпълнение на тестове (test) или по време на реална работа (production); може да имате и други environments
    Database migrations
    Вградена възможност за I18n (интернационализация и многоезичност)
    Където има нужда от конфигурация, може да ползвате удобния YAML-формат за целта
    Asset Pipeline
    Интеграция на неща като CoffeeScript и SASS

= slide 'Възможности (2)' do
  list:
    Чиста и консистентна схема за дефиниране на routes на приложението
    Валидации на данните, идващи от форми
    Вградено управление на сигурни сесии (криптирани)
    Full-blown caching — page, action, fragment
    Управление на layout-и (headers & footers)
    Управление на рендериращи формати (.html, .js, .xml и т.н.)
    Множество помощна функционалност за генериране на форми, URL-и и различни HTML-компоненти
    Вградена поддръжка на AJAX-форми и линкове посредством `remote: true` (`data-remote="true"`)
    Unobtrusive JavaScript — посредством адаптер, напр. rails.js; може да се ползва и друг
    Много, много други

= slide 'Кратка история' do
  list:
    Създаден е от небезизвестния (вече) датчанин David Heinemeier Hansson (DHH)
    <a href="https://github.com/rails/rails/commit/db045dbbf60b53dbe013ef25554fd013baf88134">Първият публичен commit на Rails е от ноември 2004 г.</a>
    Rails се е родил като изваден код от съществуващи проекти на фирмата на DHH (37 Signals), който е решавал generic проблеми, възникващи при разработката на уеб-приложения

= slide 'Версии' do
  list:
    Rails се разпространява под формата на няколко Ruby gem-а, обединени в един общ "meta gem" — <code>rails</code>
    Следва <a href="http://semver.org/">semantic versioning</a> схемата
    Най-новата версия към момента е в 3.2-клона — 3.2.9
    Rails 4 е на хоризонта

= slide 'Инсталация' do
  list:
    `gem install rails`
    Има и [Rails Installer](http://railsinstaller.org/) (за Windows и Mac OS)
    Горното на експерти като вас не ви е нужно

= slide 'Архитектура' do
  list:
    Вариант на MVC
    ORM
    Други шаблони

= slide 'Компоненти' do
  list:
    `Action Pack` — съставен от `Action Controller`, `Action Dispatch` и `Action View`
    `Action Mailer` — изпращане на мейли по културен начин
    `Active Model` — валидации, преводи, callback-функции и много други
    `Active Record` — ORM към релационни бази от типа на PostgreSQL, MySQL, SQLite и т.н.
    `Active Resource` — CRUD на отдалечени ресурси
    `Active Support` — разширения на стандартната Ruby библиотека с различни благинки
    `Railties` — код-лепило между отделните компоненти, документация, guides и прочее

= slide 'Генериране на изгледи', 'в HTML или друг формат' do
  list:
    За това е отговорен `ActionView`
    Налични са различни renderer-и
    ERB (по подразбиране)
    <a href="http://haml-lang.com/">Haml</a>
    <a href="http://slim-lang.com/">Slim</a> и т.н.

= slide 'Пример с ERB' do
  example:
    <div id="profile">
      <div class="left column">
        <div id="date"><%= print_date %></div>
        <div id="address"><%= current_user.address %></div>
      </div>
      <div class="right column">
        <div id="email"><%= current_user.email %></div>
        <div id="bio"><%= current_user.bio %></div>
      </div>
    </div>

= slide 'Пример с Haml' do
  pre
    | #profile
      .left.column
        #date= print_date
        #address= current_user.address
      .right.column
        #email= current_user.email
        #bio= current_user.bio

= slide 'Пример със Slim' do
  example:
    doctype html
    html
      head
        title Slim Core Example
        meta name="keywords" content="template language"

      body
        h1 Markup examples

        div id="content" class="example1"
          p Nest by indentation

= slide 'ORM', 'или как си говорим с бази данни' do
  list:
    По подразбиране е `ActiveRecord`
    Заменяем е (напр. с `Mongoid` за `MongoDB`)
    Поддържа PostgreSQL, MySQL, SQLite, MSSQL, Oracle...
    Може да си напишете и ваш адаптер при нужда
    CRUD API с query interface

= slide 'ActiveRecord' do
  example:
    class User < ActiveRecord::Base
      # Много неща идват наготово по конвенция
      # Таблицата в случая е users (по конвенция)
    end

= slide 'ActiveRecord' do
  example:
    class User < ActiveRecord::Base
      scope :admins, where(admin: true)
    end

    admin = User.admins.where(email: 'root@foo.bar').first

    # Ще генерира следната заявка към MySQL база:
    #
    # SELECT `users`.* FROM `users` WHERE `users`.`admin` = 1
    #   AND `users`.`email` = 'root@foo.bar' LIMIT 1

= slide 'ActiveRecord' do
  example:
    admin.email # 'root@foo.bar'
    admin.name  # 'Charlie Sheen'
    admin.name = "Charlie's Angels"

    admin.save

    # UPDATE `users` SET
    #   `users`.`name` = 'Charlie\'s Angels',
    #   `users`.`updated_at` = '2012-12-10 19:48:03'
    # WHERE `users`.`id` = 42

= slide 'ActiveRecord', 'dynamic finders' do
  p Няма да ги има в Rails 4!
  example:
    david = User.find_by_name_and_age('David', 33)

    # SELECT `users`.* FROM `users` WHERE
    #   `users`.`name` = 'David' AND `users`.`age` = 33
    # LIMIT 1

= slide 'ActiveRecord', 'query DSL & chaining' do
  example:
    lastest_signups = User.where(confirmed: true)
                          .order(:created_at).last(5)

    # SELECT `users`.* FROM `users` WHERE `users`.`confirmed` = 1
    # ORDER BY created_at DESC LIMIT 5

= slide 'ActiveRecord асоциации' do
  example:
    class Book < ActiveRecord::Base
    end

    class Publisher < ActiveRecord::Base
      has_many :books
    end

    vintage = Publisher.find(42)
    vintage.books

    # SELECT `publishers`.* FROM `publishers` WHERE `publishers`.`id` = 42 LIMIT 1
    # SELECT `books`.* FROM `books` WHERE `books`.`publisher_id` = 42

= slide 'ActiveRecord асоциации (2)' do
  example:
    class Book < ActiveRecord::Base
    end

    class Publisher < ActiveRecord::Base
      has_many :books
    end

    vintage = Publisher.find(42)
    vintage.books.create name: 'Rails Recipes'

    # INSERT INTO `books` (`name`, `publisher_id`, `created_at`, `updated_at`)
    # VALUES ('Rails Recipes', 42, '2012-12-10 19:58:13', '2012-...')

= slide 'ActiveRecord асоциации (3)' do
  example:
    class Author < ActiveRecord::Base; end
    class Book < ActiveRecord::Base
      belongs_to :author
    end

    class Publisher < ActiveRecord::Base
      has_many :books
      has_many :authors, through: :books
    end

    Publisher.find(42).authors

    # SELECT `authors`.* FROM `authors` INNER JOIN
    #   `books` ON `books`.`author_id` = `authors`.`id`
    # WHERE `books`.`publisher_id` = 42

= slide 'ActiveRecord query API' do
  list:
    Използва [ARel](https://github.com/rails/arel) (gem `arel`), за да конструира SQL
    Има малка част собствени разширения
    Поддържа доста сложни комбинации от релации, условия, групиране, агрегиране и прочее
    `where`, `order`, `joins`, `include`, `limit`, `take(x)`, `last(x)`, `count`, `size`, ...

= slide 'ActiveRecord query API' do
  example:
    module Institute
      class Workshop < ActiveRecord::Base
        has_many :events
      end

      class Event < ActiveRecord::Base
        def self.past
          # Използваме ARel да конструираме по-сложни условия
          where arel_table[:end_date].lt(Date.current)
        end
      end
    end

= slide 'ActiveRecord query API' do
  example:
    Institute::Workshop.joins(:events).merge(Institute::Event.past)

    # SELECT `institute_workshops`.* FROM `institute_workshops`
    #   INNER JOIN `institute_events` ON
    #   `institute_events`.`workshop_id` = `institute_workshops`.`id`
    # WHERE (`institute_events`.`end_date` < '2012-12-10')

= slide 'ActiveModel валидации' do
  list:
    Валидация на данните, постъпващи към вашите модели
    Задължителни полета
    Полета, които трябва да са само числа
    Числа в определен интервал
    Низове с определена дължина
    Низове, отговарящи на определен формат
    Ваши валидатори

= slide 'ActiveModel валидации' do
  example:
    class Product < ActiveRecord::Base
      validates_presence_of :price, :description
      validates_numericality_of :price, greater_than_or_equal_to: 0
    end

    # Не запазва нищо в базата следствие на
    # неуспешна валидация.
    product = Product.create

    product.errors.full_messages
    # ["Price can't be blank", "Description can't be blank",
    #  "Price is not a number", "Price must be greater than or equal to 0"]

= slide 'ActiveModel валидации', 'как изглеждат грешките в браузър' do
  img src="15/validation-errors.png" style="width: auto; max-width: 90%; max-height: 70%;"

= slide 'NoSQL' do
  list:
    Можете да ползвате и NoSQL бази данни
    MongoDB се поддържа през `Mongoid`
    API-то му е подобно на `ActiveRecord`
    Също поддържа валидации и асоциации
    Валидациите всъщност идват от `ActiveModel`

= slide 'Контролери' do
  list:
    Свързващото звено между модели и изгледи
    Без прекалено много код вътре
    Имат достъп до HTTP request-а (`request`)
    Както и до `params`, `session`, `cookies`, `response`, ...
    Указват кои изгледи да се рендерират или какъв HTTP код да се върне

= slide 'Контролери' do
  example:
    class ProjectsController < ApplicationController
      def show
        @project = Project.find(params[:id])
      end
    end

  list:
    `params` е хеш с параметрите от query string + URI + POST body
    Рендерира `app/views/projects/show.html.erb`
    `@project` е достъпно в изгледа

= slide 'Контролери', 'филтри' do
  example:
    class ProjectsController < ApplicationController
      def show
        @project = Project.find(params[:id])
      end

      def edit
        @project = Project.find(params[:id])
      end
    end

= slide 'Контролери', 'филтри' do
  example:
    class ProjectsController < ApplicationController
      before_filter :load_project

      def show() end
      def edit() end

      private

      def load_project
        @project = Project.find(params[:id])
      end
    end

= slide 'Контролери', 'конвенции за RESTful ресурси' do
  list:
    `show` "визуализира" ресурса, достъпно само през `HTTP GET`
    `new` форма за създаване на ресурс, POST-ва към `create`
    `edit` форма за редактиране на ресурса, ще POST-не към `update`
    `create` за създаване на ресурс, достъпно през `HTTP POST`
    `update` за обновяване на ресурс, достъпно през `HTTP PUT`
    `destroy` за унищожаване на ресурс, достъпно през `HTTP DELETE`

= slide 'Контролери', 'create/update конвенции' do
  example:
    class ProjectsController < ApplicationController
      before_filter :load_project

      def update
        if @project.update_attributes(params[:project])
          # Препраща към ProjectsController#show()
          redirect_to @project, notice: 'Промените са съхранени успешно.'
        else
          render action: :edit
        end
      end
    end

= slide 'Контролери', 'create/update конвенции' do
  list:
    В случай на успех, прави `HTTP 302` към `show`
    Горното решава "Please confirm page reload" проблема
    При валидационна грешка, рендерира формата отново и показва грешките (`edit`)
    Същият е и моделът при `new`/`create`

= slide 'Маршрути' do
  list:
    Връзката между HTTP URL-и и глаголи и методи в контролери (двупосочна)
    Централизирано знание
    Какви URL-и обслужва вашето приложение
    Коя част от кода обслужва даден URL
    И обратната посока — какъв е URL-ът, обслужван от даден код
    RESTful маршрути и ресурси
    Дефинира се в `config/routes.rb` със собствен DSL
    `bundle exec rake routes` ще ви покаже списък с текущите маршрути

= slide 'Маршрути' do
  example:
    Todo::Application.routes.draw do
      resources :projects
    end

  .action
    img src="15/resource-routes.png" style="max-width: 90%; max-height: 70%;"

= slide 'Маршрути' do
  example:
    Rails.application.routes.draw do
      resources :activations, constraints: {id: /.+/}
      resources :vouchers, only: [:index, :new, :create]
      resources :announcements, except: [:show, :destroy]
      resources :quizzes

      resource :profile
      resource :dashboard, only: :show

      resources :tasks, except: :destroy do
        get :guide, on: :collection
        resources :solutions
        resource :check, controller: :task_checks, only: :create
      end

      mount Sidekiq::Web => '/queue'
      root to: 'home#index'
    end

= slide 'DSL на маршрутите' do
  list:
    Целият DSL се свежда до извикване на `match`
    Разгледайте в детайли [документацията на `match`](http://apidock.com/rails/ActionDispatch/Routing/Mapper/Base/match)
    Овладейте `match` и ще овладеете маршрутите в Rails

= slide 'Маршрути и Rack' do
  list:
    Маршрутите в Rails поддържат изцяло Rack
    С `mount` може да закачате готови Rack-приложения на даден URL
    Всеки routing endpoint е валидно Rack приложение
    Забележете, че `mount` пак вика `match` вътрешно

= slide 'Маршрути', 'обратната връзка' do
  p Генериране на URL-и посредством "route helpers"

  example:
    new_project_path()                  # "/projects/new"
    project_path(project)               # "/projects/123"
    new_project_document_path(project)  # "/projects/123/documents/new"

= slide 'Application Server' do
  list:
    Вашето приложение се "стартира" веднъж
    Вашият и кодът на Rails се прочитат веднъж
    Един request = един процес (или нишка)
    Multi-process или multi-threaded архитектура
    200+ MB RAM на процес
    Веднъж заредено, вашето приложение отговаря бързо

= slide 'Application Server' do
  list:
    Старт в рамките на четвърт минута
    Кешира дефиниции на класове, модули и т.н.
    При промяна на кода — рестарт
    В режим "разработка" презарежда автоматично променените файлове с разни магии

= slide 'Обкръжения', 'environments' do
  list:
    Ясно разделение на обкръженията
    Три обкръжения по подразбиране
    Development
    Test
    Production
    Може да добавяте ваши

= slide 'Development' do
  list:
    Ползва се по подразбиране при разработка
    Автоматично презарежда само кода на вашето приложение при нужда
    Не кешира дефиниции на класове и модули
    Виждате backtrace при изключения
    Не конкатенира или компресира asset-и (CSS и JavaScript файлове)
    Има и някои други малки разлики

= slide 'Production' do
  list:
    На "production" сървъра
    Кешира много неща
    Рестарт за нова версия на кода
    Без backtrace при изключения
    Сервира само конкатенирани и компресирани asset-и (CSS и JavaScript файлове)
    Други малки разлики

= slide 'Test' do
  list:
    Оптимизирано за пускане на тестове
    Кешира дефиниции на класове
    Изпозлва отделна конфигурация за база
    Въпросната база се забърсва след всяко пускане на тестовете

= slide 'Asset Pipeline' do
  list:
    Зряло решение на сериозен проблем
    "Пакетира" вашите asset-и (CSS, JavaScript, картинки и прочее)
    Комбинира JavaScript файловете ви в един и го minify-ва и gzip-ва
    Същото прави и за CSS
    Имената на резултатните файлове съдържат хеш от съдържанието на файла

= slide 'Asset Pipeline' do
  list:
    Лесен cache invalidation — при промяна съдържанието на файла се сменя хеша и следователно името му
    Кеширате во веки веков
    Поддръжка на CDN
    Ползвате помощни функции, за да вкарвате линкове към вашите статични файлове
    Горното важи за и за HTML, и за CSS

= slide 'Asset Pipeline' do
  pre
    |
      # Source
      &lt;header&gt;
        &lt;%= image_tag 'logo.png', class: 'logo' %&gt;
      &lt;/header&gt;

      # В development
      &lt;header&gt;
        &lt;img src="/assets/logo.png" alt="Logo" class="logo" /&gt;
      &lt;/header&gt;

      # В production
      &lt;header&gt;
        &lt;img src="/assets/logo<span class="highlight">-9692fa42c3</span>.png" alt="Logo" class="logo" /&gt;
      &lt;/header&gt;

= slide 'Asset Pipeline', 'ползи' do
  list:
    По-малко HTTP заявки = по-бързо
    По-малки файлове = по-бързо
    Кеширани файлове = по-бързо
    Употреба на CDN = по-бързо
    Без главоболие от ваша страна
    Бонус — pre-processor-и на CSS и JavaScript! (CoffeeScript, SASS, ...)

= slide 'SASS', 'CSS препроцесор' do
  img src="15/sass.png"

= slide 'SASS' do
  list:
    Вграден в asset pipeline-а от Rails 3.1+
    Влагане на селектори за по-DRY CSS
    Променливи
    Нещо близко до функции
    Аритметика с пиксели, с цветове (lighten/darken)
    Пишете на SASS, Rails сервира чист CSS
    [sass-lang.com](http://sass-lang.com/)

= slide 'CoffeeScript', 'JavaScript препроцесор' do
  img src="15/coffeescript-1.png"

= slide 'CoffeeScript', 'JavaScript препроцесор' do
  img src="15/coffeescript-2.png"

= slide 'CoffeeScript' do
  list:
    "Вграден" в asset pipeline-а от Rails 3.1+
    JavaScript с по-приятен синтаксис
    Покрива доста проблеми на JS
    Вкарва нови и готини неща
    Пишете на CoffeeScript, Rails сервира чист JavaScript
    [coffeescript.org](http://coffeescript.org/)

= slide 'Миграции' do
  list:
    Структурата на базата ви е описана с код (DSL)
    Създаване и премахване на таблици
    Добавяне/премахване на колони, индекси и прочее
    Всичко е във вашия код
    Улеснява колаборацията
    Улеснява deployment-а на вашето приложение

= slide 'Миграции и deployment' do
  list:
    Имат `up()` и `down()` методи
    Тоест, могат да бъдат "обръщани"
    Качвате новата версия на базата заедно с новата версия на кода
    Ако нещо се обърка, има rollback, който вика `down()` на миграциите
    Произволен Ruby-код в миграциите

= slide 'Миграции' do
  example:
    class CreateTodos < ActiveRecord::Migration
      def up
        create_table :todos do |t|
          t.text :text, null: false
          t.boolean :done, null: false, default: false
          t.integer :user_id, null: false
          t.timestamps # created_at, updated_at
        end
        add_index :todos, :user_id
      end

      def down
        remove_index :todos, :user_id
        drop_table :todos
      end
    end

= slide 'Миграции', 'auto-rollback (Rails 3+)' do
  example:
    class CreateTodos < ActiveRecord::Migration
      def change
        create_table :todos do |t|
          t.text :text, null: false
          t.boolean :done, null: false, default: false
          t.integer :user_id, null: false
          t.timestamps # created_at, updated_at
        end
        add_index :todos, :user_id
      end
    end

= slide 'Тестове' do
  list:
    Готова структура за писане на тестове
    Unit-тестове за вашите модели и класове
    Контролер-тестове
    Тестове на вашите изгледи
    Интеграционни тестове
    Самият Rails е много добре тестван
    Култура на тестване

= slide 'Тестове' do
  list:
    Заменяеми тестови фреймуърци
    Test::Unit, RSpec, MiniTest — изборът е ваш
    Само оставада пишете тестове... :)

= slide 'Други аспекти' do
  list:
    Култура на добри практики и качествен код
    Convention over configuration
    The Rails Way™
    VCS — Git
    Управление на зависимости от външни библиотеки — Bundler
    Инфраструктура за пращане на мейли, с подобна на MVC-архитектура

= slide 'Допълнителни компоненти' do
  list:
    Rails може да се възползва от разширения, оформени в gem-ове
    Има много, <strong>много</strong> такива разширения
    Някои примери: алтернативни ORM-и, автентикация, административни интерфейси,
    неща за качване на файлове и снимки, геолокация, инструменти за тестване,
    един тон библиотеки за връзка с 3rd party услуги и т.н.
    Почти каквото ви хрумне

= slide 'Допълнителни компоненти', 'управление' do
  list:
    Външните зависимости и допълнителни компоненти се управляват от Bundler (Gem)
    Декларирате ги в специален файл, кръстен `Gemfile`
    Държите и `Gemfile`, и `Gemfile.lock` във version control
    При deploy, Bundler се грижи на сървъра да има точните версии на зависимостите ви
    Повече инфо на [gembundler.com](http://gembundler.com/)

= slide 'Генератори' do
  list:
    Ползват се от време на време при разработка
    Генерират скелети на разни неща — миграции, модели, контролери
    Допълнителни компоненти, разширяващи Rails, могат да добавят собствени такива
    Виждате списък на наличните с командата `bundle exec rails generate`

= slide 'Rake задачи' do
  list:
    Неща, които се изпълняват като периодични задачи, или се извикват ръчно при нужда
    `bundle exec rake -T` ще ви покаже списък, заедно с описания
    Получавате някои наготово и може да добавяте ваши
    Пускат се така: `bundle exec rake some:task:name['Arguments']`
    Да, синтаксисът за аргументи на Rake задачите е малко странен
    Поради тази причина, понякога приемат аргументи през променливи на обкръжението

= slide 'Интернационализация' do
  list:
    Или, накратко, i18n
    Нетривиален проблем
    "Вградена" в Rails
    Ако не искате, може и да не я ползвате
    По подразбиране пази преводите в YAML-файлове, в `config/locales/`
    Дава ви решение за превод на текстове из изгледите, но не и на записи в базата
    Последното не е никак тривиален проблем и няма универсално решение
    Това е причината Rails да не предлага такова
    Има разни gem-ове, които ви дават различни решения (напр. Globalize3)

= slide 'Върхът на айсберга' do
  list:
    Това беше само върхът на айсберга
    Отдолу има поне още 10 пъти по толкова информация
    Ако искате да научите повече за Rails — изцапайте си ръцете!

= slide 'Документация и ресурси' do
  list:
    Тонове из нета, много книги
    [github.com/rails/rails](https://github.com/rails/rails)
    [rubyonrails.org е официалният сайт](http://rubyonrails.org/)
    [guides.rubyonrails.org](http://guides.rubyonrails.org)
    [rubyonrails.org/documentation](http://rubyonrails.org/documentation)
    [rubyonrails.org/screencasts](http://rubyonrails.org/screencasts) (напр. RailsCasts)
    [apidock.com/rails](http://apidock.com/rails)

= slide 'Книги' do
  list:
    [Agile Web Development with Rails, 4th edition](http://pragprog.com/book/rails4/agile-web-development-with-rails)
    [Crafting Rails Applications](http://pragprog.com/book/jvrails/crafting-rails-applications)
    Google-нете, има много други
