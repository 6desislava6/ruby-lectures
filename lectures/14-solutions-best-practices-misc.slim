= slide 'Днес' do
  list:
    Ще може да си видите тестовете и ще обсъдим някои грешки
    Ще можете да ги видите и тази сряда
    Разни решения - добри и лоши
    Разни неща из Ruby
    Инструменти за документиране на вашия код

= slide 'Тестовете' do
  p Обяснения на сгрешени въпроси.

= slide 'Разни' do
  p Ще разгледаме няколко различни дреболии в различни части на Ruby, донякъде свързани и с грешките от тестовете.

= slide 'Object#eql?' do
  ul
    li <code>#eql?</code> прави сравнение без type coercion.
    li Не забравайте, че се ползва и за хешове.

  annotate:
    1 == 1.0     # =>
    1.eql?(1.0)  # =>

= slide '$! и $@' do
  ul
    li Глобални променливи
    li <code>$!</code> е последното "възбудено" изключение
    li <code>$@</code> е stacktrace-а на последното изключение

= slide 'retry в ensure' do
  p <code>retry</code> изпълнява <code>begin</code> блока отначало.

  example:
    retries_left = 3

    begin
      connect_to_facebook
    rescue ConnectionError
      retries_left -= 1
      retry if retries_left > 0
    end

= slide 'next, break, redo, retry' do
  p Има много хубава семантика за тях.

  table
    thead
      tr
        th
        th излизане от...
        th рестартиране на...
    tbody
      tr
        td ...блока
        td
          code next
        td
          code redo
      tr
        td ...метода
        td
          code break
        td
          code retry

  p За нещастие, <code>retry</code> не работи извън <code>rescue</code> от Ruby 1.9 насам.

= slide 'Клас променливи' do
  annotate:
    class Person
      @@count = 0

      def initialize
        @@count += 1
      end

      def self.how_many
        @@count
      end
    end

    Person.new
    Person.new
    Person.how_many # =>

= slide 'Клас променливи', 'семантиката' do
  list:
    Очевидно започват с `@@`
    Търсят се в обхващащата константа
    Ако я няма там, се търсят в родителя ѝ
    Съответно, достъпни са в инстанция и в клас
    Ако не са дефинирани, получавате `NameError` (направете разлика с инстанционните променливи)
    Работят объркващо, така че по-добре ги избягвайте
    Ако все пак ги ползвате, правете го когато нямате наследяване

= slide 'Клас променливи' do
  annotate:
    class B
      @@foo = 1
      def self.foo() @@foo end
      def self.hmm() @@bar end
    end

    class D < B
      @@bar = 2
      def self.bar() @@bar end
      def self.change() @@foo = 3; @@bar = 4; end
    end

    [B.foo, D.foo, D.bar] # =>
    B.hmm                 #!
    D.change
    [B.foo, D.foo, D.bar] # =>
    B.hmm                 #!
    D.hmm                 #!

= slide 'Class#new и Object#initialize' do
  p Всъщност, <code>#initialize</code> е просто instance метод.

  p <code>Class#new</code> е имплементиран горе-долу така:

  example:
    class Class
      def new
        object = self.allocate
        object.send :initialize
        object
      end
    end

= slide 'Object#dup, Object#clone, #initialize_copy' do
  list:
    `#dup` и `#clone` правят копие на обект
    Копието е "shallow" копие, т.е. ако има instance променливи, те сочат на същото място
    След като се направи, се вика `#initialize_copy`
    Разликата между двете: `#clone` копира singleton методи и freeze-ва обекта, ако е замразен

= slide 'Оцапани обекти в Ruby' do
  list:
    `Object#taint` - маркира даден обект като "зацапан", т.е. потенциално опасен
    `Object#tainted?` ще ви върне `true`, ако обект е маркиран като замърсен
    Ако конструирате нов обект, на база на "зацапан" такъв, новият обект също ще е "зацапан"
    Всички данни, влизащи във вашата програма "отвън", се маркират като "зацапани"
    Идва от Perl и навремето се е ползвало много активно при писане на CGI-скриптове като някаква форма на защитна мярка

= slide 'Документация в Ruby' do
  list:
    Пишете ли документация? Как? Къде?
    Както повечето други езици и платформи, и в Ruby има инструменти за автоматично генериране на документация
    RDoc — Ruby documentation
    Seattle.rb проект; дефакто стандарт
    YARD — инструмент, разширяващ RDoc-стандарта

= slide 'RDoc' do
  img src="14/rdoc-default.png"

= slide 'YARD' do
  img src="14/rdoc-yard.png"

= slide 'Други - Rails API документацията' do
  img src="14/rdoc-rails.png"

= slide 'Други - API Dock' do
  img src="14/rdoc-apidock.png"

= slide 'RDoc' do
  list:
    Анализира статично вашата файлова структура, класове, модули, методи
    Извлича коментарите над методи, класове и прочее и ги обработва
    Дори да нямате коментари, пак ще генерира смислена и донякъде полезна документация
    Във въпросните коментари може да използвате специален синтаксис

= slide 'Подробно относно RDoc' do
  list:
    Официална документация относно позволения маркъп (малко трудна за откриване):
    [http://docs.seattlerb.org/rdoc/RDoc/Markup.html](http://docs.seattlerb.org/rdoc/RDoc/Markup.html)
    Обща документация на RDoc:
    [http://docs.seattlerb.org/rdoc/index.html](http://docs.seattlerb.org/rdoc/index.html)

= slide 'Единадесето предизвикателство' do
  list:
    Дефиниция на два `to_proc` метода - в `Array` и в `Hash`
    Може да си видите [резултатите](/challenges/11)

= slide 'Какво се искаше' do
  p Бяхме дали този код само илюстративно:

  example:
    class Student
      attr_accessor :name, :points, :rank

      def initialize(name, points, rank)
        @name   = name
        @points = points
        @rank   = rank
      end
    end

    ivan   = Student.new 'Иван', 10, :second
    mariya = Student.new 'Мария', 12, :first
    neycho = Student.new 'Нейчо', 9, :third

    students = [ivan, mariya, neycho]

= slide 'Нашето решение 1', 'Array' do
  example:
    students.map(&[:name, :rank]) # => [['Иван', :second], ['Мария', :first], ['Нейчо', :third]]

  .action
    example:
      class Array
        def to_proc
          proc do |object|
            map { |method| object.send(method) }
          end
        end
      end

= slide 'Нашето решение 2', 'Hash' do
  example:
    students.each &{points: 0, rank: :last}
    students.map(&:rank)   # => [:last, :last, :last]

  .action
    example:
      class Hash
        def to_proc
          proc do |object|
            each do |property, value|
              object.send "#{property}=", value
            end
          end
        end
      end

= slide 'Стил' do
  example:
    class Array
      def to_proc
        Proc.new { |obj,*args| self.map {|method| obj.send(method,*args)} }
      end
    end

    class Hash
      def to_proc
        Proc.new { |obj| self.map {|method,value|  obj.send((method.to_s+"=").to_sym,value)} }
      end
    end

= slide 'Излишно метапрограмиране' do
  p Из <code>Array#to_proc</code>:

  example:
    -> object { map(&object.method(:send)) }
    # vs.
    -> object { map { |method| object.send(method) } }

  .action
    p Или това:

    example:
      Proc.new { |object| map { |item| item.to_sym.to_proc.call(object) } }
      # vs.
      proc object { map { |method| object.send(method) } }

= slide 'Излишни неща' do
  p <code>*send</code> методите работят както със символи, така и с низове; тук <code>to_sym</code> е излишно:

  example:
    Proc.new { |object| map { |key, value| object.public_send("#{key.to_sym}=".to_sym, value) } }

= slide 'Най-простото работещо решение' do
  p Тук може да се ползва просто <code>Enumerable#map</code>:

  example:
    class Array
      def to_proc
        -> (object) do
          each_with_object([]) do |property_name, result|
            result << object.send(property_name.to_sym)
          end
        end
      end
    end

  .action
    p Или това:
    example:
      setter = property_name.to_s.concat('=')
      # vs.
      setter = "#{property_name}="

= slide 'map vs. each' do
  p Не използвайте <code>map</code>, когато искате да кажете <code>each</code>:

  example:
    class Hash
      def to_proc
        -> object { map { |property, value| object.send("#{property}=", value) } }
      end
    end

= slide 'Излишен chaining' do
  example:
    class Hash
      def to_proc
        Proc.new { |element| map { |key, value| element.send key.to_s.concat("=").to_sym, value } }
      end
    end

= slide 'Стил' do
  example:
    class Hash
      def to_proc
        Proc.new do |obj|
          self.map() { |element| obj.send(element.first.to_s + '=', element.last) }
        end
      end
    end

= slide 'Стил' do
  example:
    class Hash
      def to_proc
        proc do |obj1|
          self.each do |key, value|
            obj1.send((key.to_s + "=").to_sym, value)
          end
        end
      end
    end

= slide 'Спазвайте публичния интерфейс' do
  example:
    class Hash
      def to_proc
        proc do |object|
          each do |field, value|
            object.instance_variable_set("@#{field}".to_sym, value)
          end
        end
      end
    end

= slide 'Стил' do
  example:
    class Hash
      def to_proc
        Proc.new do |obj, *args|
          map { |method_name, arg| obj.send (method_name.to_s + '=').to_sym, arg }
        end
      end
    end

= slide 'Стил и конвенции' do
  list:
    `map` vs. `collect`
    Интервали около символи (скоби, пунктуация)
    Излишен `self.`
    Счупена идентация

= slide 'Изводи' do
  list:
    В случая, условието нямаше изисквания за `lambda` vs. `proc` - който и да е начин е окей
    `Proc.new` и `proc` са едно и също от Ruby 1.9 насам; предпочитайте второто
    Отново - именуване и стил
    Прост и ясен код vs. "хитър" код
