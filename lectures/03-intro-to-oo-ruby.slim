= slide 'Днес' do
  ul
    li Ще ви разкажем малко за обектите в Ruby
    li Ще прегледаме някои неща от първа задача

= slide 'Ruby и ООП' do
  ul
    li.action Всичко е обект
    li.action Duck typing
    li.action Няма функции, има само методи
    li.action Няма множествено наследяване, но има mixin-и

= slide 'Класове', 'прост пример' do
  p
    | Дефинират се с <code>class</code>. Методите, дефинирани в тялото на класа,
      стават методи на инстанциите му. Инстанцират се се с <code>ИмеНаКласа.new</code>.

  annotate:
    class Bacon
      def chunky?
        'yes, of course!'
      end
    end

    bacon = Bacon.new
    bacon.chunky?      # =>

= slide 'Класове', 'полета' do
  p Полетата (още: instance variables) имат представка <code>@</code>.

  annotate:
    class Vector
      def initialize(x, y)
        @x = x
        @y = y
      end

      def length
        (@x * @x + @y * @y) ** 0.5
      end
    end

    vector = Vector.new 2.0, 3.0
    vector.length()     # =>
    vector.length       # =>

= slide 'Класове', 'полета (2)' do
  p По подразбиране имат стойност <code>nil</code>.

  example:
    class Person
      def heh
        @something
      end
    end

    person = Person.new
    person.heh      # nil

= slide 'Класове', 'викане на методи' do
  p
    ' В метод на може да извикате друг със <code>self.име_на_метод</code>
      или просто <code>име_на_метод</code>:

  example:
    class Person
      def initialize(name) @name = name                end
      def say_hi()         puts "My name is #{@name}!" end
      def sound_smart()    puts "1101000 1101001"      end

      def talk
        self.say_hi
        sound_smart
      end
    end

    mel = Person.new 'Mel'
    mel.talk

  p Такова подравняване на методи е гадно, но пък се събира в слайд

= slide 'Класове', 'self' do
  p
    ' В методите на класа, <code>self</code> е референция към обекта,
      на който е извикан методът. Като <code>this</code> в Java.

  annotate:
    class Person
      def me
        self
      end
    end

    person = Person.new
    person           # =>
    person.me        # =>
    person.me.me     # =>

= slide 'Атрибути' do
  p Полетата не са публично достъпни. Може да ги достигнете само чрез метод.

  annotate:
    class Person
      def initialize(age)
        @age = age
      end

      def age
        @age
      end

      def set_age(age)
        @age = age
      end
    end

    person = Person.new(33)
    person.age          # =>
    person.set_age 20
    person.age          # =>

= slide 'Атрибути', 'setter-и' do
  p Разбира се, <code>set_age</code> е гадно име на метод. Може и по-добре:

  annotate:
    class Person
      def age
        @age
      end

      def age=(value)
        @age = value
      end
    end

    person = Person.new
    person.age = 33  # Същото като person.age=(33)

    person.age       # =>

= slide 'Атрибути', 'attr_accessor' do
  p Последното е досадно за писане. Затова:

  annotate:
    class Person
      attr_accessor :age
    end

    person = Person.new
    person.age = 33

    person.age # =>

= slide 'Атрибути', 'другите макроси' do
  p Ако ви трябва само getter или setter, може така:

  example:
    class Person
      attr_reader :name
      attr_writer :grade
      attr_accessor :age, :height
    end

= slide 'Атрибути', 'какво е attr_accessor?' do
  p
    ' <code>attr_accessor</code> е метод, който генерира два метода &mdash; <code>#foo</code>
      и <code>#foo=</code>. Достъпен е в дефинициите на класове. Неформален термин за такива
      методи е "class macro".
  p Има ги в изобилие.

= slide 'Атрибути', "Meyer's Uniform Access Principle" do
  p Обърнете внимание, че следните два реда правят едно и също:

  example:
    person.age()
    person.age

  p
    ' Няма разлика между достъпване на атрибут и извикване на метод, който го изчислява. Това се нарича
      <a href="http://en.wikipedia.org/wiki/Uniform_access_principle">Uniform Access Principle</a>
      и като цяло е хубаво нещо.

= slide 'Тялото на класа', 'където става странно' do
  p Тялото на класа е напълно изпълним код:

  annotate:
    class Something
      a = 1
      b = 2
      a + b #=>
    end

= slide 'Тялото на класа (2)' do
  p Понякога дори е полезно:

  annotate:
    class Object
      if RUBY_VERSION <= '1.8.6'
        def tap
          yield self
          self
        end
      end
    end

= slide 'Конвенции' do
  p В Ruby важат следните конвенции.

  ul
    li Константите се изписват с <code>UpperCamelCase</code>
    li Методите и променливите се изписват с <code>plain_snake_case</code>

= slide '"Отваряне" на класове' do
  p Във всеки момент може да "отворите" клас и да му добавите методи.

  annotate:
    class Person
      def name
        'River'
      end
    end

    class Person
      def say_hi
        "Hi, I am #{name}."
      end
    end

    Person.new.say_hi # =>
    Person.new.name   # =>

= slide 'Повторно дефиниране на метод' do
  p Ако дефинирате един метод два пъти, втората дефиниция измества първата.

  example:
    class Something
      def name
        'Tom Baker'
      end

      def name
        'Colin Baker'
      end
    end

    Something.new.name # => 'Colin Baker'

= slide 'alias' do
  p Въпреки името си, <code>alias</code> прави копие на метод.

  annotate:
    class Array
      alias old_inject inject

      def inject(*args, &block)
        puts "I see you are using #inject. Let me help!"
        old_inject(*args, &block) * 0.01
      end
    end

    [1, 2, 3, 4, 5, 6].inject { |a, b| a + b } # =>

= slide 'Object#methods' do
  p
    ' Ако викнете <code>#methods</code> на нещо, ще получите масив от символи
      с имената на методите му.

  p Помните ли <code>Array#-</code>?

  annotate:
    class Person
      def foo() end
      def bar() end
    end

    Person.new.methods - Object.new.methods # =>

= slide 'Предефиниране на оператори' do
  p Много интуитивно.

  annotate:
    class Vector
      attr_accessor :x, :y

      def initialize(x, y)
        @x, @y = x, y
      end

      def +(other)
        Vector.new(x + other.x, y + other.y)
      end

      def inspect
        "Vector.new(#@x, #@y)"
      end
    end

    Vector.new(1, 5) + Vector.new(3, 10) # =>

= slide 'private' do
  annotate:
    class Person
      def say_hi
        "Hello! I am #{name}"
      end

      private

      def name
        'the Doctor'
      end
    end

    person = Person.new
    person.say_hi     # =>
    person.name       #!

= slide 'private (2)' do
  p
    ' Ако един метод е <code>private</code>, не може да го викате с явен получател.
      Дори със <code>self.</code>

  annotate:
    class Person
      def say_hi
        "Hello! I am #{self.name}"
      end

      private

      def name
        'the Doctor'
      end
    end

    person = Person.new
    person.say_hi     #!

= slide 'Решения на първа задача' do
  p Ще разгледаме:
  list:
    Някои често срещани грешки
    Ще има съвети и хейт
    Съвети са за неща, които няма как да знаете
    Хейта ще е за неща, които трябва да знаете
    Вашите решения
    Как бихме я решили ние

= slide 'Integer#prime_divisors' do
  example:
    class Integer
      def prime_divisors
        2.upto(abs).select { |n| remainder(n).zero? and n.prime? }
      end

      def prime?
        2.upto(pred).all? { |n| remainder(n).nonzero? }
      end
    end

= slide 'Range#fizzbuzz' do
  example:
    class Range
      def fizzbuzz
        map do |n|
          if    n % 15 == 0 then :fizzbuzz
          elsif n % 3  == 0 then :fizz
          elsif n % 5  == 0 then :buzz
          else                   n
          end
        end
      end
    end

= slide 'Hash#group_values' do
  example:
    class Hash
      def group_values
        each_with_object({}) do |(key, value), result|
          result[value] ||= []
          result[value] << key
        end
      end
    end

= slide 'Array#densities' do
  example:
    class Array
      def densities
        map { |item| count item }
      end
    end

= slide '#1 Глупави имена', '...двете трудни неща в компютърните науки' do
  list:
    Масово имате проблем да измисляте имена
    Повечето имена са "защото нещо трябва да има име"
    Не се замисляте дали името е подходящо или се чете добре
    <a href="/tasks/1/solutions/6">worknumber</a>, <a href="/tasks/1/solutions/18">buff</a>, <a href="/tasks/1/solutions/78">trace</a>
    Съкращения: `p`, `res`, `tmp`, `cur_num` и прочее
    Имената трябва да са добри и точни
    Евристика: ако не може да измислите име на променлива, опитайте да минете без нея
    Научете се да давате добри имена

= slide '#2 Неспазване на конвенции', '...където не ни взехте насериозно' do
  list:
    Ruby се подравнява с точно два интервала
    `{}` когато блока е на един ред, `do/end` когато е на няколко
    Променливи се пишат със `snake_case`, а не с `lowerCamelCase`. Методи също
    Разгледайте style guide-а - [github:fmi/ruby-style-guide]

= slide '#3 Whitespace', '...където дори не знам как да започна' do
  list:
    Интервали около операторите: `n % 3`
    Интервали отвътре на скобите при блок: `map { |item| count item }`
    Без trailing whitespace (сериозно, как го правите?)

= slide '#4 Литерали' do
  example:
    class Range
      def fizzbuzz
        fizzbuzzed = Array.new
        # ...
      end
    end

  list:
    Пише се `[]`, а не `Array.new`
    Аналогично с `{}`, а не `Hash.new`
    И впрочем, `fizzbuzzed`?

= slide '#5 Не използвате map и select' do
  p Редовно виждаме:

  example:
    output = []
    input.each do |item|
      output << do_something_with(item)
    end
    output

  list:
    Горния код винаги може да се напише с `map` и/или `select`
    Такъв функционален стил е много важен в Ruby
    Ще говорим повече за него следващия път, когато говорим за `Enumerable`
    Поредното нещо, за което ще вземаме точки

= slide '#6 Цикли', 'while и until са зли' do
  example:
    current = 2
    divisors = []
    while current <= self.abs / 2
      divisors << current if self.abs % current == 0 and prime? current
      current += 1
    end
    divisors << self.abs if divisors.empty?
    divisors

  ul
    li <code>while</code> и <code>until</code> се ползват <strong>много</strong> рядко в Ruby.
    li Имат смисъл само когато броя итерации е неограничен
    li Горното е C код, написан на Ruby

= slide '#7 Сложен/умен код' do
  example:
    def fizzbuzz
      to_a.tap do |result|
        each_with_index.select { |n, i| (n % 3).zero? or (n % 5).zero? }.map do |n, i|
          result[i] = :"#{ "fizz" if (n % 3).zero? }#{ "buzz" if (n % 5).zero? }"
        end
      end
    end

  list:
    Текстова интерполация в символ
    `tap do |result|`? Можеше просто да се присвои
    Много неща се случват, кое от кое по-интригуващо

= slide '#7 Сложен/умен код' do
  example:
    def fizzbuzz
      map do |n|
        if    n % 15 == 0 then :fizzbuzz
        elsif n % 5 == 0  then :fizz
        elsif n % 3 == 0  then :buzz
        else                   n
        end
      end
    end

  list:
    Всичко друго, освен отвъд това решение е твърде сложно.
    Това е най-простия превод от условието до кода.
    Много по-лесно се разбира от всякакви други изобретения.
    Не е задължително да подреждате кода така.

= slide '#8 Твърде много код' do
  p Това е твърде много код за Ruby. Ако вашия изглежда така, правите нещо грешно. Отделно, имената пак са гадни.

  example:
    def prime_divisors
      div = []
      num = self
      num = num < 0 ? num * (-1) : num
      2.upto(num) do |cur|
        isprime = true
        2.upto(cur - 1) do |check|
          if (cur % check) == 0
            isprime = false
            break
          end
        end
        if (num % cur) == 0 and isprime
          div << cur
        end
        isprime = true
      end
      div
    end

= slide '#9 Много гъст код' do
  example:
    (n % 3 == 0) ? ((n % 5 == 0) ? :fizzbuzz : :fizz) : ((n % 5 == 0) ? :buzz : n)

  list:
    Просто няма нужда да сте толкова кратки.
    Кода се чете трудно разади всичките скоби и влагания.

= slide '#9 Много гъст код' do
  example:
    each_with_object({}) do |(key, val), memo|
      memo[val] ? memo[val] << key : memo[val] = [key]
    end

  ul
    li.action Редът по средата е твърде магически.
    li.action Обърнете внимание на страничния ефект.
    li.action
      ' Още, обърнете внимание на името <code>memo</code>. Речниковата дефиниция е:
      ul
        li a written message in business or diplomacy
        li Law a document recording the terms of a contract or other legal details.
        li a note recording something for future use
      ' memo не е нито едно от тези неща (дори последното)
    li.action Речника е добра идея



