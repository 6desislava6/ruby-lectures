= slide 'Днес' do
  list:
    Именовани пространства
    Класови методи
    Паралелно присвояване
    Symbol#to_proc
    Класовете като обекти

= slide 'Въпрос 1' do
  p Какво прави <code>alias</code>?

  example:
    class Something
      def name() 'baba' end
      alias relative name
      def name() 'dyado' end
    end

    p Something.new.relative

  p.action.answer Прави копие на метода

= slide 'Въпрос 2' do
  p Каква е разликата между <code>alias</code> и <code>alias_method</code>?

  .action.answer
    p <code>alias_method</code> е метод, докато <code>alias</code> е синтаксис

    example:
      class Something
        1.upto(5).each do |index|
          alias_method "to_s_#{index}", :to_s
        end
      end

= slide 'Въпрос 3' do
  p Какво ще има в ancestors chain-a?

  example:
    module Foo; end
    module Bar; end
    module Baz; end

    module Qux
      include Foo
      include Bar
    end

    class Garply
      include Foo
      include Qux
    end

    class Waldo < Garply
      include Foo
      include Baz
      include Bar
    end

    Waldo.ancestors # =>

  .action.answer
    p <code>[Waldo, Baz, Garply, Qux, Bar, Foo, Object, Kernel, BasicObject]</code>

= slide 'Именувани пространства' do
  p Класовете и модулите могат да служат като именувани пространства.

  annotate:
    module Useless
      class Thing
      end
    end

    class Grandfather
      class StraightRazor
      end
    end

    Useless::Thing.new             # =>
    Grandfather::StraightRazor.new # =>

= slide 'Именувани пространства (2)' do
  p Ако се намирате в модул, няма нужда да ползвате пълния път до константите:

  annotate:
    module Useless
      class Thing
      end

      Thing.new         # =>
    end

    Useless::Thing.new  # =>
    Thing.new           #!

= slide 'Търсене на променливи в Ruby' do
  ul
    li Променливите в Ruby се търсят лексикално, докато не се стигне до "scope gate".
    li Scope gate-ове в Ruby са <code>def</code>, <code>module</code> и <code>class</code>
    li Важи и за полета (<code>@foo</code>)

  example:
    bacon = 2

    def foo
      chunky = 10

      1.times do
        chunky       # 10
        chunky = 44
      end

      chunky         # 44
      bacon          # error: NameError
    end

    foo()

= slide 'Правила за търсене на константи' do
  list:
    Константите и променливите в Ruby се търсят по различен начин
    Константите са организирани в дървовидна структура
    Всеки ред код се намира някъде в тази дървовидна структура
    Когато напишете константа, тя се търси първо в текущия клон, след което в родителите
    `module` и `class` ви местят из дървото на константите
    Може да достъпите константа в "корена" с `::` отпред (`::Foo`)
    "Коренът" на константите са тези, дефинирани в `Object`

= slide 'Малък пример' do
  annotate:
    PLACE = 'root'
    module Outer
      PLACE = 'intermediate'
      module Inner
        PLACE = 'deep'
      end
   end

    PLACE               # =>
    Outer::Inner::PLACE # =>
    module Outer
      module Inner
        PLACE           # =>
        ::PLACE         # =>
      end
      PLACE             # =>
      Inner::PLACE      # =>
    end

= slide 'Класови методи' do
  p Може да дефинирате класови методи така:

  annotate:
    class Something
      def Something.answer
        42
      end
    end

    Something.answer   # =>

= slide 'Класови методи (2)' do
  p Не може да ги викате неквалифицирано от инстанцията:

  annotate:
    class Something
      def Something.answer
        42
      end

      def do_stuff
        answer             #!
        Something.answer   # =>
      end
    end

    thing = Something.new
    thing.answer           #!
    Something.answer       # =>

    thing.do_stuff

= slide 'Класови методи (3)' do
  p Достъпни са в наследниците:

  annotate:
    class Base
      def Base.answer() 42 end
    end

    class Derived < Base
      def Derived.say_answer
        answer         # =>
        Base.answer    # =>
      end
    end

    Derived.answer     # =>
    Base.answer        # =>

    Derived.say_answer

= slide 'Класови методи (4)' do
  p Има и други начини за дефиниция на класови методи:

  list:
    Този начин, който ви показахме, е неканоничният
    Кои са другите начини, ще разберете в следващите лекции

= slide 'Класови методи (5)' do
  list:
    Показахме ви как се дефинират и викат
    Не ви показахме как са реализирани и къде стоят
    Имат доста оплетена семантика в Ruby
    Засега се опитвайте да не ползвате класови методи

= slide 'Присвояване' do
  list:
    `answer = 42`
    Тривиално, нали?
    Всяко присвояване е израз и има върната стойност
    Може да правите "паралелно присвояване"

= slide 'Паралелно присвояване', 'прост пример' do
  annotate:
    a, b = 1, 2
    a              # =>
    b              # =>

    a, b = b, a
    a              # =>
    b              # =>

  p Има няколко различни случая, които ще разгледаме.

= slide 'Паралелно присвояване', 'присвояване на една променлива' do
  annotate:
    a = 1, 2, 3
    a # =>

  p Практически същото като <code>a = [1, 2, 3]</code>

= slide 'Паралелно присвояване', 'разпакетиране на дясната страна' do
  annotate:
    a, b = [1, 2, 3]
    a # =>
    b # =>

    a, b = 1, 2, 3
    a # =>
    b # =>

  list:
    Излишните аргументи вдясно се игнорират
    Скобите са "опционални" в този случай
    Ако вляво имате повече променливи отколкото вдясно, те ще получат стойност <code>nil</code>

= slide 'Паралелно присвояване', 'със splat аргументи' do
  annotate:
    head, *tail = [1, 2, 3]
    head   # =>
    tail   # =>

    first, *middle, last = 1, 2, 3, 4
    first  # =>
    middle # =>
    last   # =>

  list:
    <code>middle</code> и <code>tail</code> обират всичко останало
    Очевидно, може да имате само една splat-променлива на присвояване

= slide 'Паралелно присвояване', 'splat аргументи отдясно' do
  annotate:
    first, *middle, last = 1, [2, 3, 4]
    first  # =>
    middle # =>
    last   # =>

    first, *middle, last = 1, *[2, 3, 4]
    first  # =>
    middle # =>
    last   # =>

= slide 'Вложено присвояване' do
  annotate:
    head, (title, body) = [1, [2, 3]]
    head   # =>
    title  # =>
    body   # =>

  list:
    Скобите ви позволяват да влезете едно ниво "навътре" и да разбиете подаден списък на променливи
    Не сте ограничени само до две нива (това работи: <code>head, (title, (body,)) = [1, [2, [3]]]</code>)
    Можете да ги комбинирате с паралелното присвояване, за да правите сложни магарии

= slide 'Вложено присвояване и splat-ове' do
  annotate:
    head, (title, *sentences) = 1, [2, 3, 4, 5, 6]
    head      # =>
    title     # =>
    sentences # =>

  list:
    Може да имате по една звездичка на "ниво" (т.е. скоби)

= slide 'Ред на оценка' do
  p Бележка за реда на оценка при присвояване — първо отдясно, след това отляво:

  annotate:
    x = 0
    a, b, c = x, (x += 1), (x += 1)
    x # =>
    a # =>
    b # =>
    c # =>

= slide 'Променливата _' do
  list:
    Носи семантика на placeholder ("този аргумент не ми трябва")
    Освен тази семантика, в Ruby е и малко по-специална

= slide 'Променливата _' do
  p Може да ползвате едно име само един път, когато то се среща в списък с параметри на метод, блок и прочее.

  example:
    Proc.new { |a, b, a| } # SyntaxError: duplicated argument name
    Proc.new { |_, b, _| } # => #<Proc:0x007f818af68de0@(irb):23>

  p Горното важи не само за блокове, но и за методи.

= slide 'Присвояване в Ruby', 'Къде важат тези правила?' do
  list:
    Очевидно, при нормално присвояване
    Това включва и връщана стойност от метод, например <code>success, message = execute(job)</code>
    При разгъване на аргументи на блокове, например:

  .action
    example:
      [[1, [2, 3]], [4, [5, 6]], [7, [8, 9]]].each do |a, (b, c)|
        puts "#{a}, #{b}, #{c}"
      end
      # 1, 2, 3
      # 4, 5, 6
      # 7, 8, 9

  list:
    Донякъде и при разгъване на аргументи на методи (бройката трябва да отговаря)
    Запомнете ги

= slide 'Присвояване в Ruby' do
  p Имате ли въпроси по тази тема?

= slide 'Symbol#to_proc' do
  p Следните два реда са (почти) еквивалентни:

  example:
    name = ->(object) { object.name }
    name = :name.to_proc

  .action
    p
      ' Когато подавате блок на метод с <code>&block</code>, Ruby извиква
        <code>#to_proc</code>, ако <code>block</code> не е ламбда или proc.

  .action
    p Съответно, следните два реда са еквивалентни
    annotate:
      %w(foo plugh larodi).map { |s| s.length } # =>
      %w(foo plugh larodi).map(&:length)        # =>

= slide 'Symbol#to_proc', 'с повече от един аргумент' do
  p Всъщност, малко по-сложно е:
  example:
    block = ->(obj, *args) { obj.method_name *args }
    block = :method_name.to_proc

  .action
    p Това значи, че може да направите така:
    annotate:
      [{a: 1}, {b: 2}, {c: 3}].reduce { |a, b| a.merge b } # =>
      [{a: 1}, {b: 2}, {c: 3}].reduce(&:merge)             # =>

  .action
    p Или дори:
    annotate:
      [1, 2, 3, 4].reduce { |sum, b| sum + b } # =>
      [1, 2, 3, 4].reduce(&:+)             # =>

= slide 'Symbol#to_proc', 'Употреба' do
  ul
    li Ползва се често
    li Дори да не го ползвате често, трябва да знаете как работи

  example:
    ['Foo', :bar, 3].map(&:to_s).map(&:upcase)

= slide 'Symbol#to_proc', 'Примерна имплементация' do
  example:
    class Symbol
      def to_proc
        # ...?
      end
    end

= slide 'Object#send' do
  list:
    Всеки обект в Ruby има метод `send`
    Може да ползвате `send`, за да викате произволни методи на този обект
    Дори `private` или `protected` такива
    Може да ползвате `public_send`, ако искате да не прекрачвате този праг
    Например:

  .action
    annotate:
      3.send :+, 4 # =>

= slide 'Symbol#to_proc', 'Примерна имплементация' do
  example:
    class Symbol
      def to_proc
        ->(object, *args) { object.public_send self, *args }
      end
    end

= slide 'Класовете като обекти' do
  list:
    Знаем, че всичко в Ruby е обект
    Класовете не правят изключение
    Можем да викаме методи на тях (напр. `String.methods`)
    Обектите тип "клас" си имат клас (`String.class`) и той е `Class`
    Тоест, са негови инстанции

= slide 'Класовете като обекти (2)' do
  p Долното работи:

  annotate:
    a_hash_class = Hash
    a_hash_class.new # =>

= slide 'Класовете като обекти (3)' do
  list:
    Можем да създаваме динамично обекти тип "клас" с `Class.new`
    Тези класове се наричат анонимни класове
    Абсолютно аналогично е за модули
    `Module.new` ще създаде инстанция на анонимен модул

  .action
    annotate:
      anonymous_class = Class.new
      anonymous_class.new # =>
      Class.new.new       # =>
      Module.new          # =>

= slide 'Класовете като обекти (4)' do
  p Можем да подадем блок на <code>Class.new</code>:

  annotate:
    duck = Class.new do
      def quack_to(creature_name)
        "Quack, #{creature_name}, quack!"
      end
    end

    duck.new.quack_to("swan") # =>

= slide 'Обектите тип "клас" и константи' do
  example:
    class Person
    end

  list:
    С оглед на това, `class` е просто синтаксис, който прави обект от тип "клас"
    Припомняме за scope gate-овете – `class` е scope gate, докато блоковете не са
    Освен да създаде обект, `class` го присвоява и на константа
    Тоест, примерът по-горе може да се разглежда като присвояване на константа
    А "имената" на класове са просто константи, сочещи към някакъв обект

= slide 'Класове и константи' do
  p Когато присвоим анонимен клас на константа, попадаме в специален случай:

  example:
    Person = Class.new

  annotate:
    Class.new           # =>
    Person = Class.new  # =>

    Module.new          # =>
    Larodi = Module.new # =>

= slide 'Root scope на константи - Object' do
  list:
    Той е достъпен със синтаксиса `::`
    Също така, той се намира в `Object`
    Тоест, `Object::FOO` и `::FOO` в (почти) всички случаи са едно и също
    Кога може да не са?
    `::Object::FOO` и `::FOO` са едно и също винаги

= slide 'Влагане на константи', 'именовани пространства' do
  list:
    Защо си говорим всичко това?
    Защото механизмът за търсене на константи не се интересува накъде сочат те
    Влагането на константи работи по един и същи начин винаги

= slide 'Таблици с константи' do
  list:
    Понякога познаването на вътрешната имплементация помага за разбирането
    Всяка константа-клас или модул си има хеш-таблица с вложените непосредствено в нея константи
    Root scope-ът се пази в константата `Object`
    Така работи влагането и така работи constant resolution-ът

= slide 'Таблици с константи (2)' do
  p Можете да видите тази "таблица" през <code>constants</code>:

  annotate:
    module MyLibrary
      class Object
      end
    end

    MyLibrary.constants         # =>
    MyLibrary::Object == Object # =>

= slide 'Quine', 'програма, принтираща кода си' do
  example:
    ->_{_%_}["->_{_%%_}[%p]"]

= slide 'Quine', 'to the eleven' do
  example:
    v=0000;eval$s=%q~d=%!^Lcf<LK8,                  _@7gj*LJ=c5nM)Tp1g0%Xv.,S[<>YoP
    4ZojjV)O>qIH1/n[|2yE[>:ieC       "%.#%  :::##"       97N-A&Kj_K_><wS5rtWk@*a+Y5
    yH?b[F^e7C/56j|pmRe+:)B     "##%      ::##########"     O98(Zh)'Iof*nm.,$C5Nyt=
    PPu01Avw^<IiQ=5$'D-y?    "##:         ###############"    g6`YT+qLw9k^ch|K'),tc
    6ygIL8xI#LNz3v}T=4W    "#            #.   .####:#######"    lL27FZ0ij)7TQCI)P7u
    }RT5-iJbbG5P-DHB<.   "              ##### # :############"   R,YvZ_rnv6ky-G+4U'
    $*are@b4U351Q-ug5   "              #######################"   00x8RR%`Om7VDp4M5
    PFixrPvl&<p[]1IJ   "              ############:####  %#####"   EGgDt8Lm#;bc4zS^
    y]0`_PstfUxOC(q   "              .#############:##%   .##  ."   /,}.YOIFj(k&q_V
    zcaAi?]^lCVYp!;  " %%            .################.     #.   "  ;s="v=%04o;ev"%
    (;v=(v-($*+[45,  ":####:          :##############%       :   "  ])[n=0].to_i;)%
    360)+"al$s=%q#{  "%######.              #########            "  ;;"%c"%126+$s<<
    126}";d.gsub!(/  "##########.           #######%             "  |\s|".*"/,"");;
    require"zlib"||  "###########           :######.             "  ;d=d.unpack"C*"
    d.map{|c|n=(n||  ":#########:           .######: .           "  )*90+(c-2)%91};
    e=["%x"%n].pack   " :#######%           :###### #:          "   &&"H*";e=Zlib::
    Inflate.inflate(   "  ######%           .####% ::          "   &&e).unpack("b*"
    )[0];22.times{|y|   "  ####%             %###             "   ;w=(Math.sqrt(1-(
    (y*2.0-21)/22)**(;   " .###:             .#%             "   ;2))*23).floor;(w*
    2-1).times{|x|u=(e+    " %##                           "    )[y*z=360,z]*2;u=u[
    90*x/w+v+90,90/w];s[(    " #.                        "    ;y*80)+120-w+x]=(""<<
    32<<".:%#")[4*u.count((     " .                   "     ;"0"))/u.size]}};;puts\
    s+";_ The Qlobe#{" "*18+ (       "#  :#######"       ;"Copyright(C).Yusuke End\
    oh, 2010")}";exit~;_ The Qlobe                  Copyright(C).Yusuke Endoh, 2010

= slide 'Quine' do
  p Може да пуснете quine-а от предния слайд като го запазите във файл <code>quine.rb</code> и ползвате това скриптче:

  example:
    #!/bin/sh

    while true
    do
      ruby quine.rb | tee quine_result
      mv quine_result quine.rb
      sleep 0.2
    done

= slide 'Hash#to_proc', 'слайдове от бонус нивото' do
  p Да кажем, че имаме следния код:

  example:
    CURRENCY_NAMES = {
      BGN: 'Bulgarian lev',
      EUR: 'Euro',
      USD: 'United States dollar',
      CHF: 'Swiss frank',
    }.freeze

    [:BGN, :CHF, :EUR].map { |currency_code| CURRENCY_NAMES[currency_code] }
    # => ["Bulgarian lev", "Swiss frank", "Euro"]

= slide 'Hash#to_proc', 'алтернативна имплементация' do
  p Нека предположим, че имаме следната имплементация на <code>Hash#to_proc</code>:

  example:
    class Hash
      def to_proc
        proc { |key| self[key] }
      end
    end

  list:
    По идея на [(1)](http://shugo.net/jit/20131107.html) и [(2)](http://blog.rubyenrails.nl/articles/2008/02/26/a-hash-is-a-function-hash-to_proc.html)

= slide 'Hash#to_proc', 'алтернативна имплементация' do
  p Тогава можем да направим следното:

  example:
    CURRENCY_NAMES = {
      BGN: 'Bulgarian lev',
      EUR: 'Euro',
      USD: 'United States dollar',
      CHF: 'Swiss frank',
    }.freeze

    [:BGN, :CHF, :EUR].map &CURRENCY_NAMES
    # => ["Bulgarian lev", "Swiss frank", "Euro"]

= slide 'Hash#to_proc', 'още приложения на горното' do
  p Удобни изглеждат и следните хипотетични употреби:

  example:
    VALID_CURRENCIES = {
      BGN: true,
      EUR: true,
      USD: true,
      CHF: true,
    }.freeze

    valid_currencies = [:BGN, :CHF, :EUR].select(&VALID_CURRENCIES)

    # Or:
    if currencies.any? &VALID_CURRENCIES
    end

    # Or:
    words.reject(&FORBIDDEN_WORDS)

= slide 'Текущ scope при търсене на константи' do
  example:
    class Foo::Bar
      # In the Bar scope, but not in the Foo scope
    end

  list:
    Съществува понятието "текущ scope"
    Той се гледа, ако използвате "релативен" път до дадена константа
    Сменя се с ключовите думи `class` и `module`

= slide 'Текущ scope при търсене на константи (2)' do
  p В този пример:

  example:
    class Foo::Bar
      Larodi
    end

  list:
    Създаваме константа (клас) `Bar` и я записваме в таблицата с константи на `Foo`
    `Foo` трябва да съществува предварително; може да бъде или модул, или клас
    Константата `Larodi` ще се търси в таблицата на `Bar` и след това в root scope-а
    Няма да се търси в таблицата на `Foo`

= slide 'Търсене на константи' do
  example:
    module A::B
      module C::D
        Foo # Where does Ruby look for Foo?
      end
    end

  ol
    li В таблицата на <code>D</code>
    li В таблицата на <code>B</code>
    li В root scope-а (т.е. в таблицата на <code>Object</code>)

= slide 'Constant Autoloading in Rails' do
  list:
    Константите са наглед дребна част от езика, но всъщност дълбока
    За интересуващите се от Rails, там работите стават още по-сложни заради autoloading-а
    Повече по темата за константите и autoloading-а им в Rails може да видите в тази лекция:
    ["Constant Autoloading in Rails" by Xavier Noria](http://2012.baruco.org/agenda/constant-autoloading-in-ruby-on-rails)

= slide 'Въпроси по константи и scope-ове' do
  p Имате ли въпроси?
