= slide 'Днес' do
  list:
    Ще довършим темата с регулярните изрази
    Ще разгледаме добри и лоши решения от последните предизвикателства и задачи
    И разни други неща...

= slide 'Първи тест' do
  list:
    [Тази сряда, 4 декември](http://doodle.com/twn8hwcuccqxdvzs), по време на лекции (19:00 - 21:00 ч., зала 200)
    30 въпроса, 45 минути
    Разделени сте на две групи – четните факултетни номера от 19:00, нечетните – от 20:15 ч.
    Включва материала до днес, включително
    Два теста, носят по 30 точки всеки
    Вторият тест ще е в края на семестъра и/или по време на сесията

= slide 'Ruby Monk' do
  list:
    Имаше възможност да получите бонус точка, ако минете първата глава на [Ruby Monk](http://rubymonk.com/)
    Ако не сте я минали все още, силно препоръчвам да го направите, въпреки, че няма да получите точка весе
    Минете всички глави там, ще си припомните някои неща, ще научите други

= slide 'Ruby 2.1-preview2' do
  list:
    Пусната е [нова версия на Ruby - preview2](https://www.ruby-lang.org/en/news/2013/11/22/ruby-2-1-0-preview2-is-released/)
    Освен поправка на потенциална дупка в сигурността, има и API-промени
    Официално мигрираме на нея

= slide 'Замразени низове' do
  list:
    Премахнат е литералния синтаксис за замразени низове – `"foo bar"f`
    Промяната е за сметка на VM оптимизация в `String#freeze`
    Дискусия по темата може да се намери [тук](https://bugs.ruby-lang.org/issues/8992)

= slide 'String#freeze' do
  p Преди:
  example:
    "larodi"f.object_id       # => 70328402714000
    "larodi"f.object_id       # => 70328402714000

    "larodi".freeze.object_id # => 70366570584360
    "larodi".freeze.object_id # => 70366570566320

  p Сега:
  example:
    "larodi"f.object_id       # SyntaxError

    "larodi".freeze.object_id # => 70321298740820
    "larodi".freeze.object_id # => 70321298740820

= slide 'Exception#cause' do
  list:
    Добавен е нов метод `Exception#cause`
    Когато се предизвиква ново изключение, старото се губи
    В специалната променлива `$!` се пази последното хвърлено изключение
    Автоматично попълване на `cause` със стойността на `$!`
    Дискусията по предложението се [намира тук](https://bugs.ruby-lang.org/issues/8257)

= slide 'Ruby 2.1-preview2' do
  p Upgrade NAO!

= slide 'Кратък преговор от миналия път' do
  list:
    Регулярните изрази в Ruby - инстанции на `Regexp`
    Всеки символ "съвпада" със себе си, с изключение на някои специални
    Специални символи: `(`, `)`, `[`, `]`, `{`, `}`, `.`, `?`, `+`, `*`, `^`, `$`, `\`, ...
    Екранират (escape-ват) се с `\`
    Литерален синтаксис: `/foobar/` или `%r(/some/path)`

= slide '%(), %q(), %r(), %w(), %i()...', 'stack.push "вметка"' do
  list:
    Алтернативен синтаксис за създаване на низове, списъци, регулярни изрази и т.н.
    Вдъхновено от Perl
    Може да се ползва така: `%()` или да има модификатор: `%q()`

  .action
    p Бърз пример за създаване на низове:
    annotate:
      %{foobar}                               # =>
      %(larodi, something "quoted")           # =>
      %(Interpolation? #{'Why, yes!'.upcase}) # =>

= slide 'Създаване на низове с %()', 'особености' do
  list:
    За "ограничител" може да се ползва всеки символ, който не е буква или цифра
    Например: `%?foo?`, `%~bar~`
    Държи се като низ с двойни кавички - позволява интерполация, както и неща като `\n`
    Няма нужда да екранирате `"` или `'`
    Има нужда да екранирате символа, който сте избрали
    Ако сте избрали скоби за ограничители, може да не екранирате вложените двойки скоби
    Ако ползвате скоби за ограничител, предпочитайте `(` и `)`

  .action
    annotate:
      %(Parens: ( or ) - works.) # =>
      %<Parens: < or > - works.> # =>
      %[Parens: [ or ] - works.] # =>
      %{Parens: { or } - works.} # =>

= slide 'Heredocs', 'stack.push "вметка"' do
  p Още един начин за дефиниране на низове, удобен за по-дълги и многоредови текстове:

  example:
    template = <<HTML
    <html>
    <head>
      <title>K-pop</title>
    </head>
    <body>
      Sparkly
    </body>
    </html>
    HTML

= slide 'Идентация на heredocs' do
  ul
    li Затварящият ограничител трябва да е сам на ред
    li За да избегнем това, можем да ползваме <code>&lt;&lt;-</code>

  example:
    query = <<-SQL
              DROP VIEW ...;
              CREATE VIEW ...
            SQL

  p Забележка: Идентацията на текста си остава.

= slide 'Heredocs вмъкнати в друг код' do
  p Могат да се вмъкват в нормален код:

  example:
    scream = <<TEXT.strip.upcase
      This is a garrage, don't park! I'll slash your tires and scratch your paint.
    TEXT

    # => "THIS IS A GARRAGE, DON'T PARK! I'LL SLASH YOUR TIRES AND SCRATCH YOUR PAINT."

  .action
  p Или така:
  example:
    strings = [<<END, 'second', 'third']
    First string
    END

    # => ["First string\n", "second", "third"]

= slide 'Наслагване на heredocs' do
  p Дори това работи:

  example:
    string = [<<ONE, <<TWO, <<THREE]
      the first thing
    ONE
      the second thing
    TWO
      and the third thing
    THREE

    # => ["  the first thing\n", "  the second thing\n", "  and the third thing\n"]

= slide 'Варианти на %-синтаксиса' do
  table
    thead
      tr
        th Модификатор
        th Значение
    tbody
      tr
        td <code>%q( )</code>
        td Низ с единични кавички (без интерполация)
      tr
        td <code>%Q( )</code>
        td Низ с двойни кавички (с интерполация)
      tr
        td <code>%r( )</code>
        td Регулярен израз с интерполация; флаговете се слагат след затварящия ограничител
      tr
        td <code>%i( )</code>
        td Списък от символи без интерполация (Ruby 2.0+)
      tr
        td <code>%I( )</code>
        td Списък от символи с интерполация (Ruby 2.0+)
      tr
        td <code>%w( )</code>
        td Списък от думи без интерполация
      tr
        td <code>%W( )</code>
        td Списък от думи с интерполация
      tr
        td <code>%x( )</code>
        td Shell-команда с интерполация

= slide 'Регулярни изрази с %r()' do
  p Сега разбирате защо работи това:

  annotate:
    if %r(^(/\w+)*/(?<basename>\w+)) =~ '/some/path/here'
      basename # =>
    end

= slide 'Интерполация в регулярни изрази' do
  p Между другото, регулярните изрази поддържат интерполация по подразбиране:

  annotate:
    name      = /[^@]+/
    host      = /\w+\.(com|net|org)/

    email     = /#{name}@#{host}/ # =>

= slide 'Понятия и терминология', 'преговор' do
  list:
    Класове от символи: `[abcd0-9]`, `\d`, `/[^\d\sA-F]/`, `[[:alnum]]`, `\p{Cyrillic}`, ...
    Повторители и повторение (quantifiers and repetition): `*`, `+`, `?`, `{m,n}`
    Повторителите са алчни по подразбиране; променяте това, слагайки `?` след повторителя: `\w*?`
    Групи - номерирани или именовани: `/(\d{4})-(\d\d)/` или `/(?<year>\d{4})/`

= slide 'Референции към групи в рамките на шаблона' do
  list:
    С нотацията `\1` за първата група, `\2` за втората, `\12` за 12-тата група и прочее
    Общ синтаксис за именовани или номерирани груби `\k&lt;group_identifier&gt;`, където `group_identifier` е число или име на група
    Пример с именована група: `/(?&lt;word&gt;\w+), \k&lt;word&gt;/`

= slide 'Рекурсивни групи' do
  list:
    Имат следния синтаксис: `\g&lt;name&gt;`, където `name` е номер или име на група в шаблона
    Това <strong>преизпълнява</strong> шаблона, не търси за вече намерения текст
    Има смисъл, за да направи шаблоните ви една идея по-DRY, както и за да постигнете рекурсия в РИ :-)
    Например:
  .action
    annotate:
      /(\w+), \1/.match    'testing, twice'   # =>
      /(\w+), \g<1>/.match 'testing, twice'   # =>

= slide 'Валидация на вложени скоби с регулярен израз', 'едната задача от миналата лекция' do
  blockquote
    | Валидирайте изрази от следния тип за правилно отворени/затворени скоби:
    list:
      `(car (car (car ...)))`
      Например: `(car (car (car (car list))))`
      Целта е израз, чийто резултат да може да се ползва в условен оператор (`true`/`false`-еквивалент)
      Можете да ползвате произволни методи от класа `Regexp`
      И регулярен израз, разбира се

= slide 'Примерно решение', 'с рекурсивни групи' do
  annotate:
    validator = /^(\(car (\g<1>*|\w*)\))$/

    valid   = '(car (car (car (car list))))'
    invalid = '(car (car (car list))'

    validator.match(valid)   # =>
    validator.match(invalid) # =>

= slide 'Валидация на просто число с регулярен израз', 'другата задача от миналия път' do
  blockquote
    | Да се напише кратък Ruby expression, който проверява дали дадено число е просто или не,
      посредством употреба на регулярен израз. Резултатът от изпълнението му трябва да е <code>true</code>
      за прости числа и <code>false</code> за всички останали. Неща, които можете да ползвате:
    list:
      Самото число, разбира се.
      Произволни методи от класа `Regexp`
      Подходящ регулярен израз (шаблон)
      Текстовия низ `'1'`.
      `String#*`.
      Някакъв условен оператор (например `if`-`else` или `? … : …`)
      `true`, `false`, ...

= slide 'Решение на проверката за просто число с РИ' do
  list:
    Идеи, предложения?
    `'1' * числото =~ /някакъв регулярен израз/ ? false : true`
    `'1' * 13 =~ /^1?$|^(11+?)\1+$/ ? false : true`
    Много полезно знание :) Въпроси по израза?
    Регулярният израз тук може да се ползва 1:1 в Python за същата цел

= slide 'Look-ahead и look-behind' do
  list:
    Положителен look-ahead: `/(?=pattern)/`
    Отрицателен look-ahead: `/(?!pattern)/`
    Положителен look-behind: `/(?&lt;=pattern)/`
    Отрицателен look-behind: `/(?&lt;!pattern)/`
    Пример:
  div.action
    annotate:
      /(?<=<b>)\w+(?=<\/b>)/.match("Fortune favours the <b>bold</b>") # =>

= slide 'Работа с MatchData-обекти' do
  list:
    Това е обектът, който ви връща `Regexp#match`
    Това е обектът, стоящ зад специалната променлива `$~`
    Същият обект се крие и зад `Regexp.last_match`
    Не е `Enumerable`

= slide 'Най-полезни методи на MatchData-обектите' do
  list:
    `MatchData#[група]`, където `група` е номер или име на група, ви връща порцията текст, отговаряща на съответната група
    `MatchData#begin(група)` пък ви връща число — отместването спрямо началото на низа на порцията текст, отговаряща на съответната група
    Пример:
  div.action
    annotate:
      /(\w+)/.match('Some words')[1]              # =>
      /(\w+)/.match('Some words').begin(1)        # =>
      /(?<id>\d+)/.match('ID: 12345')[:id]        # =>
      /(?<id>\d+)/.match('ID: 12345').begin(:id)  # =>

= slide '#pre_match и #post_match методи', 'на MatchData-обектите' do
  list:
    `MatchData#pre_match` (същото като специалната променлива <code>$`</code>) — текстът преди съвпадението
    `MatchData#post_match` (същото като специалната променлива <code>$'</code>) — текстът след съвпадението
    Пример:
  div.action
    annotate:
      match = /(?<number>\d+)/.match 'ID: 12345 (new)'

      match[:number]    # =>
      match.pre_match   # =>
      match.post_match  # =>

= slide 'Специалните променливи' do
  list:
    `$~`, `$'`, `$1`, `$2`, `$3` и прочее
    Не са глобални променливи, а специални - thread-local и method-local, т.е. не са глобално-видими
    Попълват се с резултата от последно изпълнения `match`
    Не само след явно извикване на `Regexp#match`

= slide 'case с регулярни изрази', 'работи благодарение на Regexp#===' do
  example:
    html = '<h1>Header</h1>' # или:
    html = '<img src="http://my/image.src" alt="Kartman Makes Burgers" />'

    case html
      when /(<h(\d)>)(.+)<\/h\2>/
        {header: $3, size: $2}
      when /<a\s+href="([^"]+)">([^<]+)<\/a>/
        {url: $1, text: $2}
      when /<img\s+src="([^"]+)"\s+alt="([^"]+)"\s*\/>/
        {image: $1, alt: $2}
      else
        'unrecognized tag'
    end

    # {:image=>"http://my/image.src", :alt=>"Kartman Makes Burgers"}

= slide 'Методи в String', 'свързани с регулярни изрази' do
  list:
    `String#match`
    `String#=~` и `String#!=`
    `String#sub`, `String#gsub` и вариантите им с `!`
    `String#[]` и `String#slice` - в някои от вариантите си приемат регулярен израз
    `String#index` и `rindex` приемат и регулярен израз
    `String#partition` и `rpartition` и <a href="http://www.ruby-doc.org/core-2.1.0/String.html">други...</a>

= slide 'Пример със String#gsub', 'плюс групи и блок' do
  example:
    'SomeTitleCase'.gsub /(^|[[:lower:]])([[:upper:]])/ do
      [$1, $2.downcase].reject(&:empty?).join('_')
    end

    # "some_title_case"

= slide 'Encoding' do
  p Цитат от документацията:
  blockquote
    |
      A regexp can be matched against a string when they either share an encoding,
      or the regexp’s encoding is US-ASCII and the string’s encoding is ASCII-compatible.

= slide 'Encoding & Unicode' do
  list:
    Регулярните изрази в Ruby 2.1 носят кодировката на сорс-кода
    Можете да проверите кодировката на даден регулярен израз с `Regexp#encoding`
    Можете да укажете изрична кодировка посредством модификатор; например `/something/u` за `UTF-8`
    Малък пример:

  blockquote.action
    | Rubyのお父さんはまつもとゆきひろさんです。

  .action
    example:
      unicode_test = 'Rubyのお父さんはまつもとゆきひろさんです。'

      /は[[:alpha:]]+さん/.match unicode_test # #<MatchData "はまつもとゆきひろさん">

= slide 'Граници на думи в Unicode-текст' do
  list:
    `\b` в Unicode-текст работи, когато границата на думата е лесно определима
    Например, това ще работи: `/\b[[:alpha:]]\b/.match 'това и онова' # #&lt;MatchData "и"&gt;`
    Горното работи, понеже думата на кирилица е оградена от интервали
    В някои езици, обаче, няма интервали (whitespace) между думите (например китайски, японски)
    Къде са границите на думите в това изречение: `Rubyのお父さんはまつもとゆきひろさんです。`?

= slide 'Граници на думи в Unicode-текст', 'пример' do
  p Например:
  div.action
    example:
      'Ruby no otousan ha Matsumoto Yukihiro san desu.'.gsub(/(\b[[:alpha:]]+\b)/) { "[#{$1}]" }
      # "[Ruby] [no] [otousan] [ha] [Matsumoto] [Yukihiro] [san] [desu]."

  p.action Но:
  div.action
    example:
      'Rubyのお父さんはまつもとゆきひろさんです。'.gsub(/(\b[[:alpha:]]+\b)/) { "[#{$1}]" }
      # "[Rubyのお父さんはまつもとゆきひろさんです]。"

= slide 'Флагове на шаблоните' do
  list:
    Можете да управлявате някои аспекти от поведението на шаблона посредством флагове
    Указват се след края на шаблона, например: `/pattern/flags`
    `i` прави търсенето на съвпадение нечувствително към регистъра на буквите
    `u` кара шаблона да носи задължителна кодировка `UTF-8`
    `m` превръща шаблона в multiline-такъв (в този режим, например, `.` ще съвпада и с нов ред)
    Има и други, които не се ползват толкова често

= slide 'Условия в шаблоните', 'Ново в Ruby 2.0' do
  list:
    Ruby 2.0 и по-нови ползват библиотеката Onigmo за регулярни изрази
    Там има някои нововъведения, например това: `(?(cond)yes|no)`
    `cond` може да е референция към друга група в шаблона, или пък look-ahead/behind
    Пример:

  .action
    annotate:
      regexp = /^([A-Z])?[a-z]+(?(1)[A-Z]|[a-z])$/

      regexp =~ "foo"   # =>
      regexp =~ "foO"   # =>
      regexp =~ "FoO"   # =>

= slide 'Документация' do
  list:
    `Regexp`: <a href="http://www.ruby-doc.org/core-2.1.0/Regexp.html">http://www.ruby-doc.org/core-2.1.0/Regexp.html</a>
    `MatchData`: <a href="http://www.ruby-doc.org/core-2.1.0/MatchData.html">http://www.ruby-doc.org/core-2.1.0/MatchData.html</a>
    `String`: <a href="http://www.ruby-doc.org/core-2.1.0/String.html">http://www.ruby-doc.org/core-2.1.0/String.html</a>
    През `ri`, например: `ri Regexp#=~`
    Мейл до Стефан със subject: `RE: <моят въпрос>`, той ще го Google-не вместо вас и ще ви върне отговор в body-то на email-а

= slide 'Въпроси?' do
  p За предпочитане по темата за регулярните изрази.

= slide 'Десетото предизвикателство' do
  list:
    Може да си видите [резултатите](/challenges/10)
    Едно възможно решение е да се ползват регулярни изрази

= slide 'Нашето решение' do
  p Примерното решение, което даваме, е на <a href="/users/14">Петко</a>:

  example:
    class String
      def longest_sequence
        return [] if empty?
        scan(/(.)(\1*)/).map(&:join).group_by(&:length).max.last.map(&:chr).uniq
      end
    end

= slide 'Вашите решения' do
  p Да ги разгледаме.
