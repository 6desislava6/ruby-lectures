= slide 'Първи тест тази сряда', 'организация' do
  list:
    На 3 декември, вместо лекция, в зала 200
    Ще бъдете разделени на две групи
    Четни факултетни номера са от 19:00, нечетни - от 20:00
    Ако някой не може в дадения час, да [ни пише](mailto:fmi@ruby.bg), за да се уговорим друго

= slide 'Първи тест тази сряда', 'структура' do
  list:
    30 затворени въпроса
    45 минути
    Верен отговор = 1 т.; грешен = 0 т.
    Има два теста, носят по максимум 30 точки всеки
    Вторият тест ще е в края на семестъра и/или по време на сесията

= slide 'Първи тест - материал и подготовка' do
  list:
    Ще включва материал, предаден до днес, включително
    За подготовка, прочетете слайдовете внимателно
    Ако ви изскочи нещо, което не разбирате, питайте във [форумите](/topics), или ни пишете

= slide 'Следващи домашни' do
  list:
    Преди теста в сряда няма да ви даваме други домашни
    Тази седмица най-много да пуснем едно предизвикателство четвъртък-петък
    Следваща задача ще има следващата седмица

= slide 'Оставащ материал' do
  list:
    Web с Ruby, Sinatra
    Може би Rails, ако има достатъчно желаещи - може да пуснем една анкета за/против
    Ruby core & stdlib
    Конкурентност и паралелно програмиране в Ruby
    Алтернативни Ruby имплементации
    Още code spelunking
    GUI, UI, Gosu, Shoes и каквото друго ви е интересно
    Вие като лектори?

= slide 'Въпрос 1' do
  p За какво се използва staging областта?

  .answer.action
    p Съхранява файловете, които ще бъдат добавени в следващия commit.

= slide 'Въпрос 2' do
  p Как можем да видим списък от направените commit-и? Ами да разгледаме промените, направени в commit?

  .answer.action
    ul
      li git log
      li git show

= slide 'Въпрос 3' do
  p Можем ли да променим commit обект?

  .answer.action
    p Не, защото ще му се промени хешът. Можем да създадем нов, който да заеме неговото място.

= slide 'Въпрос 4' do
  p Какво е branch?

  .answer.action
    ul
      li Разклонение на кода
      li История от commit-и
      li Файл, съдържащ хеш на commit

= slide 'Сливане на разклонения' do
  example:
    git merge killer-feature
    git merge --squash killer-feature
  list:
    Слива промени от (най-често) 2 клона
    Често създава нов commit
  p.action Различни стратегии на сливане. Основните са 2:
  list:
    Fast-Forward
    Recursive

= slide 'Fast-Forward стратегия', 'Просто премества указателя за клона' do
  img src='16/graph-merge-ff-before.png'

= slide 'Fast-Forward стратегия', 'Просто премества указателя за клона' do
  img src='16/graph-merge-ff-after.png'

= slide 'Recursive стратегия' do
  p Слива 2 разделили се клона с обща история.
  img src='16/graph-branch-merge.png'

= slide 'Recursive стратегия' do
  p Жълтото e merge commit-a. Той съдържа промените и от двата клона.
  img src='16/graph-branch-merge-2.png'

= slide 'Обновяване 2' do
  example:
    git pull == git fetch && git merge origin/master
  list:
    Изтегля промените и ги слива с текущия бранч

= slide 'Изтриване на branch' do
  example:
    git branch -d killer-feature
    git push origin --delete killer-feature # Ако сте го push-нали
    git push origin :killer-feature         # В по-стари версии
  list:
    Премахва само файла на branch-a, commit-ите се пазят
    Дори ако е останал commit, който е извън историята, пак може да се възстанови
    За възстановяване - след малко

= slide 'Изтриване на branch' do
  img src='16/graph-branch-delete.png'

= slide 'Типичен процес на работа' do
  p Заради "евтините" branch-ове на git можем да направим следното:
  list:
    Имаме два основни branch-a - `master` и `develop` (`internal`, `unstable` или както го кръстите)
    Когато започваме нова функционалност, правим branch специално за тази промяна
    Когато приключим, я качваме в `develop` с `git merge`
    В `develop` нещата се тестват и след определено време се сливат с `master`

= slide 'Типичен процес на работа' do
  img src='16/branching-workflow.png'

= slide 'Типичен процес на работа', 'Резултат' do
  list:
    В `master` имаме само стабилни промени
    В `develop` имаме новите функции, които не са достатъчно тествани
    Ако две нови функции си пречат, това може да се поправи, преди да влязат в стабилната версия
    Ако трябва бързо да поправим нещо в стабилната версия на кода, можем директно да направим commit в `master`

= slide 'Машината на времето', 'Или как да върнем "безвъзвратно" загубените промени.' do
  example:
    git reset
    git checkout
    git commit --amend
    git revert
    git reflog

= slide 'Машината на времето' do
  example:
    git reset <commit> <files>
    git reset HEAD lectures/git.slim
  list:
    Променя файлове в staging областта, като ги взима от хранилището
    В случая `HEAD` указва от кой точно commit да се вземат файловете. Там може да има и хеш на commit
    <strong>Не променя</strong> файловете в работната директория
    Използва се, когато не искате да commit-вате файл, но да запазите локалните промени
    С `--hard` променя и работната директория

= slide 'Машината на времето' do
  example:
    git checkout <files>
    git checkout <commit> <files>
    git checkout <branch> <files>
  list:
    Променя файлове в работната директория, като ги взима от staging областта...
    ... или от определен commit.
    Внимание! Може да изгубите код!

= slide 'Машината на времето' do
  example:
    git commit --amend
    git push --force   # Ако вече сте push-нали
  list:
    Променя последния commit. А дали наистина?
    Всъщност създава нов commit със същия предшественик
    Старият commit все още може да бъде възстановен
    Удобно е за поправяне на грешки в съобщението или добавяне на изпуснати файлове
    Не е хубаво да се прави, ако вече сте push-нали, защото някой друг може да е направил pull и ще има конфликт

= slide 'Машината на времето' do
  example:
    git revert <commit>
  list:
    Премахва промените, направени от `commit`
    Всъщност създава нов commit, който прави същото като `commit`, но наобратно
    Разбирайте, където има `+` в diff-a, става на `-` и обратно
    Ако все пак решите, че искате тези промени, можете да revert-нете revert commit-a
  img.action src='16/yo-dawg.png'

= slide 'Машината на времето' do
  example:
    git reflog
  list:
    Показва ви последните операции, които сте правили, заедно с ID-та на разни обекти
    Можете да намерите ID-тата на изгубени commit-и и да ги възстановите
    Понякога се чисти

= slide 'Игнориране на файлове', '.gitignore' do
  list:
    Често има файлове, които не искаме git да следи
    Например компилирани двоични файлове, временни файлове, конфигурационен файл с API ключове и т.н.
    Всеки ред в `.gitignore` е шаблон за файлове/директории, които трябва да бъдат игнорирани
    Това означава, че няма да се виждат в `git status`

= slide 'Игнориране на файлове', 'Формат на .gitignore' do
  example:
    /bin            # Файла/директорията bin в главната директория на проекта
    bin             # Всички файлове и директории с име bin
    bin/            # Всички директории с име bin
    compiled/*.html # Всички файлове с разширение html в compiled-lectures
    lib/**/*.txt    # Всички текстови файлове в lib или нейна поддиректория
    *.exe           # Всички изпълними файлове за Windows

= slide 'Git rebase', 'Най-мощният инструмент за пренаписване на историята' do
  example:
    git checkout killer-feature
    git rebase master
    git rebase -i master
    git rebase -i HEAD~4
    git pull --rebase
  list:
    Пресъздава промените от текущия branch, все едно са направени върху сегашното състояние на `master`
    С -i ви позволява да си премахнете, промените или слеете (squash) commit-и от историята
    Трябва да направите `git push --force`, ако вече сте push-нали branch-a, който променяте
    Отново - избягвайте да го правите, ако промените вече са публикувани

= slide 'Git blame', '"Кой написа това?"' do
  example:
    git blame lectures/index.yml

= slide 'Акценти' do
  list:
    `git add`, `git commit`
    `git push`, `git pull`
    `git checkout`
    `git merge`, `git rebase -i`
    `git reflog`

= slide 'Защо git по този начин?' do
  list:
    Елегантно решение на сложен проблем
    Научавайки как работи на по-ниско ниво, ще ви помогне да се ориентирате
    Конзолният интерфейс е сложен, но ще разбирате какво става "под капака"

= slide 'Изводи' do
  list:
    Няма да минете без него...
    ...затова започвайте да го използвате...
    ...с терминала - научават се много неща.
    Може да ви се струва труден - не е

  p.action Искайте помощ:
  list:
    `git command --help`
    `man git`
    `man git-command`

= slide 'Графичен интерфейс', 'GitX' do
  img src="16/gitx-screenshot.jpg"

= slide 'Графичен интерфейс', 'TortoiseGit' do
  img src="16/tortoisegit.gif"

= slide 'Графичен интерфейс', 'GitHub' do
  img src="16/github-gui.png"

= slide 'Материали' do
  p
  list:
    Добър туториал за начинаещи с терминалния интерфейс - [Try git](http://try.github.io/levels/1/challenges/1)
    Безплатна книга с много подробни обяснения - [Pro Git](http://git-scm.com/book)
    Инструкции за създаване на pull request в GitHub - [Guide](https://github.com/fmi/ruby-course-guides/blob/master/pull_requests.md)
    Интерактивна визуализация на команди - [Explain Git](https://github.com/onlywei/explain-git-with-d3) (забележка: някои неща не са 1:1 с реален Git)

= slide 'Въпроси по Git?' do
  p Сега е добър момент да ги зададете.
