= slide 'Днес' do
  list:
    case в Ruby
    `Enumerator`-и и мързел
    Още за класови методи
    Замразяване на обекти

= slide 'Call for speakers', 'Подиумът на този курс е и ваш' do
  list:
    Обмяна на опит, попълване на знанията, тренинг в говоренето
    Харесайте си тема, дори да не е пряко свързанa с Ruby, и ни пишете

= slide 'Четвърта задача' do
  ul
    li Ще я пуснем днес
    li Срок до идния понеделник, 17:30
    li Цел – да упражните класове и наследяване

= slide 'Въпрос 1' do
  p Можем ли в Ruby да създаваме обекти от тип "клас", без те да си имат име
    (анонимни класове)? Ами модули? Ако да, как? Ако не, защо не?

  .action.answer
    p Можем, така:

    annotate:
      foo = Class.new { def hello() 'HI!' end }
      # =>

      foo.new.hello
      # =>

      bar = Module.new { '...' }
      # =>

= slide 'Въпрос 2' do
  p Какъв ще бъде резултатът от кода по-долу? Защо?

  example:
    FOO = 'toplevel'

    module Private
      class Object
        FOO = 'nested'
      end

      puts Object::FOO
      puts ::Object::FOO
    end

  .action.answer
    p Ще се изведе първо <code>nested</code>, после <code>toplevel</code>.

= slide 'Въпрос 3' do
  p Какво ще се случи при изпълнение на следния код (и защо):

  example:
    Object::String = Class.new
    puts String.new('bar').upcase

  .action.answer
    p Ще се предизвика грешка при извикване на <code>String#new</code>, защото top-level константата <code>String</code> е предефинирана на първия ред и сочи към клас, чийто конструктор не приема аргументи. Дори няма да се достигне до извикване на <code>upcase</code>.

    p Допълнително, Ruby ще иведе warning на STDERR, че предефинираме вече дефинирана константа.

= slide 'Въпрос 4' do
  p Какво ще се случи при изпълнение на следния код (и защо):

  example:
    PIE = 'Apple'
    module Foo
      PIE = 'Strawberry'
    end

    module Foo::Bar
      puts PIE
    end

  .action.answer
    p На екрана ще се изведе текстът "Apple". <code>module Foo::Bar</code> ще създаде нов модул <code>Bar</code>, ще запише създадения обект в таблицата с константи на модула <code>Foo</code> и ще отвори нов scope в контекста на <code>Bar</code>, като родителският контекст ще бъде root scope-а, а не този на <code>Foo</code>. Затова и константата <code>PIE</code> ще бъде намерена след един fallback в root scope-a.

= slide 'Въпрос 5' do
  p Ще сработи ли кодът по-долу – да, не – и ако сработи, какво ще изведе? Защо?

  example:
    class String
      def to_proc
        ->(object) { object.public_send(self) }
      end
    end

    ['I', 'am', 'Matz'].map(&"length")

  .action.answer
    p Ще сработи. Ще изведе <code>[1, 2, 4]</code>. Пресъздаваме дефиницията
      на вградения <code>Symbol#to_proc</code> за низове.

= slide 'Въпрос 6' do
  p Какъв ще е резултатът от кода по-долу?

  example:
    def foo(x, _, _) p x end
    def bar(y, z, z) p y end

    foo 1, 2, 3
    bar 1, 2, 3

  .action.answer
    p Ще даде синтактична грешка заради дефиницията на <code>bar</code> заради
      повтарящи се имена на аргументи. Кодът без <code>bar</code> е валиден и
      щеше да изведе <code>1</code>, защото <code>_</code> се използва като
      placeholder със смисъл на "игнорирай този аргумент" и може да се повтаря.

    p В интерес на истината, и това е валидно:

    example:
      def foo(x, _bar, _bar) end

= slide 'Въпрос 7' do
  p Какъв ще е резултатът от кода по-долу? Защо?

  example:
    answer = 42

    universe = proc do
      def say_answer
        puts "The answer is: #{answer}"
      end

      say_answer
    end

  .answer
    list:
      Нищо няма да стане, понеже не викаме <code>Proc</code>-а <code>universe</code> (trolololo)
      При извикване щяхме да получим грешка, понеже <code>answer</code> е недефинирано в <code>say_answer</code>
      Причината е, че <code>def</code>, <code>class</code> и <code>module</code> са scope gate-ове
      Дефиницията на блок <strong>не е</strong> scope gate!

= slide 'Въпрос 8' do
  p Изпълнението на кода по-долу ще предизвика ли грешка или ще изведе нещо на екрана? Какво? Защо?

  example:
    def foo(klass = Class.new { def bar() 'Roll the dice' end })
      puts klass.new.bar
      def foo() puts 'You feel it running through your bones' end
    end

    foo
    foo

  .action.answer
    p Кодът няма да продуцира грешки при изпълнението си. На екрана ще се изведе:
    pre
      ' Roll the dice
        You feel it running through your bones

= slide 'case' do
  p В Ruby има "switch". Казва се <code>case</code>.

  example:
    def quote(name)
      case name
        when 'Yoda'
          puts 'Do or do not. There is no try.'
        when 'Darth Vader'
          puts 'The Force is strong with this one.'
        when 'R2-D2'
          puts 'Beep. Beep. Beep.'
        else
          puts 'Dunno what to say'
      end
    end

= slide 'case', 'особености' do
  list:
    Няма fall-through. Не се пише `break`
    Ако нито един `when` не мине, изпълнява се `else`
    Ако нито един `when` не мине, и няма `else`, не става нищо
    <code>case</code> е израз, което значи, че връща стойност

= slide 'case', 'алтернативен синтаксис' do
  example:
    case operation
      when :& then puts 'And?'
      when :| then puts 'Or...'
      when :! then puts 'Not!'
      else         puts 'WAT?'
    end

= slide 'case', 'връщана стойност' do
  p На какво ще се оцени следният код?

  example:
    case 'Wat?'
      when 'watnot' then puts "I'm on a horse."
    end

  .action.answer
    p Ако няма <code>else</code> и никой <code>when</code> не match-не, се връща <code>nil</code>.

= slide 'case', 'стойности' do
  p <code>case</code> не сравнява с <code>==</code>. Може да напишете следното:

  example:
    def qualify(age)
      case age
        when 0..12
          'still very young'
        when 13..19
          'a teenager! oh no!'
        when 33
          'the age of jesus'
        when 90..200
          'wow. that is old!'
        else
          'not very interesting'
        end
    end

= slide 'case', 'Object#===' do
  p <code>case</code> сравнява с <code>===</code>. Няколко класа го имплементират:

  list:
    `Range`
    `Regexp`
    `Class`
    Списъкът не е изчерпателен...
    По подразбиране се оценява като `==`

= slide 'case', 'Class#===' do
  example:
    def qualify(thing)
      case thing
        when Integer then 'this is a number'
        when String  then 'it is a string'
        when Array   then thing.map { |item| qualify item }
        else 'huh?'
      end
    end

= slide 'case', 'Range#===' do
  example:
    case hours_of_sleep
      when 8..10 then 'I feel fine.'
      when 6...8 then 'I am a little sleepy.'
      when 0..3  then 'OUT OF MY WAY! I HAVE PLACES TO BE AND PEOPLE TO SEE!'
    end

= slide 'case', 'Regexp#===' do
  example:
    def parse_date(date_string)
      case date_string
        when /(\d{4})-(\d\d)-(\d\d)/
          Date.new $1.to_i, $2.to_i, $3.to_i
        when /(\d\d)\/(\d\d)\/(\d{4})/
          Date.new $3.to_i, $1.to_i, $2.to_i
      end
    end

= slide 'case', 'when с няколко стойности' do
  p Ruby позволява да обедините проверката за няколко възможни стойности в един <code>when</code>, дори да не са от един и същи тип.

  example:
    case number
      when (42+0i)  then 'This is too complex for me!'
      when 42, 42.0 then 'This is more like it!'
    end

= slide 'case', 'с обикновени условия' do
  list:
    Можете да слагате и цели изрази в `when`
    Изпуска се параметърът след `case`, например:

  .action
    example:
      thing = 42
      case
        when thing == 1 then 1
        else 'no_idea'
      end

  list:
    Не го правете.
    Ако ви се налага, ползвайте обикновени `if`-ове

= slide 'Въпроси по case' do
  p Сега е моментът.

= slide 'Enumerator-и' do
  p Някои методи на <code>Enumerable</code> могат да не вземат блок.

  annotate:
    numbers = []
    1.upto(5) { |x| numbers << x }

    numbers               # =>

    other = 1.upto(5)
    other                 # =>
    other.to_a            # =>

    1.upto(5).map(&:succ) # =>

= slide 'Enumerator-и', 'нещо като итератори' do
  p Енумераторите могат да се държат като итератори.

  annotate:
    numbers = 1.upto(3)

    numbers.next   # =>
    numbers.next   # =>
    numbers.next   # =>
    numbers.next   #!

= slide 'Kernel#loop' do
  p <code>loop</code> прави безкраен цикъл. Спира на <code>StopIteration</code>.

  annotate:
    numbers = 1.upto(3)

    loop do
      puts numbers.next
    end

= slide 'Enumerable и Enumerator' do
  list:
    Методите на `Enumerable` връщат `Enumerator`, ако ги извикате без блок
    Това позволява да "навръзвате" enumerator-и
    Ако дефинирате обект, който е `Enumerable`, помислете и за съвместимост с enumerator-и

= slide 'Enumerators 101', 'примери' do
  annotate:
    enum = [1, 2].each # =>

    enum.next # =>
    enum.next # =>
    enum.next #!

= slide 'Enumerators 102', 'примери' do
  annotate:
    enum = Enumerator.new do |yielder|
      yielder << 1
      yielder << 2
    end

    enum.next # =>
    enum.next # =>
    enum.next #!

= slide 'Object#enum_for' do
  p Може да извадите енумератор от произволен метод с <code>enum_for</code>.

  annotate:
    class Numbers
      def primes
        yield 2
        yield 3
        yield 5
        yield 7
      end
    end

    first_four_primes = Numbers.new.enum_for(:primes)
    first_four_primes.to_a     # =>

= slide 'Object#to_enum', 'примери' do
  annotate:
    o = Object.new

    def o.each
      yield
      yield 'hello'
      yield [1, 2]
    end

    enum = o.to_enum
    enum.next # =>
    enum.next # =>
    enum.next # =>

= slide 'Enumerable и Enumerator (2)', 'пример' do
  annotate:
    class Foo
      def each
        return to_enum unless block_given?

        yield 1
        yield 2
      end
    end

    f = Foo.new
    f.each { |x| puts x } # =>
    f.each                # =>

= slide '#with_object и #with_index' do
  p Енумераторите имат някои интересни методи.

  annotate:
    numbers = 1.upto(3)

    numbers.with_index.to_a      # =>
    numbers.with_object(:x).to_a # =>

= slide 'map_with_index', 'навръзване на енумератори' do
  p Ако ви се е случвало да ви трябва индекс в <code>map</code>:

  annotate:
    words = %w( foo bar baz ).map.with_index do |word, index|
      "#{index}: #{word.upcase}"
    end

    words # =>

= slide 'Припомняне', 'Брой на думите във всеки ред от даден низ' do
  annotate:
    data = "Some really long\ntext with new lines."

    # Вариант 1
    data.lines.map(&:split).map(&:size) #=>

    # Вариант 2
    data.lines.map { |line| line.split.size } #=>

  br
  h2.action Вариант 1 създава междинен масив с всички елементи.

= slide 'Мързеливи енумератори' do
  list:
    Методът `Enumerable#lazy` връща "мързелив" енумератор
    Има и `Enumerator#lazy`
    Дадената стойност се оценява само когато потрябва

= slide 'Примери', 'безкрайни поредици' do
  example:
    (1..Float::INFINITY).map { |i| i * i }.first(5) # => ?

  .action
    annotate:
      (1..Float::INFINITY).lazy.map { |i| i * i }.first(5) # =>

= slide 'Примери', 'еднократно оценяване на целия chain' do
  example:
    [
      ' a ',
      ' b ',
      ' c ',
    ].lazy.map { |x| p x.strip }.map { |x| p x.upcase }.take(1).to_a

  p Горното ще изведе на екрана:
  pre
    ' "a"
      "A"
  p И ще върне списъка <code>["A"]</code>.

= slide 'SampleEnumerator' do
  example:
    class Enumerator
      class Sample < Enumerator
        def initialize(obj)
          super() do |yielder|
            obj.each do |val|
              yielder << val
            end
          end
        end
      end
    end

= slide 'Enumerator::Lazy' do
  example:
    class Enumerator
      class Lazy < Enumerator
        def initialize(obj)
          super() do |yielder|
            obj.each do |val|
              if block_given?
                yield(yielder, val)
              else
                yielder << val
              end
            end
          end
        end
      end
    end

= slide 'Enumerator::Lazy#map', 'примерна дефиниция на map' do
  example:
    class Enumerator
      class Lazy < Enumerator
        def map
          Lazy.new(self) do |yielder, val|
            yielder << yield(val)
          end
        end
      end
    end

= slide 'Enumerator::Lazy', 'примерна дефиниция на нов lazy метод' do
  annotate:
    module Enumerable
      def filter_map(&block)
        map(&block).compact
      end
    end

    class Enumerator::Lazy
      def filter_map
        Lazy.new(self) do |yielder, *values|
          result = yield *values
          yielder << result if result
        end
      end
    end

    (1..Float::INFINITY).lazy.filter_map { |i| i * i if i.even? }.first(5) # =>

= slide 'LazyEnumerator methods' do
  p Методи имплементирани в <a href="http://ruby-doc.org/core-2.2.3/Enumerator/Lazy.html">Enumerator::Lazy (документация)</a> към момента:
  ul
    li <code>map</code> / <code>collect</code>
    li <code>flat_map</code> / <code>collect_concat</code>
    li <code>select</code> / <code>find_all</code>
    li <code>reject</code>
    li <code>grep</code>
    li <code>zip</code>
    li <code>take</code> и <code>take_while</code>
    li <code>drop</code> и <code>drop_while</code>
    li <code>slice_before</code>, <code>slice_after</code> и <code>slice_when</code> ([документация](http://ruby-doc.org/core-2.2.3/Enumerable.html#method-i-slice_when))

  p Методи, които "материализират" lazy колекцията:
  ul
    li <code>to_a</code> / <code>force</code>
    li <code>each</code>
    li <code>next</code>

= slide 'Кога ни е полезно?', 'Първите 10 четни числа на Фибоначи' do
  example:
    # Решение 1
    Fib.lazy.select(&:even?).take(10).to_a

    # Решение 2
    a = []
    Fib.each do |x|
      next if x.odd?
      a << x
      break if a.size == 10
    end

= slide 'Класови методи' do
  list:
    Условието на трета задача изисква създаването на класови метод
    Миналия път ви показахме един от начините да дефинирате такъв
    Този начин не е единствен и не е "каноничният"
    Без да навлизаме в детайли, днес ще ви покажа двата други начина

= slide 'Класови методи', 'преговор' do
  p Неканоничният и праволинеен начин за дефиниране на класов метод:

  example:
    module Snake
      class Level
        def Level.load(level_data)
          # Code
        end
      end
    end

= slide 'Класови методи', 'втори начин' do
  p Този начин е еквивалентен на предишния слайд:

  example:
    module Snake
      class Level
        def self.load(level_data)
          # Code
        end
      end
    end

  p.action Това работи, понеже:
  list:
    Тялото на класа е изпълним код
    Както във всеки друг контекст в Ruby, и там имаме `self`
    `self` и `Snake::Level` в тялото на класа реферират към един и същ обект

= slide 'Класови методи', 'трети начин' do
  p Използва се при нужда да се дефинират няколко класови метода:

  example:
    module Snake
      class Level
        class << self
          def load(level_data)
            # Code
          end
        end
      end
    end

  list:
    Какъв е този синтаксис и защо работи, ще си говорим по-нататък

= slide 'Класови методи', 'конвенции' do
  list:
    Първият начин не се ползва (`def ClassName.method_name() end`)
    При дефиниране на един, максимум два класови метода, ползваме втория начин
    При дефиниране на повече от един класов метод, обикновено ползваме третия начин
    За справка – [ръководството по стил](https://github.com/fmi/ruby-style-guide#classes)

= slide 'Въпроси дотук?' do
  p Преди да продължим със следващата тема.

= slide 'Замразяване на обекти в Ruby' do
  list:
    Реално превръща mutable-обекти в immutable
    Замразяването става с `Object#freeze` (Мутира обекта!)
    Можете да проверите дали обект е замразен с `Object#frozen?`
    Веднъж замразен, даден обект не може да бъде размразен
    Не можете да променяте вече замразени обекти (Workaround е да направите `dup`.)
    Често се ползва, когато присвоявате mutable-типове на константи

= slide 'Замразяване на обекти' do
  example:
    module Entities
      ENTITIES = {
        '&' => '&amp;',
        '"' => '&quot;',
        '<' => '&lt;',
        '>' => '&gt;',
      }.freeze

      ENTITY_PATTERN = /#{ENTITIES.keys.join('|')}/.freeze

      def escape(text)
        text.gsub ENTITY_PATTERN, ENTITIES
      end
    end

= slide 'Замразяване на низове' do
  p Тъй като низовете в Ruby са mutable, всяко срещане на низ = нов обект:

  annotate:
    ''.object_id                 # =>
    ''.object_id                 # =>
    ''.object_id == ''.object_id # =>

  list:
    Това е performance проблем
    Символите го решават, но те не са заместител на низове

= slide 'Замразяване на низове', 'пример' do
  example:
    class HTTP
      attr_reader :method

      def post?
        method == 'POST' # New string object on each call
      end
    end

= slide 'Замразяване на низове', 'пример за workaround' do
  example:
    class HTTP
      attr_reader :method
      METHOD_POST = 'POST'

      def post?
        method == METHOD_POST
      end
    end

  p.action Това е досадно. Затова в Ruby 2.1 има и по-добро решение.

= slide 'String#freeze' do
  annotate:
    ''.freeze.object_id                        # =>
    ''.freeze.object_id                        # =>
    ''.freeze.object_id == ''.freeze.object_id # =>

  list:
    Границата между `freeze`-нати низове и символи се размива в последните версии на Ruby с това, че се очаква и символите да започнат да се garbage collect-ват.

= slide 'Синтаксис за замразяване на низове' do
  list:
    `"Chunky bacon".freeze` се оптимизира от Ruby и връща един и същи обект
    Ако вече има такъв обект, с такова съдържание, той ще бъде преизползван
    Важи само при първо дефиниране на низ с литерален синтаксис

= slide 'Оптимизация при замразяване', 'работи само с литералния синтаксис' do
  annotate:
    'text'.freeze.object_id                         # =>
    foo = 'text'
    foo.freeze.object_id                            # =>
    foo.freeze.object_id == 'text'.freeze.object_id # =>

= slide 'Замразяване на обекти' do
  list:
    Полезно и интересно е да знаете за оптимизацията
    Не замразявайте низове под път и над път заради това
    Това е микро-оптимизация, а те не са добра идея
    Замразявайте неща, ако ви е страх от промени :)
