= slide 'Днес' do
  list:
    Весела коледа! (31 oct = 25 dec)
    Възможни решения на трета задача
    Няколко "теоритични неща" покрай тях
    Single Responsibility Principle
    Code Smells

= slide 'Решенията' do
  list:
    Има две очевидни решения на тази задача
    Има междинен вариант между тях
    Всичко останало е лош код
    Обърнете внимание на разликата между вашите и нашите решения
    Това се неща които не знаете или не разбирате
    Опитайте да ги научите

= slide 'Принципи' do
  list:
    Ще си говорим за няколко принципа
    Принципите изискват контекст
    Принципите не са панацея
    Принципите изискват интерпретация
    SOLID не е checklist - в едни моменти е по-добре да го спазвате, в други не
    От дискусията на принципи най-добре се научава ООП дизайн

= slide 'Интерфейс vs. имплементация' do
  list:
    Интерфейса и имплементация са две различни неща
    Хубаво е имплементацията да може да се променя независимо от интерфейса
    Хубаво е интерфейса да не показва твърде много от имплементацията
    Мислете за това като дизайнвате класове

= slide 'Code Smells', '...или защо кода ви мирише' do
  list:
    Симптоми, че има проблем в дизайна ви
    Не е задължително да са истински проблеми
    Вероятно са
    Има [подробен спискъв в c2](http://c2.com/cgi/wiki?CodeSmell)
    C2 е много любоптно wiki за програмиране

= slide 'Single Responsibility Principle' do
  list:
    Едно нещо трябва да има точно една отговорност
    "Нещо" може да е модул, клас или метод
    "Отговорност" може да се замени с "причина за промяна"

= slide 'Решението' do
  list:
    Двете решения имат много общ код
    Първо ще го представим

= slide 'Collection.parse' do
  example:
    class Collection
      def self.parse(text)
        songs = text.lines.each_slice(4).map do |name, artist, album|
          Song.new name.chomp, artist.chomp, album.chomp
        end

        new songs
      end
    end

  p Ще обърнем внимание на няколко неща

= slide 'Collection.parse', 'краткост' do
  p Може да го запишем по-кратко, но предпочитаме предния запис, защото е по-разбираем

  example:
    text.lines.each_slice(4).map do |lines|
      Song.new(*lines.take(3).map(&:chomp))
    end

= slide 'Collection.parse', 'конструиране на песен' do
  example:
    Song.new name.chomp, artist.chomp, album.chomp

  p Обърнете внимание:

  list:
    Не подаваме низ на Song.new - нарушава SRP
    Не подаваме масив - лош интерфейс, няма нужда
    `chomp`-а е извън `Song#initialize`

= slide 'Song' do
  example:
    class Song
      attr_reader :name, :artist, :album

      def initialize(name, artist, album)
        @name   = name
        @artist = artist
        @album  = album
      end
    end

= slide 'Collection#initialize' do
  p Нищо драматично:

  example:
    class Collection
      def initialize(songs)
        @songs = songs
      end
    end

= slide 'Collection < Enumerable' do
  example:
    class Collection
      include Enumerable

      def each(&block)
        @songs.each(&block)
      end
    end

= slide 'Collection#artists', 'и приятели' do
  example:
    class Collection
      def artists
        @songs.map(&:artist).uniq
      end

      def names
        @songs.map(&:name).uniq
      end

      def albums
        @songs.map(&:album).uniq
      end
    end

= slide 'Duplicated Code', 'Code smell' do
  list:
    Симптом: Един и същи код се повтаря с малки вариации
    Причина: Липсваща абстракция
    Решениe: Въвеждане на абстракция (в този случай - метод)
    Don't Repeat Yourself (DRY)

= slide 'Сух код' do
  example:
    class Collection
      def artists
        collect_unique :artist
      end

      private

      def collect_unique(attribute)
        @songs.map(&attribute).uniq
      end
    end

  list:
    Метода е `private`
    Има някакво приемливо име
    Минаваме през `@songs` (частен интерфейс), а не `songs` (публичен)

= slide 'Collection#filter' do
  example:
    class Collection
      def filter(criteria)
        Collection.new @songs.select { |song| criteria.met_by? song }
      end
    end

  p Обърнете внимание:
  list:
    Връщаме `Collection`, а не друг клас
    Ползваме `@songs.select` вместо `self.select`
    `criteria.met_by?(song)` вместо `song.meets?(criteria)`.

= slide 'Събития тази седмица' do
  list:
    OpenFest този уикенд (http://openfest.org/)
    GitHub лекция този петък от 18:00 в 325
    GitHub drink-up в неделя вечер, в RockIT

= slide 'Collection#adjoin' do
  example:
    class Collection
      def adjoin(other)
        adjoined_songs = (songs + other.songs).uniq
        Collection.new adjoined_songs
      end
    end

= slide 'Равенство на песни' do
  list:
    По условието на задачата не се налага да предефинирате равенство
    По подразбиране, `==` и `eql?` проверяват идентитет на обекти
    Може да имплементираме сравнение по стойност
    Ако песните са дошли от един `Collection.parse` - няма значение

= slide 'Равенство на песни' do
  example:
    class Song
      def ==(other)
        name == other.name and
          artist == other.artist and
          album == other.album
      end

      alias eql? ==

      def hash
        [@name, @other, @album].hash
      end
    end

  list:
    Ако предефинираме `eql?`, трябва да предефинираме и `hash`
    Това ни трябва за `Array#uniq`
    Това е популярен начин за имплементация на `hash`

= slide 'Критерии' do
  example:
    @songs.select { |song| criteria.met_by? song }

  list:
    Обектите критерии имат прост интерфейс
    Конструкцията им е абстрахирана зад методи като `Criteria.artist`
    Имате свобода как да имплементирате критериите, което е сърцето на задачата
    Тук се разделят двете решения

= slide 'Първо решениe' do
  list:
    9 класа и един модул
    Наподобява [Interpreter Design Pattern](http://en.wikipedia.org/wiki/Interpreter_pattern)
    Типично решение в език като Java
    Типично обектно-ориентирано решение
    Няма нищо over-design-нато в него

= slide 'Criteria.name' do
  example:
    module Criteria
      def self.name(name)
        NameMatches.new name
      end

      class NameMatches < Criterion
        def initialize(name)
          @name = name
        end

        def met_by?(song)
          song.name == @name
        end
      end
    end

= slide 'Criteria.artist' do
  example:
    class ArtistMatches < Criterion
      def initialize(artist)
        @artist = artist
      end

      def met_by?(song)
        song.artist == @artist
      end
    end

= slide 'Criteria.album' do
  example:
    class AlbumMatches < Criterion
      def initialize(album)
        @album = album
      end

      def met_by?(song)
        song.album == @album
      end
    end

= slide 'Обърнете внимание' do
  list:
    Наследяват `Criterion`, а не `Criteria`
    Класовете са кратки и прости
    Имаме общ родител - ще видим по-късно защо
    Има някакво структорно повторение
    В Ruby може да го избегнем по хубав начин (второто решение)
    В Java не можем (по хубав начин)

= slide 'Базовия клас' do
  example:
    class Criterion
      def &(other)
        Conjunction.new self, other
      end

      def |(other)
        Disjunction.new self, other
      end

      def !
        Negation.new self
      end
    end

= slide 'Conjunction' do
  example:
    class Conjunction < Criterion
      def initialize(left, right)
        @left  = left
        @right = right
      end

      def met_by?(song)
        @left.met_by?(song) and @right.met_by?(song)
      end
    end

= slide 'Disjunction' do
  example:
    class Disjunction < Criterion
      def initialize(left, right)
        @left  = left
        @right = right
      end

      def met_by?(song)
        @left.met_by?(song) or @right.met_by?(song)
      end
    end

= slide 'Negation' do
  example:
    class Negation < Criterion
      def initialize(criterion)
        @criterion = criterion
      end

      def met_by?(song)
        not @criterion.met_by?(song)
      end
    end

= slide 'За първия вариант' do
  list:
    Отново, това е ала Interpreter Design Pattern
    Това е класически обектно-ориентиран дизайн
    Броя класове не е много
    Всеки прави точно едно просто нещо
    Могат да се композират неограничено

= slide 'Малка вариация' do
  example:
    def Criteria.artist(artist)
      AttributeMatches.new :artist, artist
    end

    class AttributeMatches
      def initialize(attribute, value)
        @attribute = attribute
        @value     = value
      end

      def met_by?(song)
        song.send(@attribute) == value
      end
    end

= slide 'Втори вариант' do
  list:
    Може да гледаме на повторението като Code Smell
    Може да направим нещата по-кратки с ламбди
    Има предимства, има и недостатъци

= slide 'Criteria.artist' do
  example:
    module Criteria
      def self.artist(artist)
        Criterion.new { |song| song.artist == artist }
      end
    end

= slide 'Criterion' do
  example:
    class Criterion
      def initialize(&block)
        @matcher = block
      end

      def met_by?(song)
        @matcher.call song
      end
    end

= slide 'Операции за комбиниране' do
  example:
    class Criterion
      def &(other)
        Criterion.new { |song| self.met_by?(song) and other.met_by?(song) }
      end

      def |(other)
        Criterion.new { |song| self.met_by?(song) or other.met_by?(song) }
      end

      def !
        Criterion.new { |song| not met_by?(song) }
      end
    end

= slide 'Първи срещу втори вариант' do
  list:
    Втори вариант е по-добър, когато критериите са прости (ламбдата е кратка)
    Първи вариант е по-добър, когато критериите са по-сложни (и класовете са по-дълги)
    Може да направите хибриден вариант; вероятно е лоша идея заради липса на консистентност

= slide 'Inappropriate intimacy', 'Code smell' do
  list:
    Един клас знае твърде много за вътрешностите на друг
    Това създава лош coupling между двата класа
    Изнася твърде много интерфейс
    Прави промяната им трудна
