= slide 'Днес' do
  list:
    Интроспекция в Ruby
    Изключения

= slide 'Преди това' do
  list:
    Трета задача е качена , запретвайте ръкави
    Както обикновено, при въпроси се старайте първо да пишете във форума
    Само в краен случай ни пращайте мейл на fmi@ruby.bg
    Във ваш интерес е да си пускате примерния тест локално, преди да предадете задачата

= slide 'Интроспекция' do
  list:
    Начин програмно да инспектирате свойства на код
    Още: рефлекция (reflection)
    Необходимост, за да може да се метапрограмира на даден език

= slide 'Интроспекция', 'Code smell' do
  list:
    Внимание: употребяват се много внимателно и предимно в специфични случаи
    Ако мислите, че имате нужда да ползвате нещо от това, които ще ви покажем, помислете пак
    Възможно е да има друг, много по-чист и елегантен начин да решите поставения проблем
    Третирайте тези неща като code smell и прибягвайте до тях само в краен случай

= slide 'Интроспекция на ОО йерархията' do
  list:
    Най-простата форма на интроспекциящ
    Много от тези методи вече сте ги виждали в действие или поне сте чували за тях:
    `class` ви дава класа на даден обект; всеки обект има клас, дори класовете
    `superclass` - родителският клас
    `kind_of?` (със синоним `is_a?`)
    `instance_of?`
    `ancestors` - списъкът от класове и модули, в който се търси метод при извикване на такъв

= slide 'Разглеждане на обекти', 'методите им' do
  list:
    `methods` - списък с методите, на които отговаря дадена инстанция
    Забележете, че `foo.methods != foo.class.methods`
    Горното е следствие на факта, че и класовете са инстанции и си имат собствени методи
    Например:

  .action
    annotate:
      'foo'.methods.size  # =>
      String.methods.size # =>

= slide 'Разглеждане на обекти', 'Методите им' do
  list:
    Може да видите какви методи дефинира даден клас за своите инстанции
    Следните имена са очевидни:
    `private_instance_methods`
    `protected_instance_methods`
    `public_instance_methods`
    `singleton_methods` ви връша класовите методи

= slide 'Методи на обекти', 'Пример' do
  example:
    class Ruby
      def self.author; 'Matz'; end

      def version; '1.9.3'; end
      def repository; 'Git'; end
      def implementation; 'MRI C'; end

      protected :repository
      private :implementation
    end

    Ruby.public_instance_methods     # =>
    Ruby.protected_instance_methods  # =>
    Ruby.private_instance_methods    # =>
    Ruby.singleton_methods           # =>

= slide 'Методи на обекти' do
  list:
    Културната проверка дали даден обект има определен метод:
    `object.respond_to?(method_name)`
    Ще върне `true`, ако можете безопасно да изпълните `object.x`
    Тук е подходящо да подадете символ като `method_name`
    Връща `false` и за `private` и `protected` методи
    Ако му подадете `true` като втори аргумент, ще игнорира видимостта на метода

= slide 'Инстанционни променливи' do
  list:
    Можете да инспектирате и манипулирате инстанционни променливи на обекти с тези методи:
    `instance_variable_get`
    `instance_variable_set`
    `instance_variable_defined?`
    `remove_instance_variable` - този метод е `private`
    Забележете, че трябва да включите и `@` в името на променливата

= slide 'Инстанционни променливи', 'Пример' do
  annotate:
    class Foo
      def initialize
        @baba = 42
      end

      def touch
        @touched = true
      end
    end

    foo = Foo.new

    foo.instance_variables # =>
    foo.touch
    foo.instance_variables # =>

= slide 'Инстанционни променливи', 'Пример' do
  annotate:
    class Foo
      def initialize
        @baba = 42
      end
    end

    foo = Foo.new

    foo.instance_variable_defined? :@baba # =>

    foo.send(:remove_instance_variable, :@baba)
    foo.instance_variable_defined? :@baba # =>

= slide 'Константи' do
  list:
    Имената на класове и модули са константи
    Константи могат да бъдат дефинирани в класове и модули
    Top-level константите отиват в `Object`
    Съществуват методи за интроспекция и манипулирание на константи

= slide 'Константи' do
  list:
    Методите за интроспекция на константи идват от `Module` (`Class < Module`)
    `constants` връща списък с константите, дефинирани в дадения клас/модул
    `const_get` ви връща стойността на дадена константа
    `Object.const_get('String').new` е интересен начин да запишете `''`
    `const_set` ви дава възможност да създадете (или промените) константа в класа/модула
    `const_defined?` - проверка дали дадена константа съществува в класа/модула
    `remove_const` - премахва константа от клас/модул

= slide 'Константи' do
  annotate:
    Regexp.constants          # =>
    Object.constants.take(5)  # =>
    Object.constants.size     # =>

  list:
    `Object.constants` е списък на всички top-level константи, дефинирани към момента

= slide 'Константи', 'не правете така' do
  example:
    String # String
    Object.const_set(:String, Fixnum)
    String # Fixnum

= slide 'Глобални променливи' do
  p
    |
      <code>Kernel#global_variables</code> ще ви върне списък с всички глобални променливи<br />
      дефинирани към момента. Например:

  example:
    puts global_variables.map { |var| var.to_s.ljust(16) }
                         .each_slice(4)
                         .map { |vars_per_line| vars_per_line.join(' ') }
                         .join("\n")

= slide 'Глобални променливи' do
  pre
    |
      $;               $-F              $@               $!
      $SAFE            $~               $&               $`
      $'               $+               $=               $KCODE
      $-K              $,               $/               $-0
      $\               $_               $stdin           $stdout
      $stderr          $>               $<               $.
      $FILENAME        $-i              $*               $?
      $$               $:               $-I              $LOAD_PATH
      $"               $LOADED_FEATURES $VERBOSE         $-v
      $-w              $-W              $DEBUG           $-d
      $0               $PROGRAM_NAME    $-p              $-l
      $-a              $binding         $1               $2
      $3               $4               $5               $6
      $7               $8               $9

= slide 'Локални променливи' do
  list:
    Подобно на `Kernel#global_variables`, има метод `Kernel#local_variables`
    Връща списък с локалните променливи, регистрирани към момента в текущия scope

  .action
    annotate:
      foo          = :bar
      die_antwoord = 42

      local_variables # =>

= slide 'defined?' do
  list:
    Ключова дума, за разлика от всички методи, показани до момента
    "Аргументът", който приема, е произволен Ruby израз
    Работи на ниво parser (синтаксис)
    Връща ви низ, описващ типа на израза, който сте подали на `defined?`
    Ако подадете несъществуващо име (напр. недефинирана локална променлива), ще получите `nil`
    Така може да проверите дали дадена локална променлива съществува

= slide 'defined?' do
  list:
    Примерна употреба - задаване на дифолтна стойност на локална променлива
    Идиоматично е следното: `foo ||= default_value`
    Ще работи дори `foo` да не е била дефинирана към момента. Проблемът с този код?
    Ако `foo` е имала стойност `false` и това е валидно за вашия случай, ще я презапишете
    Ако попаднете в тази рядка ситуация, може да направите следното:

  .action
    example:
      unless defined? cache
        cache = true
      end

= slide 'defined?', 'gotcha' do
  annotate:
    x = 42 unless defined? x
    x # =>

  list:
    Защо?
    Постфиксната форма на условието води до дефиниране на всички имена, срещани на реда
    Т.е. преди още `defined?` да се изпълни, `x` ще се дефинира и ще има стойност `nil`

= slide 'defined?' do
  annotate:
    defined? 1             # =>
    defined? foo           # =>
    defined? puts          # =>
    defined? String        # =>
    defined? $&            # =>
    defined? $_            # =>
    defined? Math::PI      # =>
    defined? answer = 42   # =>
    defined? 42.abs        # =>

= slide 'block_given?' do
  p
    |
      Можете да ползвате <code>Kernel#block_given?</code>, за да проверите дали<br />
      някой ви е подал блок, например:

  annotate:
    def block_or_no_block
      if block_given?
        'We got a block, go this way...'
      else
        'No block man, go that way...'
      end
    end

    block_or_no_block     # =>
    block_or_no_block {}  # =>

= slide 'ObjectSpace' do
  list:
    Класът `ObjectSpace` ви дава прост интерфейс за манипулация на обектите в паметта
    `ObjectSpace.each_object` ще `yield`-ва на подадения му блок всеки такъв обект
    Приема опционален аргумент - от какъв клас да бъде дадения обект
    `ObjectSpace.each_object(String)` ще обходи всички низове, заредени в паметта в момента
    `ObjectSpace.each_object(Class)` - всички класове
    Обхожда всичко без `Fixnum`, `Symbol`, `true`, `false` и `nil`, тъй като те се интернират
    Ако не му подадете блок, ще ви върне `Enumerator`

= slide 'ObjectSpace.each_object' do
  annotate:
    ObjectSpace.each_object.count          # =>
    ObjectSpace.each_object(String).count  # =>
    ObjectSpace.each_object(Float).to_a    # =>
    ObjectSpace.each_object(Class).count   # =>

    ObjectSpace.each_object(Class) do |klass|
      # Do something with klass
    end

= slide 'ObjectSpace.count_objects' do
  p Дава проста статистика на бройките обекти в паметта по типове. Връща хеш. Например:

  example:
    puts ObjectSpace.count_objects
          .map { |type, count| "#{type}:".ljust(10) + count.to_s.rjust(7) }
          .each_slice(3)
          .map { |counts_per_row| counts_per_row.join('    ') }
          .join("\n")

= slide 'ObjectSpace.count_objects', 'Резултати' do
  pre
    |
      TOTAL:     419019    FREE:      289687    T_OBJECT:   12958
      T_CLASS:      880    T_MODULE:      34    T_FLOAT:        8
      T_STRING:   85708    T_REGEXP:     175    T_ARRAY:    21544
      T_HASH:       707    T_STRUCT:       1    T_BIGNUM:       6
      T_FILE:         7    T_DATA:      2188    T_MATCH:      643
      T_COMPLEX:      1    T_NODE:      4436    T_ICLASS:      36

= slide 'ObjectSpace._id2ref' do
  list:
    Помните ли `Object#object_id`?
    `ObjectSpace._id2ref` е обратният му метод
    Пример:

  .action
    annotate:
      id = 'larodi'.object_id   # =>
      ObjectSpace._id2ref(id)   # =>

= slide 'Деструктори в Ruby?' do
  list:
    Невъзможно и ненужно
    Или?
    `ObjectSpace.define_finalizer(object, proc)`
    Вика `proc` когато `object` бъде garbage collect-нат
    Много подобно на деструктор...

= slide 'ObjectSpace.define_finalizer' do
  example:
    foo = 'Memory is plentiful!'
    ObjectSpace.define_finalizer foo, proc { puts 'foo is gone' }
    ObjectSpace.garbage_collect

    foo = nil
    ObjectSpace.garbage_collect

    # Тук proc-ът от по-горе бива извикан
    # и на STDOUT се извежда "foo is gone"

= slide 'Object#method(method_name)' do
  list:
    Позволява ви да вземете референция към метод на даден обект
    Връща обект от тип `Method`
    Ако такъв метод няма, хвърля изключение (`NameError`)
    Инстанциите на `Method` се държат като closure

  .action
    annotate:
      class Person
        def name
          'Matz'
        end
      end

      Person.new.method(:name) # =>

= slide 'Класът Method', 'Или какво може да правите с обектите му' do
  list:
    Интерфейсът му донякъде наподобява анонимни функции и proc-ове, с малко екстри
    `call` ще извика въпросния метод
    `name` ще ви даде името на метода
    `owner` - класът или модулът, откъдето е дошъл този метод
    `receiver` - обектът получател на този метод (инстанцията, обвързана с метода)
    `arity` връща колко аргумента приема метода (с врътки за променлив брой аргументи)
    `parameters` - детайлна информация за приеманите аргументи - имена, дали са задължителни и т.н.
    `source_location` - в кой файл и на кой ред е дефиниран този метод; много полезно
    `unbind` - "разкача" този метод от получателя му; връща ви инстанция на `UnboundMethod`

= slide 'Method#call' do
  annotate:
    class Person
      attr_accessor :name
    end

    someone = Person.new
    someone.name = 'Murakami Haruki'

    name_method = someone.method(:name)
    name_method.call  # =>

= slide 'Method#arity и #parameters' do
  annotate:
    def foo(x, y, z); end

    method(:foo).arity      # =>
    method(:foo).parameters # =>

    def bar(x, y, z = 1); end

    method(:bar).arity      # =>
    method(:bar).parameters # =>

= slide 'Proc#arity' do
  list:
    Подобно на `call`, и `Proc`-обектите имат метод `ariry` със същото действие
    Това важи за анонимни функции, блокове и всякакви инстанции на `Proc`
    Например:

  .action
    annotate:
      Proc.new { |x| }.arity      # =>
      lambda { |x, y| }.arity     # =>

= slide 'Method#source_location' do
  list:
    Работи само за методи, дефинирани на Ruby
    Полезно при дебъг на непознат код (вкл. и такъв, идващ от gem-ове)
    Връща списък с два елемента - път до Ruby файл и ред в този файл

  .action
    annotate:
      require 'set'
      Set.new.method(:to_a).source_location # ["/Users/.../ruby-1.9.3/lib/ruby/1.9.1/set.rb", 144]

      class Set; def to_a; super; end; end
      Set.new.method(:to_a).source_location # =>

= slide 'Необвързани методи' do
  list:
    Инстанции на `UnboundMethod`
    Имат почти същите методи като и обвързаните (т.е. инстанциите на `Method`)
    Не могат да бъдат извиквани
    Mогат да бъдат обвързани впоследствие към други инстанции

= slide 'Необвързани методи' do
  annotate:
    class Person
      attr_reader :name

      def initialize(name)
        @name = name
      end
    end

    stefan = Person.new 'Stefan'
    mitio  = Person.new 'Mitio'

    stefan.name                           # =>

    stefans_name = stefan.method(:name)
    stefans_name.call                     # =>
    stefans_name.unbind.bind(mitio).call  # =>

= slide 'Hooks', 'Куки' do
  list:
    Ruby ви дава възможност да се закачате на определени събития посредством hooks
    Обикновено във въпросните hooks може да промените нещото, което се случва, по някакъв начин
    Ще разгледаме някои hooks за събития, възникващи при промяна и изпълнение на код

= slide 'Добавяне и махане на методи' do
  list:
    Можем да бъдем известени, че някой е добавил метод в модул или клас
    Това става като си дефинираме `Module#method_added(method_name)`
    Същото нещо, но за премахване на методи е `Module#method_removed(...)`

= slide 'Добавяне и махане на методи', 'Пример' do
  example:
    module Foo
      def self.method_added(name)
        puts "A-ha! You added the #{name} method!"
      end
    end

    module Foo
      def bar
      end
    end # Извежда "A-ha! You added the bar method!"

= slide 'Добавяне и махане на методи', 'Още един пример' do
  example:
    module BigBrother
      def method_added(name)
        puts "A-ha! You added the #{name} method!"
      end
    end

    class Citizen
      extend BigBrother
    end

    class Citizen
      def name
      end
    end # Ивежда "A-ha! You added the name method!"

= slide 'Още hooks' do
  list:
    `Kernel::singleton_method_added` се вика, когато добавите класов метод в модул или клас
    `Class#inherited` се вика, когато вашият клас бъде наследен от друг клас
    `Bar.included` се вика, когаот някой напише `class Foo; include Bar; end`
    `Bar.extend_object` се вика, когато някой напише `class Foo; extend Bar; end`
    Това не е изчерпателен списък

= slide 'Hooks' do
  list:
    В тези hooks получавате аргументи, които ви дават възможност да следите какво се случва
    Например името на добавен/премахнат метод, класът наследник, класът, който ви е include-нал и т.н.
    В тези моменти можете да извършите някакво допълнително действие, ако се налага
    Това е един от механизмите за създаване на любипитни, динамични разширения на езика

= slide 'Човъркане с виртуалната машина' do
  list:
    Имаме възможност да правим някои неща с виртуалната машина (интерпретатора) на Ruby
    Да спрем събирането на боклука
    Класът `GC` - интерфейс към mark-and-sweep garbage collector-а на Ruby
    `GC.stop` спира събирането на неизползвани обекти

  .action
    annotate:
      GC.methods - Object.methods # =>
      GC.constants                # =>

= slide 'GC::Profiler', 'Профилиране на garbage collector-а' do
  example:
    GC::Profiler.enable
    require 'active_support/ordered_hash'
    puts GC::Profiler.result

  .action
    p Резултати:
    pre
      | GC 8 invokes.
        Index    Invoke Time(sec)       Use Size(byte)     Total Size(byte)         Total Object                    GC Time(ms)
            1               0.706              2889840             16818080               420452        23.71699999999998809130

= slide 'За десерт' do
  list:
    `Kernel#set_trace_func(proc)`
    Задава въпросния proc обкект като трасираща функция
    Параметри: име на събитие, файл, ред, object_id, binding, клас
    Понеже му давате proc, може да пропуснете някои от параметрите

= slide 'Kernel#set_trace_func(proc)', 'Събития' do
  list:
    `c-call` - извикване на C-метод
    `c-return` - връщане от C-метод
    `call` - извикване на Ruby метод
    `return` - връщане от Ruby метод
    `class` начало на дефиниция на клас или модул
    `end` край на горната дефиниця
    `line` изпълняване на код на ред Х
    `raise` възникнало изключение

= slide 'Kernel#set_trace_func', 'Пример' do
  example:
    tracer = proc do |event, file, line, id, binding, classname|
       printf "%8s %s:%-2d %15s %15s\n", event, file, line, id, classname
    end

    set_trace_func tracer

    class Foo
      def bar
        a, b = 1, 2
      end
    end

    larodi = Foo.new
    larodi.bar

= slide 'Kernel#set_trace_func', 'Резултати' do
  pre
    |
      c-return t.rb:5   set_trace_func          Kernel
          line t.rb:7
        c-call t.rb:7        inherited           Class
      c-return t.rb:7        inherited           Class
         class t.rb:7
          line t.rb:8
        c-call t.rb:8     method_added          Module
      c-return t.rb:8     method_added          Module
           end t.rb:11
          line t.rb:13
        c-call t.rb:13             new           Class
        c-call t.rb:13      initialize     BasicObject
      c-return t.rb:13      initialize     BasicObject
      c-return t.rb:13             new           Class
          line t.rb:14
          call t.rb:8              bar             Foo
          line t.rb:9              bar             Foo
        return t.rb:10             bar             Foo

= slide 'Kernel#trace_var' do
  list:
    Може да ползвате `Kernel#trace_var` за да следите за промени по глобални променливи
    Важи само за "специални" глобални променливи, не за такива, дефинирани от вас

= slide 'Kernel#trace_var', 'Пример' do
  example:
    trace_var :$_ do |value|
      puts "$_ is now #{value.inspect}"
    end

    $_ = "Ruby"
    $_ = ' > Python'

  .action
    p Извежда следното:

    pre
      |
        $_ is now "Ruby"
        $_ is now " > Python"

= slide 'Интроспекция', 'Code smell!' do
  list:
    Напомняме: третирайте всички техники, показани тук, като code smell
    Много е вероятно да има друг, по-прост, чист и елегантен дизайн, решаващ същия проблем
    Просто вие не сте го открили още; помислете добре, преди да прибегнете до тези техники
    Ползвайте ги само в краен случай, когато нямате избор

= slide 'Изключения' do
  list:
    Всички знаем какво са изключения.
    Нали?
    Метод за обработка на грешки.
    Позволява разделяне на обработката от останалия код.
    Все хубави неща.

= slide 'Изключенията в Ruby' do
  list:
    Накратко, двойка клас и низ.
    Съответно, тип на изключението и съобщение за грешка.
    Класовете за изключения са в йерархия.
    Два важни типа `Exception` и `StandardError`.
    `StandardError < Exception`.

= slide 'Непълна йерархия' do
  pre
    ' Object
      +-- Exception
         +-- NoMemoryError
         +-- ScriptError
         |   +-- SyntaxError
         |   +-- LoadError
         +-- SecurityError
         +-- StandardError
             +-- ArgumentError
             +-- IndexError
             |   +-- KeyError
             |   +-- StopIteration
             +-- NameError
             |   +-- NoMethorError
             +-- RuntimeError
             +-- TypeError

  p После ще видим пълната.

= slide '"вдигане" на изключения' do
  annotate:
    # Хвърля RuntimeError
    raise "'Prophet!' said I, 'Thing of evil!" #!

    # Като горното, но с различен текст
    raise RuntimeError, 'prophet still, if bird or devil!' #!

    # Друг начин да хвърлим RuntimeError
    raise RuntimeError.new('Whether tempter sent, or whether...') #!

= slide 'Хващане на изключения' do
  annotate:
    begin
      puts '...tempest tossed thee here ashore'
      raise NameError, 'Desolate yet all undaunted'
    rescue => ex
      ex.message   #=>
      ex.class     #=>
    end

= slide 'Хващане на изключения', 'хващане на конкретен тип' do
  annotate:
    begin
      raise KeyError, 'on this desert land enchanted'
    rescue ArgumentError => ex
      puts 'on this home by horror haunted'
    rescue KeyError, TypeError => ex
      ex.message  # =>
      ex.class    # =>
    end

= slide 'Какво хваща rescue?' do
  p <code>rescue</code> хваща "само" наследници на <code>StandardError</code>, ако не сме указали друго:
  pre
    ' Object
      +-- Exception
         +-- NoMemoryError
         +-- ScriptError<strong>
         +-- StandardError
             +-- ArgumentError
             +-- NameError
             |   +-- NoMethorError
             +-- RuntimeError</strong>

= slide 'Въпрос към вас', 'Какво ще се случи тук?' do
  example:
    begin
      raise KeyError, 'tell me truly, I implore'
    rescue IndexError => ex
      puts 'IndexError'
    rescue KeyError => ex
      puts 'KeyError'
    end

= slide 'Хващане на изключения', 'приоритет на rescue клаузите' do
  p Припомняне <code>KeyError &lt; IndexError</code>

  annotate:
    $eh = 'foo'

    begin
      raise KeyError, 'Is there - is there balm in Gilead?'
    rescue IndexError => ex
      $eh = 'index'
    rescue KeyError => ex
      $eh = 'key'
    end

    $eh    # =>

  p.action Изпълнява се първия <code>rescue</code>, за който изключението е <code>kind_of?</code> типа.

= slide 'Запомнете' do
  p Динамичните езици обикновено ползват прости правила

  list:
    "Първото отговарящо" е по-просто от "по-подходящото".
    Или от "всички отговарящи".
    Аналогичен случай с модулите.
    Два дизайн принципа: KISS и PLOA.
    Keep it simple, stupid!
    Principle of least astonishment.
    Важат с пълна сила за кода, който пишете.

= slide 'Хващане на изключения', 'ensure клауза' do
  p Кодът в <code>ensure</code> клаузата се изпълнява винаги.

  example:
    begin
      raise 'tell me - tell me, I implore!' if rand(2).zero?
    ensure
      puts '????? ??? ?????, "?????????"'
    end

  ul
    li <code>rand(2).zero?</code> връща <code>true</code> или <code>false</code>, 50 на 50.
    li Подходяща е за затваряне на ресурс, като отворен файл.
    li Някой сеща ли се какво има на мястото на въпросителните?

= slide 'Хващане на изключения', 'else клауза' do
  p <code>else</code> клаузата се изпълнява когато няма възникнало изключение.

  example:
    begin
      launch_nukes
    rescue
      puts 'Uh-oh! Something went wrong :('
    else
      puts 'War... War never changes'
    end

  list:
    Обърнете внимание, че `launch_nukes` няма удивителна.
    Дори да е опасен, няма &quot;по-безопасна&quot; версия.
    Не заслужава допълнителна пунктуация.

= slide 'begin/end in all its glory!' do
  example:
    begin
      get_a_life
    rescue NoFriendsError => ex
      puts 'Goodbye cruel world'
    rescue InsufficientVespeneGasError, NotEnoughMineralsError => ex
      puts 'I think I play too much StarCraft'
    rescue
      puts ';('
    else
      puts 'Woohoo!'
    ensure
      puts 'rm -rf ~/.history'
    end

= slide 'rescue в метод' do
  p В случай, че ползвате <code>resque</code> в метод така:

  example:
    def execute
      begin
        potentially_dangerous
      rescue SomeException => e
        # Handle the error
      ensure
        # Ensure something always happens
      end
    end

= slide 'rescue в метод', 'Предпочитания вариант' do
  p По-добре е да го запишете без <code>begin</code>/<code>end</code>, което е еквивалентно на предното:

  example:
    def execute
      potentially_dangerous
    rescue SomeException => e
      # Handle the error
    ensure
      # Ensure something always happens
    end

= slide 'Хвърляне на изключение', 'по време на обработка на друго' do
  p Ако възникне изключение при обработка друго, старото се игнорира и се "вдига" новото.

  example:
    begin
      raise KeyError
    rescue
      raise TypeError
      puts "I'm a line of code, that's never executed ;("
    end

= slide 'raise в rescue' do
  p
    ' <code>raise</code> в <code>rescue</code> клауза "вдига" същото
      изключение, което се обработва.

  example:
    begin
      raise KeyError, 'But high she shoots through air and light'
    rescue
      puts 'Whoops'
      raise
    end

= slide 'begin/end', '...е израз, като всичко друго в ruby' do
  annotate:
    result = begin
      raise KeyError if rand(3).zero?
      raise NameError if rand(3).zero?
    rescue KeyError
      'nyckel'
    rescue NameError
      'namn'
    else
      'ingenting'
    end

    result    # =>

= slide 'rescue като модификатор' do
  ul
    li <code>rescue</code> може да се ползва като модификатор.
    li Ако възникне изключение, rescue връща стойността отдясно.
    li Внимавайте. Така може да хващате само <code>StandardError</code>.

  annotate:
    [].fetch(1) rescue 'baba' # =>

= slide 'Exception#exception' do
  p
    ' <code>raise type, message</code> всъщност извиква <code>type.exception(message)</code>
      за да конструира изключение.

  annotate:
    class Thing
      def exception(message)
        NameError.new(message)
      end
    end

    thing = Thing.new
    raise thing, 'whoops' #!

= slide 'Как да ползваме изключения' do
  p Може да разделим изключенията на два вида.

  ul
    li Такива, които обикновено ще хващаме с <code>rescue</code>.
    li Такива, които няма да хващаме.

  p За първите обикновено създаваме клас. За вторите обикновено ползваме <code>raise</code>.

= slide 'Кога ползваме изключения' do
  list:
    Някой ще хваща ли това изключение въобще?
    Ако не, не правете нов клас.
    Клиента може ли да предвиди дали ще възникне изключение?
    Ако да, не го принуждавайте да го ползва.
    Не принуждавайте клиента да знае за изключенията ви, освен когато нямате избор.
    Например писане по мрежата - няма как да знаете предварително.

= slide 'Разсъждения' do
  list:
    Много рядко някой иска да хване `KeyError` или `IndexError`. Защо?
    Ако пишете библиотека, помислете за базов клас на нейните изключения.
    Look Before You Leap и Better Ask Forgiveness Than Permission.
    Не ползвайте изключенията за control flow. В Ruby има друга конструкция.

= slide 'catch и throw' do
  ul
    li Сходни на <code>raise</code> и <code>rescue</code>.
    li Не ползват изключения.
    li Служат за предаване на информация по стека.

= slide 'catch и throw' do
  annotate:
    def iterate_pairs(hash)
      hash.values.each { |array| iterate_values array }
    end

    def iterate_values(array)
      array.each do |item|
        if item == 'Nemo'
          puts 'Found Nemo!'
          throw :done
        end
      end
    end

    animals = {cats: %w[Simba], fish: %w[Crispy Nemo], boars: %w[Pumba]}
    catch(:done) { iterate_pairs(animals) }

  p Този пример е доста синтетичен.

= slide 'catch и throw', 'накратко' do
  list:
    `catch` приема символ и блок.
    Нещо в блока може да извика `throw` със същия символ.
    Когато това стане, Ruby започва да търси обратно по стека до съответния `catch`.
    Когато бъде намерен, изпълнението продължава след `catch`-а.
    `throw` взема допълнителен аргумент, който е върнатата стойност на `catch`.
    Ако няма `throw`, стойността на `catch` е последния оценен израз.
