= slide 'Днес' do
  list:
    Тестове и тестване
    Unit, интеграционн
    Тестове на уеб, GUI, CLI, API-та

= slide 'Пета задача' do
  list:
    Последната, [пета задача](/tasks/5) е публикувана
    Задачата е ретроспективна и с малко по-различни правила от досегашните домашни
    Добър шанс да решите пропуснати задачи и да научите пропуснати неща
    Трябва да клонирате това хранилище: [github.com/fmi/ruby-retrospective-4](https://github.com/fmi/ruby-retrospective-4)
    Имате време до следващия понеделник

= slide 'Кратка история' do
  p Преди години се занимавах с електроника като хоби.
  p.action Нещата, които правех, обикновено изглеждаха така:

= slide '' do
  img src="22/01-small-breadboard.jpg" style="max-width: 60%"

= slide '' do
  img src="22/02-breadboard-resistors.jpg" style="max-width: 60%"

= slide '' do
  img src="22/03-breadboard-ics-wires.jpg" style="max-width: 60%"

= slide '' do
  img src="22/04-breadboard-wires-mess.jpg" style="max-width: 60%"

= slide '' do
  img src="22/05-flying-montage.jpg" style="max-width: 60%"

= slide 'Мотивация' do
  list:
    Вълнуващо е, когато "творението" проработи
    Чувството да си създател на нещо е окрилящо и мотивиращо
    Чувството за завършен краен продукт - също

= slide 'Хвърчащият монтаж - плюсове' do
  list:
    Почти не изисква предварително планиране
    Пести време
    Подходящ за експерименти и изследване на непознати територии
    Бързото достигане до работещ продукт носи удовлетворение

= slide 'Хвърчащият монтаж - проблеми' do
  list:
    Изработеното изделие е много крехко и чупливо
    Много трудно позволява модификации от един момент нататък
    Ако има проблем, е много трудно да се открие и да се отстрани
    Ако го оставите за месец, ще забравите всичко за него
    Няма "пазарен" и "завършен" вид

= slide 'Продукт' do
  p Хардуерът в "хвърчащ монтаж" не е завършен продукт.

= slide 'Legacy код', 'кошмарът на всеки програмист' do
  p Какво е legacy код?

  list:
    "Legacy code is source code that relates to a no-longer supported or manufactured operating system or other computer technology."
    Legacy кодът е всеки код без автоматизирани тестове

= slide 'Код без тестове = legacy код' do
  list:
    Всеки ред код без тестове е равносилен на хвърчащ монтаж
    Носи същите плюсове и минуси
    Всеки дълготраен проект и продукт трябва да има тестове
    Само така ще бъде завършен продукт

= slide 'Лош опит' do
  p Аз съм допринесъл много за света с код тип "хвърчащ монтаж".
  p Достигнах до някои изводи по трудния начин.

= slide 'Завършен продукт = функционалност + тестове' do
  p Едва напоследък започнах да виждам софтуера като завършен продукт, с кутия и пазарен вид, когато идва с пълен пакет автоматизирани тестове.

= slide 'Няма лесен път към просветлението' do
  list:
    Да пишете тестове не е лесно
    В началото ще ви отнема до два пъти повече време
    Има много мотики, които трябва да и ще настъпите
    "The One True Way®" не съществува
    Трябва да извървите голяма част от пътя сами
    Има с какво да си помагате

= slide 'To test or not to test?' do
  p Едно е сигурно - без тестове не може.
  p.aciton Затова затягайте коланите и поемайте по пътя.

= slide 'In testing I trust!' do
  list:
    Не всеки ред код трябва да се тества
    Не винаги трябва да тествате даден проект (например - прототипизиране)
    Различни техники на тестване ви носят различни плюсове и минуси - преценявайте според ситуацията
    Както всяко правило и добра практика, не следвайте чужди съвети на сляпо
    Пробвайте какво работи за вас, за екипа ви, за проекта
    Опитайте да научите колкото можете от чужди грешки и сполуки, но...
    Само опитът ви ще ви помогне

= slide 'Терминология' do
  list:
    Понякога има вариации в термините
    Ще опитаме да покрием основните, валидни за повечето среди и езици за програмиране

= slide 'Unit тестове' do
  list:
    Тестване на една сравнително атомарна "единица" софтуер ("unit")
    На практика, обикновено това са (публичните) методи на даден клас
    Така тествате класовете си и методите си

= slide 'Интеграционни тестове' do
  list:
    Тестват няколко компонента (или цялата система) в интеграция
    Например, тест за логин на потребител - тества цялото уеб приложение, включително базата данни
    Близки термини: "acceptance" тестове, "end-to-end" тестове
    Обикновено са "black-box" тестове - приемат, че по-малките компоненти са unit-тествани
    Много полезни, но бавни

= slide 'xUnit' do
  blockquote
    ' xUnit is the collective name for several unit testing frameworks that derive their structure and functionality from Smalltalk's SUnit. SUnit, designed by Kent Beck in 1998, was written in a highly-structured object-oriented style.

= slide 'Assertion' do
  blockquote
    ' An assertion is a function or macro that verifies the behavior (or the state) of the unit under test. Usually an assertion expresses a logical condition that is true for results expected in a correctly running system under test (SUT). Failure of an assertion typically throws an exception, aborting the execution of the current test.

  list:
    С други думи, единича проверка на даден факт
    Например, ако събера 2 + 2, очаквам да получа 4
    `assert(2 + 2 == 4, 'Wait, what?')`

= slide 'Test Fixtures' do
  blockquote
    ' A test fixture (also known as a test context) is the set of preconditions or state needed to run a test. The developer should set up a known good state before the tests, and return to the original state after the tests.

  list:
    Това не означава само записи в база данни
    Може да са файлове с определени данни - картинки, имейли и прочее
    За всеки език има техники и библиотеки, които помагат с връщането на състоянието на базата

= slide 'Test case' do
  list:
    В случая на софтуер - една тематична проверка на поведението на софтуера в конкретна ситуация
    В един test case може да има една или няколко асертации
    Обикновено се препоръчва да не са повече от една
    Например - `test_can_withdraw_when_enough_amount_available`
    Или - `test_cannot_withdraw_when_not_enough_amount_available`
    Обикновено, освен асертации, test case-ът съдържа и някаква форма на подготовка (setup) на средата

= slide 'setup/teardown' do
  list:
    `setup` е код, който се изпълнява преди всеки тест (test case) и подготвя "света" и състиянието за теста (fixtures)
    `teardown` е същото, но след теста и има за задача да върне нещата както са били и да направи cleanup
    В различните test frameworks имат различни имена, но смислово правят това
    Обикновено има възможност и за групиране на общ setup код за една тематична група от тестове

= slide 'Test Suite' do
  blockquote A test suite is a set of tests that all share the same fixture. The order of the tests shouldn't matter.

  list:
    Горното е дефиницията на този термин в xUnit / SUnit
    Понякога "test suite" се нарича цялата съвкупност от тестове на даден проект

= slide 'Test Runner' do
  list:
    Просто софтуер, който изпълнява тестовете ви
    Има различни варианти за това
    Често се налага да може да пуснете само един конкретен тест case, или само unit-тестовете на даден клас
    Различни режими на работа и различно форматиране и оцветяване на изхода (резултатите)

= slide 'Test Doubles' do
  list:
    Stub - симулация на метод, като връща конкретна стойност
    Mock - като stub, но [позволява и проверка дали даден метод е извикан определен брой пъти](http://martinfowler.com/articles/mocksArentStubs.html)
    Fake - нещо като събирателно за горните две
    Double - фалшив обект, който отговаря на всякакви съобщения (методи)
    Това са доста груби дефиниции; понякога различни хора използват различни термини за едно и също нещо
    Примери за [test doubles в RSpec](https://relishapp.com/rspec/rspec-mocks/docs)

= slide 'Общи принципи' do
  list:
    Не тествате private методи
    Ако private методите ви се струват сложни и че е нужно тестване, значи е нужно да ги изведете в отделен клас
    Избягвате random данни в тестовете - необходимо ви е предвидимо поведение; ако веднъж стане failure, трябва да може да го пресъздадете
    Тествате в изолация и предвидимо обкръжение - правите setup
    Горното включва дори time traveling в някои ситуации (gem: timecop) - немалко хора са имали failing test заради DST промяна, или сменена часова зона

= slide 'Скорост' do
  list:
    Трябва да може да проверите за части от секундата дали unit тестовете на класа, който пишете, минават или не
    Затова тестовете трябва да са бързи - за да дават максимално бързо feedback
    Обикновено не пускате всички тестове на всяка промяна, но често - няколко пъти в минута - пускате unit-тестовете на дадения клас/модул/код
    Затова и тестовете трябва да могат да работят в максимална изолация

= slide 'TDD', 'test-driven development' do
  list:
    Методология (философия?) за разработване на софтуер
    Някои хора твърдят, че за тях води до по-добра архитектура, по-ясен и прост код
    Red → Green → Refactor
    Red - пишете тест без код и пускате, за да се уверите, че не е такъв, който винаги минава
    Green - пишете минималния код, колкото да мине теста (stub-вате), за да проверите, че тестът не е такъв, който винаги fail-ва
    Refactor - знаете, че имате работещ тест; рефакторирате кода на спокойствие и си пускате теста след всяка промяна
    Разчита на изолация, скорост и фокус на тестовете

= slide 'Continuous Integration' do
  list:
    Машина/процес, която автоматично пуска тестовете, когато някой push-не в определен branch
    Веднага сигнализира, ако някой commit-не код, който чупи тестовете
    Понякога тестовете (или поне някои от тях) са по-бавни; CI-ят се грижи да ги пуска когато трябва, асинхронно от разработката на програмиста
    Популярна услуга за това за OSS проекти – Travis CI

= slide 'Метрики' do
  list:
    Code coverage - колко процента от редовете код са покрити от тестове
    Обикновено се мери кои редове код се изпълняват и кои не, докато работят тестовете
    Това е косвена метрика за покритие и още по-косвена - за качество на кода
    Също - code LOC спрямо test LOC

= slide 'Тестване в Ruby' do
  list:
    Няколко различни варианти
    Test::Unit
    Minitest
    RSpec
    Capybara, Cucumber
    SimpleCov

= slide 'Test::Unit' do
  list:
    "An xUnit family unit testing framework for Ruby."
    [github.com/test-unit/test-unit](https://github.com/test-unit/test-unit)
    [test-unit.github.io](http://test-unit.github.io/)
    Част от стандартната библиотека на Ruby
    Има доста адаптери за различни случаи

= slide 'Test::Unit - assertions' do
  list:
    `assert(boolean, message = nil)`
    `assert_equal(expected, actual, message = nil)`
    `assert_in_delta(expected_float, actual_float, delta, message = "")`
    `assert_match(pattern, string, message = "")`
    `assert_nil(object, message = "")`
    `assert_not_nil(object, message = "")`
    `assert_raises(*args, &block)`
    [Списък с наличните assertions](http://www.rubydoc.info/gems/test-unit/1.2.3/Test/Unit/Assertions)

= slide 'Test::Unit - пример' do
  example:
    require 'test/unit'

    class TC_MyTest < Test::Unit::TestCase
      # def setup
      # end

      # def teardown
      # end

      def test_fail
        assert(false, 'Assertion was false.')
      end
    end

= slide 'RSpec' do
  list:
    "Behaviour Driven Development for Ruby"
    [github.com/rspec/rspec](https://github.com/rspec/rspec) и [rspec.info](http://rspec.info/)
    "Assertions" се наричат "expectations" ([RSpec expectations](https://github.com/rspec/rspec-expectations))
    Съвкупност от rspec-core, rspec-expectations и rspec-mocks

= slide 'RSpec - пример' do
  example:
    RSpec.describe Account do
      it "has a balance of zero when first created" do
        expect(Account.new.balance).to eq(Money.new(0))
      end
    end

= slide 'RSpec - повече информация' do
  list:
    Отправни точки: документацията на [rspec-core](https://relishapp.com/rspec/rspec-core/docs), [rspec-expectations](https://relishapp.com/rspec/rspec-expectations/docs) и [rspec-mocks](https://relishapp.com/rspec/rspec-mocks/docs)
    [Spec-овете на сайта на курса](https://github.com/skanev/evans/tree/master/spec)
    Книги

= slide 'Minitest' do
  list:
    "minitest provides a complete suite of testing facilities supporting TDD, BDD, mocking, and benchmarking."
    [Seattle.rb проект](https://github.com/seattlerb/minitest)
    Част от стандартната библиотека от Ruby 1.9 насам
    Съставен от Minitest::Unit, Minitest::Spec, Minitest::Mock и Minitest::Benchmark
    [Документация](http://docs.seattlerb.org/minitest/)

= slide 'Компоненти на Minitest' do
  list:
    "minitest/unit is a small and incredibly fast unit testing framework. It provides a rich set of assertions to make your tests clean and readable."
    "minitest/spec is a functionally complete spec engine. It hooks onto minitest/unit and seamlessly bridges test assertions over to spec expectations."
    "minitest/benchmark is an awesome way to assert the performance of your algorithms in a repeatable manner. Now you can assert that your newb co-worker doesn't replace your linear algorithm with an exponential one!"
    "minitest/mock is a beautifully tiny mock (and stub) object framework."

= slide 'Minitest::Unit' do
  example:
    class TestMeme < Minitest::Test
      def setup
        @meme = Meme.new
      end

      def test_that_kitty_can_eat
        assert_equal "OHAI!", @meme.i_can_has_cheezburger?
      end

      def test_that_it_will_not_blend
        refute_match /^no/i, @meme.will_it_blend?
      end

      def test_that_will_be_skipped
        skip "test this later"
      end
    end

= slide 'Minitest::Spec' do
  example:
    describe Meme do
      before do
        @meme = Meme.new
      end

      describe "when asked about cheeseburgers" do
        it "must respond positively" do
          @meme.i_can_has_cheezburger?.must_equal "OHAI!"
        end
      end

      describe "when asked about blending possibilities" do
        it "won't say no" do
          @meme.will_it_blend?.wont_match /^no/i
        end
      end
    end

= slide 'Генериране на тестови данни' do
  list:
    Fixtures в Rails
    FactoryGirl
    Faker
    Пак - избягвайте random; използвайте series и подобни

= slide 'SimpleCov' do
  list:
    [https://github.com/colszowka/simplecov](https://github.com/colszowka/simplecov)

= slide 'Тестване на GUI' do
  list:
    Unit-тествате кода отзад и не държите бизнес логика в GUI-specific код
    Пишете интеграционни тестове за GUI
    Често през accessibility функционалност

= slide 'Тестване на CLI' do
  list:
    Същото като за GUI
    Обикновено освен отделянето на бизнес кода, и самият bin файл е капсулиран в отделен клас - option handling-а и прочее - и може да се unit-тества
    Интеграционният тест може и да вика изпълнимия файл, макар че това ще е по-бавно

= slide 'Тестване на API' do
  list:
    Моквате.

= slide 'Тестване на уеб' do
  list:
    Rack::Test
    Capybara
    Cucumber

= slide 'Rack::Test' do
  blockquote
    ' Rack::Test is a small, simple testing API for Rack apps. It can be used on its own or as a reusable starting point for Web frameworks and testing libraries to build on.

  list:
    "Maintains a cookie jar across requests"
    "Easily follow redirects when desired"
    "Set request headers to be used by all subsequent requests"
    "Small footprint. Approximately 200 LOC"
    [github.com/brynary/rack-test](https://github.com/brynary/rack-test)

= slide 'Rack::Test - пример' do
  example:
    require "rack/test"

    class HomepageTest < Test::Unit::TestCase
      include Rack::Test::Methods

      def test_redirect_logged_in_users_to_dashboard
        authorize "bryan", "secret"
        get "/"
        follow_redirect!

        assert_equal "http://example.org/redirected", last_request.url
        assert last_response.ok?
      end
    end

= slide 'Capybara' do
  p
    a href="https://github.com/jnicklas/capybara" https://github.com/jnicklas/capybara

  list:
    Интеграционни тестове
    Ползва Rack::Test и симулира HTTP заявки
    Проверявате дали резултата отговаря на очакванията ви
    Горното е бързо, но не поддържа JS и реални HTTP заявки към външни услуги
    Затова - Selenium (webdriver), Capybara-webkit или Poltergeist (интеграция с PhantomJS)

= slide 'Capybara - пример' do
  example:
    describe "the signin process" do
      before :each do
        User.make(:email => 'user@example.com', :password => 'password')
      end

      it "signs me in" do
        visit '/sessions/new'
        within("#session") do
          fill_in 'Email', :with => 'user@example.com'
          fill_in 'Password', :with => 'password'
        end
        click_button 'Sign in'
        expect(page).to have_content 'Success'
      end
    end

= slide 'Selenium' do
  list:
    [http://www.seleniumhq.org/projects/webdriver/](http://www.seleniumhq.org/projects/webdriver/)
    API за контролиране на браузъри
    Има binding-и за Firefox, Chrome, Safari, IE, Android, PhantomJS и други

= slide 'PhantomJS' do
  p
    a href="http://phantomjs.org/" phantomjs.org

  blockquote
    ' PhantomJS is a headless WebKit scriptable with a JavaScript API. It has fast and native support for various web standards: DOM handling, CSS selector, JSON, Canvas, and SVG.

  list:
    Много широка гама от възможни употреби
    Най-простата - да направите screenshot на страница и да го запазите в PNG

= slide 'PhantomJS - пример' do
  example:
    console.log('Loading a web page');
    var page = require('webpage').create();
    var url = 'http://www.phantomjs.org/';
    page.open(url, function (status) {
      //Page is loaded!
      phantom.exit();
    });

= slide 'Cucumber', 'Making BDD fun' do
  list:
    Behaviour driven development
    [cukes.info](http://cukes.info/) и [github.com/cucumber/cucumber](https://github.com/cucumber/cucumber)
    "Cucumber is a tool that executes plain-text functional descriptions as automated tests. The language that Cucumber understands is called Gherkin."
    Може да започнете с [Wiki-то](https://github.com/cucumber/cucumber/wiki)
    Има и доста книги по темата

= slide 'Gherkin' do
  pre
    ' Feature: Search courses
        Courses should be searchable by topic
        Search results should provide the course code

        Scenario: Search by topic
          Given there are 240 courses which do not have the topic "biology"
          And there are 2 courses, A001 and B205, that each have "biology" as one of the topics
          When I search for "biology"
          Then I should see the following courses:
            | Course code |
            | A001        |
            | B205        |

= slide 'Пример с Gherkin и Cucumber' do
  list:
    Може да видите [feature-дефинициите на сайта на курса](https://github.com/skanev/evans/tree/master/features)
    Например, [мотивацията за и тестовете на предизвикателствата](https://github.com/skanev/evans/blob/master/features/challenges.feature) и съответните [дефиниции на стъпки](https://github.com/skanev/evans/blob/master/features/step_definitions/challenge_steps.rb)
