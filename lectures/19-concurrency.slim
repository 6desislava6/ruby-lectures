= slide 'Днес' do
  list:
    Процеси
    Нишки
    Fibers
    Размисли на тема конкурентност

= slide 'Disclaimer' do
  p Няма да говорим за паралелни алгоритми и други подобни неща
  p Ще говорим за конкурентност на по-практическо ниво

= slide 'IO-bound vs. CPU-bound' do
  list:
    CPU-bound са програми, които главно зависият от време прекарано в процесора
    Примери за такива са видео кодиране, обработка на изображения, звук и прочее
    IO-bound са програми, които главно зависят от време, прекарано в чакане (мрежа, памет, диск)
    Например изпращане на имейли, чакане на резултати от база данни, четене и писане по диска и други

= slide 'Processes vs. Threads (Green & Native)' do
  list:
    Три начина за конкурентност
    Някой може ли да обясни разликите?
    Процесите са примитив на операционната система, има ги навсякъде
    Нишките също са примитив на ОС (т. нар. "native threads")
    "Green threads" е имплементация на нишки, направена в runtime-а на езика – нещо като имитация
    Днес ще разгледаме паралелизация в Ruby с процеси и нишки

= slide 'Паралелизация на многоядрени процесори' do
  list:
    В днешно време разполагаме с многоядрени процесори
    Ако имаме CPU-bound проблеми, за оптимално натоварване трябва да ползваме всички ядра
    Операционните системи се оправят добре с това от много време на ниво процеси
    Съвременните ОС дават същите ползи и на ниво native OS threads
    За един осемядрен процесор, 8 процеса или един процес с 8 native threads е почти едно и също

= slide 'Нишки' do
  list:
    В Ruby, очевидно, има нишки
    В Ruby 1.8 имплементацията е green threads
    В Ruby 1.9 се ползват native threads, с GVL
    В JRuby се ползват нишките на Java, без GVL

= slide 'GVL/GIL?' do
  list:
    GVL е съкращение от Global Virtual-machine Lock
    Може да се срещне още като GIL (Global Interpreter Lock) за Ruby 1.8.x и по-стари
    По същество – заключващ механизъм, позволяващ в даден момент от време да работи само една нишка
    Причината за съществуването му е заради legacy C разширения, които не са thread-safe

= slide 'Импликации от съществуването на GVL' do
  list:
    Очевидно нещо неприятно
    Ruby 1.9 и по-нови използват native OS threads, но GVL ги спира
    Един Ruby процес с N на брой нишки може да натовари максимум едно процесорно ядро
    Все пак, има подобрения – освобождаване на GVL при изпълнение на външни IO-операции
    Например, докато чакате резултата от някоя тежка заявка, Ruby ще изпълнява код от друга нишка
    Следователно, нишките в MRI дават решение на IO-bound проблеми, но не са подходящи за CPU-bound
    За CPU-bound проблеми сте принудени да ползвате процеси, или друга Ruby имплементация (JRuby)

= slide 'Бъдещето на GVL' do
  list:
    GVL вероятно ще изчезне един ден
    Не всичко е загубено и днес – повечето ни проблеми са IO-bound (особено в едно уеб приложение)
    Ако имате CPU bound проблеми, спокойно може да използвате многопроцесорна архитектура
    Вариант е и да минете на алтернативна Ruby имплементация като JRuby или Rubinius (ще имаме лекция за тях)
    Ruby не е най-подходящият инструмент за решаване на CPU-bound проблеми не само заради паралелизацията

= slide '1. Паралелизация с процеси' do
  p Първият начин за паралелизация и фоново изпълнение на задачи, който ще разгледаме, е базиран на процеси.

= slide 'fork' do
  p Това е интерфейс към системен примитив. Не всички операционни системи го имат.

  example:
    child_id = fork()
    if child_id
      puts "This is the parent"
    else
      puts "This is the child speaking!"
    end

= slide 'fork (2)' do
  p Има и друга версия:

  example:
    fork do
      puts "This is the child"
    end

    puts "This is the parent"

= slide 'module Process' do
  p Всъщност, повечето неща са в модул <code>Process</code>:

  example:
    Process.fork
    Process.wait
    Process.waitall
    Process.waitpid

= slide 'Process.wait' do
  p
    ' <code>Process.wait</code> чака някое от децата да приключи и връща pid-а му,
      а <code>$?</code> съдържа <code>Process::Status</code>.

  annotate:
    fork { exit 99 } # =>
    Process.wait     # =>
    $?.exitstatus    # =>

= slide 'Process.wait2' do
  p
    ' <code>Process.wait2</code> е сходно, но връща масив от pid и <code>Process::Status</code>:

  annotate:
    fork { exit 99 } # =>
    Process.wait2    # =>

= slide 'Process.waitpid' do
  p
    ' <code>Process.waitpid(pid)</code> чака дадено конкретно дете да приключи:

  example:
    pid = fork do
      puts "Child: I'm starting..."
      sleep 1
      puts "Child: I'm done."
    end

    puts "Parent: Child running. Waiting for it to complete."
    Process.waitpid(pid)
    puts "Parent: Child is done."

= slide 'Process.waitall' do
  p
    ' <code>Process.waitall</code> чака всички деца да приключат

  example:
    fork { sleep 1; puts '1' }
    fork { sleep 2; puts '2' }

    puts '0'
    Process.waitall
    puts '3'

= slide 'Process.exec' do
  p
    ' <code>Process.exec</code> заменя текущия процес с изпълнение на команда:

  example:
    fork do
      exec 'date'
      puts 'Unreachable code'
    end

= slide 'Process.daemon' do
  p
    ' <code>Process.daemon</code> "откача" процеса от терминала и го пуска в background.

  example:
    fork do
      Process.daemon
      loop do
        system 'echo Spam >> ~/spam'
        sleep 1
      end
    end

= slide 'Process.methods' do
  list:
    `Process.pid` връща process id на текущия процес
    `Process.ppid` връща parent process id
    `getpgid`, `gid`, `setpgid`, `uid` и т.н.
    `spawn` е швейцарско ножче за пускане на процеси
    `fork` не е наличен на всички ОС и за някои цели се препоръчва `spawn`

= slide '2. Паралелизация с нишки' do
  p Втори начин за паралелизация и фоново изпълнение на задачи е употребата на нишки.

= slide 'Thread.new' do
  p Създаването на нишка в Ruby е лесно:

  example:
    thread = Thread.new do
      puts 'This is run in the thread'
      sleep 1
      puts 'The thread is started immediatelly'
    end

    puts 'This is run in the main thread'

= slide 'Thread#join' do
  p
    ' Процесът приключва, когато основната нишка приключи. Ако искате да изчакате
      някоя от създадените нишки да приключи преди процеса да излезе, ползвайте
      <code>Thread#join</code>.

  example:
    thread = Thread.new do
      puts 'This is run in the thread'
      sleep 1
      puts 'The thread is started immediatelly'
    end

    puts 'This is run in the main thread'
    thread.join

= slide 'Thread#value' do
  p
    ' <code>Thread#value</code> блокира докато нишката не приключи и връща последния
      оценен израз

  annotate:
    thread = Thread.new do
      2 + 2
    end

    # Can be called multiple times, will block only on the first call.
    thread.value # =>
    thread.value # =>

= slide 'Изключения' do
  p
    ' Ако една нишка предизвика изключение, то няма да убие интерпретатора. Вместо това,
      ще се появи в нишката, извикваща <code>#value</code> или <code>#join</code>.

  annotate:
    thread = Thread.new do
      raise 'Oh noes!'
    end

    thread.join #!

= slide 'Изключения (2)' do
  p Можете да промените последното с <code>Thread.abort_on_exception</code>.

  example:
    Thread.abort_on_exception = true

= slide 'Thread.methods' do
  list:
    `Thread.main` връща основната нишка
    `Thread.current` връща текущата нишка
    `Thread.list` връща всички нишки

= slide 'Thread#priority' do
  ul
    li Всяка нишка има приоритет.
    li
      ' Той може да се достъпи и промени с <code>Thread#priority</code> и
        <code>Thread#priority=</code>
    li Една нишка с по-нисък приоритет ще се пуска по-рядко от нишка с по-висок такъв
    li Това е само "подсказка" за thread scheduler-а и може да бъде игнорирано на някои платформи

= slide 'Променливи (1)' do
  p Променливи, дефинирани в блока на нишката, са (очевидно) локални за нея:

  annotate:
    thread = Thread.new { something = 1 }
    thread.join

    something #!

= slide 'Променливи (2)' do
  p Блокът на нишката вижда променливите отвън:

  annotate:
    answer = 1
    thread = Thread.new { answer = 2 }

    thread.join
    answer # =>

= slide 'Променливи (3)' do
  p Можете да подавате стойности на нишката през <code>Thread.new</code>

  annotate:
    n = 10
    thread = Thread.new(n) do |number|
      n      # =>
      number # =>
    end
    n = 20

    thread.join

= slide 'Променливи (4)' do
  p
    ' Всяка нишка функционира като хеш от символи. Така може да правите
      thread-local променливи:

  annotate:
    Thread.current[:x] = 10
    thread = Thread.new do
      Thread.current[:x] # =>
      Thread.current[:x] = 20
    end
    thread.join
    Thread.current[:x]   # =>

= slide 'Thread-local променливи' do
  list:
    Thread-local променливите са thread-safe алтернатива на "глобално" състояние
    Примерно приложение на thread-local променливи може да видите в gem-а `i18n`
    Този gem дава интерфейс за локализация и превод на Ruby приложения
    Например, текущият език стои в `I18n.locale` и може да се променя с `I18n.locale=(new_locale)`
    Това ще се чупи, ако приложението ви е многонишково (например, уеб приложение, работещо в threaded режим)

= slide 'Thread-local променливи (2)' do
  p Ето примерна имплементация на <code>I18n.locale</code> методите:

  example:
    class I18n
      class << self
        def locale
          Thread.current[:locale]
        end

        def locale=(new_locale)
          Thread.current[:locale] = new_locale
        end
      end
    end

= slide 'Thread-safety' do
  p Конкурентният достъп до споделени ресурси създава проблеми, когато операциите по промяна на ресурс не са атомарни. Нека разгледаме един пример:

  annotate:
    items_in_stock = 4000

    threads = []
    40.times do
      threads << Thread.new do
        100.times do
          items_in_stock -= 1
        end
      end
    end
    threads.each(&:join)

    items_in_stock # =>

= slide 'Thread-safety (2)' do
  list:
    Кодът на предишния слайд не е thread-safe
    `items_in_stock -= 1` всъщност е `items_in_stock = items_in_stock - 1`
    Получаваме резултат 0 единствено заради особеност на MRI, а именно – заради GVL
    Няма да получите 0 в друга имплементация на Ruby, която има нормални нишки и няма GVL

= slide 'Thread-safety (3)' do
  p Нека разгледаме един още по-очевиден пример:

  example:
    username = 'larodi'

    50.times do
      Thread.new do
        unless User.username_taken?(username)
          User.create username: username
        end
      end
    end

  p.action
    ' Какво става тук? Няколко нишки могат да изпълнят <code>username_taken?</code>,
      преди да се е стигнало до създаване на потребител и да решат, че няма пробелм да
      създадат такъв, понеже потребителското име е свободно и хоп – дублирани данни.

= slide 'Синхронизация на нишки' do
  list:
    Синхронизирането на конкурентен достъп до споделен ресурс става с нещо, наречено "критични секции"
    Основен примитив за това е mutex (съкращение от "mutual exclusion")
    Не е нещо, специфично за Ruby и се предоставя от операционната система

= slide 'Mutex (1)' do
  list:
    Mutex-ите са или "заключени" или "отключени"
    Два важни метода - `lock` и `unlock`
    `lock`: Ако mutex-ът е отключен го заключва и продължава нататък
    `lock`: Ако mutex-ът е заключен, приспива нишката докато се отключи, след това прави горното
    `unlock`: Отключва mutex-а
    Имате и методи като `locked?`, `try_lock` и други
    GVL е по същество един голям mutex

= slide 'Mutex (2)' do
  example:
    $mutex = Mutex.new

    def stuff
      # pre-lock
      $mutex.lock
      # critical - access and/or modify a shared resource
      $mutex.unlock
      # post-lock
    end

    t1 = Thread.new { loop { stuff } }
    t2 = Thread.new { loop { stuff } }

    t1.join
    t2.join

= slide 'Mutex (3)' do
  p Има и по-удобна форма, приемаща блок:

  example:
    $mutex = Mutex.new

    def stuff
      # pre-lock
      $mutex.synchronize do
        # critical
      end
      # post-lock
    end

    t1 = Thread.new { loop { stuff } }
    t2 = Thread.new { loop { stuff } }

    t1.join
    t2.join

  p Обърнете внимание, че ако възникне изключение в блока, подаден на <code>synchronize</code>, mutex-ът ще бъде коректно отключен.

= slide 'Писане на thread-safe код' do
  list:
    Труден пробелм
    Избягвайте глобално състояние – глобални променливи, клас-променливи, и прочее
    Ако не може да минете без "глобално" състояние, може да ползвате thread-local променливи
    Синхронизирайте достъпа до споделени ресурси, операциите над които не са атомарни
    Използвайте само thread-safe third-party код (по-трудно, отколкото звучи)
    Добра практика е винаги да пишете код, който е thread-safe

= slide 'Thread-safe структури от данни' do
  list:
    Структурите от данни в MRI не са thread safe
    Заради GVL, обаче, изглеждат thread-safe ([прочетете повече по темата](http://www.jstorimer.com/pages/ruby-core-classes-arent-thread-safe))
    Библиотеката [github.com/headius/thread_safe](https://github.com/headius/thread_safe) предоставя thread-safe списъци и хешове
    Това е една алтернатива на ръчната синхронизация с mutex
    Реализирана е от автора на JRuby
    Може да разгледате кода на библиотеката, ако ви е интересно

= slide 'Fibers' do
  list:
    Нещо любопитно, появило се от Ruby 1.9 нататък
    [Fibers](http://www.ruby-doc.org/core-2.1.0/Fiber.html) в Ruby позволяват нелинейно изпълнение на кода
    Имат доста семпъл интерфейс – няколко клас-метода и няколко инстанционни такива
    Най-важни методи: `Fiber.new`, `Fiber.yield`, `Fiber#resume`
    Методи, налични след `require 'fiber'`: `Fiber.current`, `#alive?` и `#transfer`
    Вървят със собствен стек и позволяват паузиране на дълбоко вложен код

= slide 'Fibers' do
  p Най-простият възможен пример:

  annotate:
    fiber = Fiber.new { :larodi }

    fiber.resume # =>
    fiber.resume #!

= slide 'Fibonacci' do
  p Кодът по-долу няма да приключи никога:

  example:
    class FibonacciNumbers
      def each
        current, previous = 1, 0

        while true
          yield current
          current, previous = current + previous, current
        end
      end
    end

    FibonacciNumbers.new.each { |number| puts number }

= slide 'Fibonacci с fibers' do
  p Ако заменим <code>yield</code> с <code>Fiber.yield</code>, можем да направим нещо като безкраен поток от числа на Фибоначи:

  annotate:
    class FibonacciNumbers
      def each
        current, previous = 1, 0

        while true
          Fiber.yield current
          current, previous = current + previous, current
        end
      end
    end

    fibonacci_stream = Fiber.new { FibonacciNumbers.new.each }

    fibonacci_stream.resume # =>
    fibonacci_stream.resume # =>
    fibonacci_stream.resume # =>
    fibonacci_stream.resume # =>

= slide 'Приложение на fibers' do
  list:
    Fiber-ите са сравнително low-level примитив за control flow
    Вероятно не бихте ги ползвали директно в application код
    По-вероятно е да ги използвате, за да напишете някаква библиотека

= slide 'Enumerator-и и fibers' do
  p <code>Enumerator</code> класът в Ruby се възползва от <code>Fiber</code>.

  p Това се случва, когато направите <code>(1..100_000).each</code>.
